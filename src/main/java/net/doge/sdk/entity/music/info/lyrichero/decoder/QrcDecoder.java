package net.doge.sdk.entity.music.info.lyrichero.decoder;

import net.doge.sdk.entity.music.info.lyrichero.helper.QrcDecodeHelper;
import net.doge.util.collection.ArrayUtil;
import net.doge.util.common.CryptoUtil;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;

/**
 * @Author Doge
 * @Description QRC 歌词解析工具类
 * @Date 2020/12/15
 */
public class QrcDecoder {
    private static QrcDecoder instance;

    private QrcDecoder() {
    }

    public static QrcDecoder getInstance() {
        if (instance == null) instance = new QrcDecoder();
        return instance;
    }

    private final int[] KEY1 = ArrayUtil.bytesToInts("!@#)(NHLiuy*$%^&".getBytes(StandardCharsets.UTF_8));
    private final int[] KEY2 = ArrayUtil.bytesToInts("123ZXC!@#)(*$%^&".getBytes(StandardCharsets.UTF_8));
    private final int[] KEY3 = ArrayUtil.bytesToInts("!@#)(*$%^&abcDEF".getBytes(StandardCharsets.UTF_8));
    private QrcDecodeHelper qrcDecodeHelper = QrcDecodeHelper.getInstance();

    private void des(int[] data, int[] key, int len) {
        int[][] schedule = new int[16][6];
        qrcDecodeHelper.desKeySetup(key, schedule, QrcDecodeHelper.ENCRYPT);
        for (int i = 0; i < len; i += 8) {
            int[] in = Arrays.copyOfRange(data, i, data.length);
            qrcDecodeHelper.desCrypt(in, in, schedule);
            System.arraycopy(in, 0, data, i, in.length);
        }
    }

    private void ddes(int[] data, int[] key, int len) {
        int[][] schedule = new int[16][6];
        qrcDecodeHelper.desKeySetup(key, schedule, QrcDecodeHelper.DECRYPT);
        for (int i = 0; i < len; i += 8) {
            int[] in = Arrays.copyOfRange(data, i, data.length);
            qrcDecodeHelper.desCrypt(in, in, schedule);
            System.arraycopy(in, 0, data, i, in.length);
        }
    }

    public String decode(String hex) {
        int[] data = ArrayUtil.bytesToInts(CryptoUtil.hexToBytes(hex));
        int dataLen = data.length;

        ddes(data, KEY1, dataLen);
        des(data, KEY2, dataLen);
        ddes(data, KEY3, dataLen);

        String result = new String(CryptoUtil.decompress(ArrayUtil.intsToBytes(data)), StandardCharsets.UTF_8);
        return result;
    }

//    public static void main(String[] args) {
//        System.out.println(getInstance().parse
//    }
}
