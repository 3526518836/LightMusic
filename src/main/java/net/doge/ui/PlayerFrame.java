package net.doge.ui;

import cn.hutool.core.io.IORuntimeException;
import cn.hutool.http.HttpException;
import cn.hutool.http.HttpRequest;
import com.mpatric.mp3agic.InvalidDataException;
import com.mpatric.mp3agic.UnsupportedTagException;
import it.sauronsoftware.jave.EncoderException;
import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.collections.ObservableList;
import javafx.embed.swing.JFXPanel;
import javafx.scene.media.AudioSpectrumListener;
import javafx.scene.media.MediaException;
import javafx.scene.media.MediaPlayer;
import javafx.stage.DirectoryChooser;
import javafx.stage.FileChooser;
import javafx.util.Duration;
import net.coobird.thumbnailator.Thumbnails;
import net.doge.constants.*;
import net.doge.exceptions.IllegalMediaException;
import net.doge.exceptions.NoLyricException;
import net.doge.exceptions.NoPrivilegeException;
import net.doge.models.*;
import net.doge.ui.components.*;
import net.doge.ui.components.dialog.ColorChooserDialog;
import net.doge.ui.components.dialog.*;
import net.doge.ui.componentui.*;
import net.doge.ui.listeners.ButtonMouseListener;
import net.doge.ui.listeners.ChangePaneButtonMouseListener;
import net.doge.ui.listeners.ScrollPaneListener;
import net.doge.ui.listeners.TextFieldHintListener;
import net.doge.ui.renderers.*;
import net.doge.utils.*;
import net.sf.json.JSONArray;
import net.sf.json.JSONException;
import net.sf.json.JSONObject;
import net.sourceforge.pinyin4j.format.exception.BadHanyuPinyinOutputFormatCombination;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.Timer;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.*;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.*;
import java.util.concurrent.*;

public class PlayerFrame extends JFrame {
    private final PlayerFrame THIS = this;
    public final String TITLE = "轻音";
    // 窗口宽高
    public int windowWidth;
    public int windowHeight;
    private final String SONG_NAME_LABEL = "歌曲名：";
    private final String ARTIST_LABEL = "艺术家：";
    private final String ALBUM_NAME_LABEL = "专辑名：";
    // 进度条最小值
    private final int TIME_BAR_MIN = 0;
    // 进度条最大值
    private final int TIME_BAR_MAX = 0x3f3f3f3f;
    // 默认音量
    private final int DEFAULT_VOLUME = 90;
    // 最大音量
    private final int MAX_VOLUME = 100;
    // 默认快进/快退时间
    private final int DEFAULT_FORWARD_OR_BACKWARD_TIME = 10;
    // 默认倍速
    private final double DEFAULT_RATE = 1;
    // 默认均衡
    private final double DEFAULT_BALANCE = 0;
    // 歌词高亮位置
    private final int LRC_INDEX = 8;
    // 历史记录最大条数
    public int maxHistoryCount = 300;
    // 搜索历史最大条数
    public int maxSearchHistoryCount = 50;
    // 最大尝试播放次数
    private final int MAX_RETRY = 3;
    // 图片圆角半径弧度
    private final double TINY_ARC = 0.2;
    private final double MIDDLE_ARC = 0.1;
    private final double LARGE_ARC = 0.03;
    //    private final double WIN_ARC = 0.01;
    private final String PAGINATION_MSG = "第 %s 页，共 %s 页";
    private final String NO_LRC_MSG = "尽情享受音乐的世界";
    private final String BAD_FORMAT_LRC_MSG = "该歌词不支持滚动";
    private final String LOADING_MSG = "加载中，客官请稍等......";
    private final String LOAD_FAILED = "数据加载失败";
    private final String ASK_DISPOSE_MSG = "你希望隐藏到托盘还是退出程序？";
    private final String REMEMBER_CHOICE_MSG = "记住我的选择";
    private final String[] EXIT_OPTIONS = {"隐藏到托盘", "退出程序", "取消"};
    private final String ASK_REIMPORT_MSG = "将重新从所有歌曲目录导入歌曲，是否继续？";
    private final String ASK_RETAIN_MUSIC_LIST_MSG = "播放列表已存在歌曲，您希望保留播放列表的歌曲吗？(选择“否”将清空原有的歌曲列表)";
    private final String ASK_CLEAR_CACHE_MSG = "当前缓存大小为 %s，确定要清空缓存吗？";
    private final String ASK_REMOVE_FIFE_NOT_FOUND_MSG = "该歌曲文件不存在，是否从列表中删除？";
    private final String ASK_REMOVE_ITEMS_MSG = "是否删除选中的项目？";
    private final String ASK_CLEAR_LIST_MSG = "是否要清空列表？";
    private final String ASK_DUPLICATE_MSG = "是否要删除列表中重复的项目？";
    private final String ASK_REVERSE_MSG = "是否要倒置列表顺序？";
    private final String UPDATE_CHECKING_MSG = "检查更新中......";
    private final String UPDATE_CHECK_FAIL_MSG = "检查更新失败，请稍后再试";
    private final String UPDATE_MSG = "已有新版本 %s，当前版本 %s，是否前往发布页更新？";
    private final String LATEST_MSG = "当前已是最新版本";
    private final String HELP_MSG = String.format("Hi，欢迎使用%s~\n\n下面是一些常见问题解答，祝你使用愉快~\n\nQ1：如何批量操作？\nA1：列表支持 Ctrl Shift 多选，Ctrl + A 全选\n\n" +
            "Q2：如何导入我的歌单？\nA2：在“用户”选项卡搜索自己的用户名，右键即可“查看用户歌单”，无需登录\n\n" +
            "Q3：如何进行收藏等其他操作？\nA3：通过右键菜单操作，除此之外还有很多功能都在右键菜单里，等你探索~\n\n" +
            "Q4：为什么有些歌曲名字和音频不一致？\nA4：付费或无版权歌曲采用自动换源机制，不能100%%保证一致，可以尝试手动换源搜索\n\n" +
            "Q5：资源是如何获取的？\nA5：调用各大平台的 API 获取，免费使用，不可商用！\n\n" +
            "Q6：软件更新后原来的数据如何继承？\nA6：建议覆盖更新，数据 JSON 文件保存在程序所在目录，保证与程序在同一目录即可\n\n" +
            "如果还有其他的问题，欢迎在我的 Github 主页发布 issue ~", TITLE);
    private final String FIRST_PAGE_MSG = "已经是第一页了";
    private final String LAST_PAGE_MSG = "已经是最后一页了";
    private final String ILLEGAL_PAGE_MSG = "请输入合法页码";
    private final String FILE_NOT_FOUND_MSG = "文件不存在";
    private final String UNSUPPORTED_AUDIO_FILE_MSG = "不支持该格式的音频文件";
    private final String INVALID_AUDIO_FILE_MSG = "不是有效的音频文件";
    private final String NO_CATALOG_MSG = "歌曲目录为空";
    private final String NO_MUSIC_MSG = "没有可以播放的歌曲";
    private final String ALREADY_PLAYING_MSG = "当前歌曲已经在播放";
    private final String NO_IMG_MSG = "没有可加载的图片";
    private final String GET_RESOURCE_FAILED_MSG = "获取资源失败";
    private final String NO_NET_MSG = "无法连接到服务器";
    private final String TIME_OUT_MSG = "请求超时";
    private final String API_ERROR_MSG = "接口异常，请稍后再试";
    private final String CLEAR_CACHE_SUCCESS_MSG = "清除缓存成功";
    private final String NEXT_PLAY_SUCCESS_MSG = "已添加到下一首";
    private final String COLLECT_SUCCESS_MSG = "收藏成功";
    private final String CANCEL_COLLECTION_SUCCESS_MSG = "取消收藏成功";
    private final String REMOVE_SUCCESS_MSG = "删除成功";
    private final String CLEAR_SUCCESS_MSG = "清空成功";
    private final String DUPLICATE_SUCCESS_MSG = "去重成功";
    private final String REVERSE_SUCCESS_MSG = "倒序成功";
    private final String CHANGE_SEQUENCE_MSG = "已切换到顺序播放";
    private final String CHANGE_LIST_CYCLE_MSG = "已切换到列表循环";
    private final String CHANGE_SINGLE_MSG = "已切换到单曲循环";
    private final String CHANGE_SHUFFLE_MSG = "已切换到随机播放";
    private final String DOWNLOAD_COMPLETED_MSG = "下载完成";
    private final String TASK_ADDED_MSG = "已加入到下载队列";
    private final String WAIT_FOR_TASK_COMPLETED_MSG = "请等待下载任务完成";
    private final String ASK_REMOVE_SELECTED_TASKS_MSG = "确定要删除选中任务吗？";
    private final String ASK_REMOVE_FILE_MSG = "同时删除文件";
    private final String ASK_RESTART_ALL_TASKS_MSG = "是否要重新开始全部任务？";
    private final String ASK_CANCEL_ALL_TASKS_MSG = "是否要取消全部任务？";
    private final String ASK_REMOVE_ALL_TASKS_MSG = "确定要清空任务列表吗？";
    private final String ASK_REMOVE_SONGS_FROM_PLAY_QUEUE_MSG = "是否从播放队列删除选中歌曲？";
    private final String ASK_CLEAR_PLAY_QUEUE_MSG = "是否要清空播放队列？";
    // 加载 MV 提示
    private final String LOADING_MV_MSG = "请稍候，MV 加载中......";
    private final String DEFAULT_TIME = TimeUtils.format(0);
    private final String PLAY_MENU_ITEM_TEXT = "播放";
    private final String NEXT_PLAY_MENU_ITEM_TEXT = "下一首播放";
    private final String OPEN_MENU_ITEM_TEXT = "打开";
    private final String PLAY_ALL_MENU_ITEM_TEXT = "播放全部";
    private final String BROWSE_ALBUM_MENU_ITEM_TEXT = "查看歌手专辑";
    private final String BROWSE_MV_MENU_ITEM_TEXT = "查看歌手 MV";
    private final String SIMILAR_ARTIST_MENU_ITEM_TEXT = "查看相似歌手";
    private final String ARTIST_FANS_MENU_ITEM_TEXT = "查看歌手粉丝";
    private final String ARTIST_BUDDY_MENU_ITEM_TEXT = "查看歌手合作人";
    private final String ARTIST_RADIO_MENU_ITEM_TEXT = "查看歌手电台";
    private final String ARTIST_PHOTOS_MENU_ITEM_TEXT = "查看歌手照片";
    private final String USER_PLAYLIST_MENU_ITEM_TEXT = "查看用户歌单";
    private final String USER_ALBUM_MENU_ITEM_TEXT = "查看用户专辑";
    private final String USER_RADIO_MENU_ITEM_TEXT = "查看用户电台";
    private final String USER_VIDEO_MENU_ITEM_TEXT = "查看用户视频";
    private final String USER_FOLLOW_MENU_ITEM_TEXT = "查看用户关注";
    private final String USER_FOLLOWED_MENU_ITEM_TEXT = "查看用户粉丝";
    private final String RADIO_DJ_MENU_ITEM_TEXT = "查看主播";
    private final String EDIT_INFO_MENU_ITEM_TEXT = "编辑歌曲信息";
    private final String LOCATE_FILE_MENU_ITEM_TEXT = "打开文件所在位置";
    private final String REMOVE_MENU_ITEM_TEXT = "从列表删除";
    private final String COLLECT_MENU_ITEM_TEXT = "收藏";
    private final String CANCEL_COLLECTION_MENU_ITEM_TEXT = "取消收藏";
    private final String PLAY_MV_MENU_ITEM_TEXT = "播放 MV";
    private final String DOWNLOAD_MENU_ITEM_TEXT = "下载";
    private final String COMMENT_MENU_ITEM_TEXT = "查看评论";
    private final String ALBUM_ARTIST_MENU_ITEM_TEXT = "查看歌手/作者";
    private final String SIMILAR_ALBUM_MENU_ITEM_TEXT = "查看相似专辑";
    private final String ALBUM_PHOTOS_MENU_ITEM_TEXT = "查看专辑照片";
    private final String SHEET_MENU_ITEM_TEXT = "查看乐谱";
    private final String SEARCH_SONG_MENU_ITEM_TEXT = "搜索这首歌曲";
    private final String SIMILAR_SONG_MENU_ITEM_TEXT = "查看相似歌曲";
    private final String RELATED_PLAYLIST_MENU_ITEM_TEXT = "查看相关歌单";
    private final String AUTHOR_MENU_ITEM_TEXT = "查看歌手/作者";
    private final String ALBUM_MENU_ITEM_TEXT = "查看专辑/电台";
    private final String SIMILAR_PLAYLIST_MENU_ITEM_TEXT = "查看相似歌单";
    private final String PLAYLIST_CREATOR_MENU_ITEM_TEXT = "查看创建者";
    private final String PLAYLIST_SUBSCRIBER_MENU_ITEM_TEXT = "查看收藏者";
    private final String RADIO_SUBSCRIBER_MENU_ITEM_TEXT = "查看订阅者";
    private final String SIMILAR_RADIO_MENU_ITEM_TEXT = "查看相似电台";
    private final String RADIO_ARTISTS_MENU_ITEM_TEXT = "查看演职员/CV";
    private final String RADIO_PHOTOS_MENU_ITEM_TEXT = "查看电台照片";
    private final String RADIO_POSTERS_MENU_ITEM_TEXT = "查看电台海报";
    private final String REC_RADIO_MENU_ITEM_TEXT = "查看推荐电台";
    private final String RELATED_MV_MENU_ITEM_TEXT = "查看相关 MV";
    private final String SIMILAR_MV_MENU_ITEM_TEXT = "查看相似 MV";
    private final String VIDEO_EPISODE_MENU_ITEM_TEXT = "查看视频分集";
    private final String MV_CREATOR_MENU_ITEM_TEXT = "查看歌手/发布者";
    private final String COPY_NAME_MENU_ITEM_TEXT = "复制名称";
    private final String SAVE_ALBUM_IMAGE_TEXT = "导出专辑图片";

    // 托盘图标
    private ImageIcon trayIcon = new ImageIcon(SimplePath.ICON_PATH + "tray.png");
    // 打开主界面图标
    private ImageIcon openMainFrameIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "openMainFrame.png");
    // 退出图标
    private ImageIcon exitIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "exit.png");
    // 主界面标题图标
    private ImageIcon titleIcon = new ImageIcon(SimplePath.ICON_PATH + "title.png");
    // 隐藏歌曲详情图标
    private ImageIcon hideDetailIcon = new ImageIcon(SimplePath.ICON_PATH + "hideDetail.png");
    // 分割线图标
    private ImageIcon splitIcon = new ImageIcon(SimplePath.ICON_PATH + "split.png");
    // 迷你模式图标
    private ImageIcon miniIcon = new ImageIcon(SimplePath.ICON_PATH + "miniWindow.png");
    // 最小化图标
    private ImageIcon minimizeIcon = new ImageIcon(SimplePath.ICON_PATH + "minWindow.png");
    // 最大化图标
    private ImageIcon maximizeIcon = new ImageIcon(SimplePath.ICON_PATH + "maxWindow.png");
    // 恢复图标
    private ImageIcon restoreIcon = new ImageIcon(SimplePath.ICON_PATH + "restoreWindow.png");
    // 关闭窗口图标
    private ImageIcon closeWindowIcon = new ImageIcon(SimplePath.ICON_PATH + "closeWindow.png");
    // 菜单图标
    private ImageIcon menuIcon = new ImageIcon(SimplePath.ICON_PATH + "menu.png");
    // 更换主题图标
    private ImageIcon changeStyleIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "changeStyle.png");
    // 添加自定义主题图标
    private ImageIcon addCustomStyleIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "addCustomStyle.png");
    // 关闭歌曲图标
    private ImageIcon closeSongIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "closeSong.png");
    // 清空缓存图标
    private ImageIcon clearCacheIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "clearCache.png");
    // 设置图标
    private ImageIcon settingsIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "settings.png");
    // 捐赠图标
    private ImageIcon donateIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "donate.png");
    // 发布页图标
    private ImageIcon releaseIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "release.png");
    // 检查更新图标
    private ImageIcon updateIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "update.png");
    // 指南图标
    private ImageIcon helpIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "help.png");
    // 关于图标
    private ImageIcon aboutIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "about.png");
    // 列表为空提示图标
    private ImageIcon emptyHintIcon = new ImageIcon(SimplePath.ICON_PATH + "emptyHint.png");
    // 选定点图标(单选时)
    private ImageIcon dotIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "dot.png");
    // 选定勾图标
    private ImageIcon tickIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "tick.png");
    // 添加歌曲文件图标
    private ImageIcon fileIcon = new ImageIcon(SimplePath.ICON_PATH + "file.png");
    // 添加文件夹图标
    private ImageIcon folderIcon = new ImageIcon(SimplePath.ICON_PATH + "folder.png");
    // 未收藏图标
    private ImageIcon collectIcon = new ImageIcon(SimplePath.ICON_PATH + "collect.png");
    // 已收藏图标
    private ImageIcon hasCollectedIcon = new ImageIcon(SimplePath.ICON_PATH + "hasCollected.png");
    // MV 图标
    private ImageIcon mvIcon = new ImageIcon(SimplePath.ICON_PATH + "mv.png");
    // 下载图标
    private ImageIcon downloadIcon = new ImageIcon(SimplePath.ICON_PATH + "download.png");
    // 评论图标
    private ImageIcon commentIcon = new ImageIcon(SimplePath.ICON_PATH + "comment.png");
    // 播放图标
    private ImageIcon playIcon = new ImageIcon(SimplePath.ICON_PATH + "play.png");
    // 暂停图标
    private ImageIcon pauseIcon = new ImageIcon(SimplePath.ICON_PATH + "pause.png");
    // 上一曲图标
    private ImageIcon lastIcon = new ImageIcon(SimplePath.ICON_PATH + "last.png");
    // 下一曲图标
    private ImageIcon nextIcon = new ImageIcon(SimplePath.ICON_PATH + "next.png");
    // 快退图标
    private ImageIcon backwIcon = new ImageIcon(SimplePath.ICON_PATH + "backw.png");
    // 快进图标
    private ImageIcon forwIcon = new ImageIcon(SimplePath.ICON_PATH + "forw.png");
    // 单曲循环图标
    private ImageIcon singleIcon = new ImageIcon(SimplePath.ICON_PATH + "single.png");
    // 顺序播放图标
    private ImageIcon sequenceIcon = new ImageIcon(SimplePath.ICON_PATH + "sequence.png");
    // 列表循环图标
    private ImageIcon listCycleIcon = new ImageIcon(SimplePath.ICON_PATH + "listCycle.png");
    // 随机播放图标
    private ImageIcon shuffleIcon = new ImageIcon(SimplePath.ICON_PATH + "shuffle.png");
    // 声音图标
    private ImageIcon soundIcon = new ImageIcon(SimplePath.ICON_PATH + "sound.png");
    // 静音图标
    private ImageIcon muteIcon = new ImageIcon(SimplePath.ICON_PATH + "mute.png");
    // 倍速图标
    private ImageIcon rateIcon = new ImageIcon(SimplePath.ICON_PATH + "rate.png");
    // 频谱开启图标
    private ImageIcon spectrumOnIcon = new ImageIcon(SimplePath.ICON_PATH + "spectrumOn.png");
    // 频谱关闭图标
    private ImageIcon spectrumOffIcon = new ImageIcon(SimplePath.ICON_PATH + "spectrumoff.png");
    // 歌曲封面图标
    private ImageIcon cvBlurIcon = new ImageIcon(SimplePath.ICON_PATH + "blurOn.png");
    // 纯主色调图标
    private ImageIcon mcBlurIcon = new ImageIcon(SimplePath.ICON_PATH + "pureColorBlur.png");
    // 线性渐变图标
    private ImageIcon lgBlurIcon = new ImageIcon(SimplePath.ICON_PATH + "linearGradient.png");
    // 模糊关闭图标
    private ImageIcon blurOffIcon = new ImageIcon(SimplePath.ICON_PATH + "blurOff.png");
    // 音效图标
    private ImageIcon soundEffectIcon = new ImageIcon(SimplePath.ICON_PATH + "soundEffect.png");
    // 乐谱图标
    private ImageIcon sheetIcon = new ImageIcon(SimplePath.ICON_PATH + "sheet.png");
    // 转到播放队列图标
    private ImageIcon goToPlayQueueIcon = new ImageIcon(SimplePath.ICON_PATH + "goToPlayQueue.png");
    // 开启桌面歌词图标
    private ImageIcon desktopLyricOnIcon = new ImageIcon(SimplePath.ICON_PATH + "lrcOn.png");
    // 关闭桌面歌词图标
    private ImageIcon desktopLyricOffIcon = new ImageIcon(SimplePath.ICON_PATH + "lrcOff.png");
    // 简体中文图标
    private ImageIcon simpChineseIcon = new ImageIcon(SimplePath.ICON_PATH + "simplifiedChinese.png");
    // 繁体中文图标
    private ImageIcon tradChineseIcon = new ImageIcon(SimplePath.ICON_PATH + "traditionalChinese.png");
    // 日文图标
    private ImageIcon kanaIcon = new ImageIcon(SimplePath.ICON_PATH + "kana.png");
    // 罗马音图标
    private ImageIcon romajiIcon = new ImageIcon(SimplePath.ICON_PATH + "romaji.png");
    // 原歌词图标
    private ImageIcon originalIcon = new ImageIcon(SimplePath.ICON_PATH + "original.png");
    // 歌词翻译图标
    private ImageIcon translationIcon = new ImageIcon(SimplePath.ICON_PATH + "translation.png");
    // 添加歌曲图标
    private ImageIcon addIcon = new ImageIcon(SimplePath.ICON_PATH + "add.png");
    // 重新导入图标
    private ImageIcon reimportIcon = new ImageIcon(SimplePath.ICON_PATH + "reimport.png");
    // 管理歌曲目录图标
    private ImageIcon manageCatalogIcon = new ImageIcon(SimplePath.ICON_PATH + "manageCatalog.png");
    // 删除歌曲图标
    private ImageIcon removeIcon = new ImageIcon(SimplePath.ICON_PATH + "remove.png");
    // 去重图标
    private ImageIcon duplicateIcon = new ImageIcon(SimplePath.ICON_PATH + "duplicate.png");
    // 倒序图标
    private ImageIcon reverseIcon = new ImageIcon(SimplePath.ICON_PATH + "reverse.png");
    // 排序图标
    private ImageIcon sortIcon = new ImageIcon(SimplePath.ICON_PATH + "sort.png");
    // 上移图标
    private ImageIcon moveUpIcon = new ImageIcon(SimplePath.ICON_PATH + "moveUp.png");
    // 下移图标
    private ImageIcon moveDownIcon = new ImageIcon(SimplePath.ICON_PATH + "moveDown.png");
    // 清除输入图标
    private ImageIcon clearInputIcon = new ImageIcon(SimplePath.ICON_PATH + "clearInput.png");
    // 换肤图标
    private ImageIcon styleIcon = new ImageIcon(SimplePath.ICON_PATH + "style.png");
    // 搜索图标
    private ImageIcon searchIcon = new ImageIcon(SimplePath.ICON_PATH + "search.png");
    // 清空搜索历史图标
    private ImageIcon clearHistorySearchIcon = new ImageIcon(SimplePath.ICON_PATH + "clearHistorySearch.png");
    // 更多图标
//    private ImageIcon moreIcon = new ImageIcon(SimplePath.ICON_PATH + "more.png");
    // 返回图标
    private ImageIcon backwardIcon = new ImageIcon(SimplePath.ICON_PATH + "backward.png");
    // 刷新图标
    private ImageIcon refreshIcon = new ImageIcon(SimplePath.ICON_PATH + "refresh.png");
    // 跳页图标
    private ImageIcon goIcon = new ImageIcon(SimplePath.ICON_PATH + "go.png");
    // 播放全部图标
    private ImageIcon playAllIcon = new ImageIcon(SimplePath.ICON_PATH + "playAll.png");
    // 第一页图标
    private ImageIcon startPageIcon = new ImageIcon(SimplePath.ICON_PATH + "startPage.png");
    // 上一页图标
    private ImageIcon lastPageIcon = new ImageIcon(SimplePath.ICON_PATH + "lastPage.png");
    // 下一页图标
    private ImageIcon nextPageIcon = new ImageIcon(SimplePath.ICON_PATH + "nextPage.png");
    // 最后一页图标
    private ImageIcon endPageIcon = new ImageIcon(SimplePath.ICON_PATH + "endPage.png");
    // 个人音乐图标
    private ImageIcon personalMusicIcon = new ImageIcon(SimplePath.ICON_PATH + "favorite.png");
    // 离线音乐图标
    private ImageIcon localMusicIcon = new ImageIcon(SimplePath.ICON_PATH + "local.png");
    // 播放历史图标
    private ImageIcon historyIcon = new ImageIcon(SimplePath.ICON_PATH + "history.png");
    // 收藏图标
    private ImageIcon collectionIcon = new ImageIcon(SimplePath.ICON_PATH + "collection.png");
    // 音乐馆图标
    private ImageIcon netMusicIcon = new ImageIcon(SimplePath.ICON_PATH + "netMusic.png");
    // 歌单广场图标
    private ImageIcon playlistIcon = new ImageIcon(SimplePath.ICON_PATH + "netPlaylist.png");
    // 专辑库图标
    private ImageIcon netAlbumIcon = new ImageIcon(SimplePath.ICON_PATH + "netAlbum.png");
    // 歌手汇图标
    private ImageIcon netArtistIcon = new ImageIcon(SimplePath.ICON_PATH + "netArtist.png");
    // 电台图标
    private ImageIcon netRadioIcon = new ImageIcon(SimplePath.ICON_PATH + "netRadio.png");
    // 榜单图标
    private ImageIcon netRankingIcon = new ImageIcon(SimplePath.ICON_PATH + "netRanking.png");
    // 用户图标
    private ImageIcon netUserIcon = new ImageIcon(SimplePath.ICON_PATH + "netUser.png");
    // MV 标签页图标
    private ImageIcon netMvIcon = new ImageIcon(SimplePath.ICON_PATH + "netMv.png");
    // 推荐图标
    private ImageIcon recommendIcon = new ImageIcon(SimplePath.ICON_PATH + "recommend.png");
    // 下载管理图标
    private ImageIcon downloadManagementIcon = new ImageIcon(SimplePath.ICON_PATH + "downloadManagement.png");
    // 播放队列图标
    private ImageIcon playQueueIcon = new ImageIcon(SimplePath.ICON_PATH + "playQueue.png");
    // 清空图标
    private ImageIcon clearIcon = new ImageIcon(SimplePath.ICON_PATH + "clear.png");
    // 推荐歌单图标
    private ImageIcon playlistRecommendIcon = new ImageIcon(SimplePath.ICON_PATH + "playlistRecommend.png");
    // 精品歌单图标
    private ImageIcon highQualityPlaylistIcon = new ImageIcon(SimplePath.ICON_PATH + "highQualityPlaylistRecommend.png");
    // 飙升歌曲图标
    private ImageIcon hotMusicIcon = new ImageIcon(SimplePath.ICON_PATH + "hotMusicRecommend.png");
    // 推荐单曲图标
    private ImageIcon musicRecommendIcon = new ImageIcon(SimplePath.ICON_PATH + "musicRecommend.png");
    // 新碟上架图标
    private ImageIcon newAlbumRecommendIcon = new ImageIcon(SimplePath.ICON_PATH + "newAlbumRecommend.png");
    // 歌手排行图标
    private ImageIcon artistListRecommendIcon = new ImageIcon(SimplePath.ICON_PATH + "artistListRecommend.png");
    // 新晋电台图标
    private ImageIcon newRadioRecommendIcon = new ImageIcon(SimplePath.ICON_PATH + "newRadioRecommend.png");
    // 热门电台图标
    private ImageIcon hotRadioRecommendIcon = new ImageIcon(SimplePath.ICON_PATH + "hotRadioRecommend.png");
    // 推荐节目图标
    private ImageIcon programRecommendIcon = new ImageIcon(SimplePath.ICON_PATH + "programRecommend.png");
    // 推荐 MV 图标
    private ImageIcon mvRecommendIcon = new ImageIcon(SimplePath.ICON_PATH + "mvRecommend.png");
    // 重新开始全部任务图标
    private ImageIcon restartAllTasksIcon = new ImageIcon(SimplePath.ICON_PATH + "restartAllTasks.png");
    // 取消全部任务图标
    private ImageIcon cancelAllTasksIcon = new ImageIcon(SimplePath.ICON_PATH + "cancelAllTasks.png");
    // 删除全部任务图标
    private ImageIcon removeAllTasksIcon = new ImageIcon(SimplePath.ICON_PATH + "removeAllTasks.png");

    // 下一条格言图标
    private ImageIcon nextMottoIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "nextMotto.png");
    // 播放菜单项图标
    private ImageIcon playMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "play.png");
    // 下一首播放菜单项图标
    private ImageIcon nextPlayMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "nextPlay.png");
    // 打开菜单项图标
    private ImageIcon openMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "open.png");
    // 查看专辑菜单项图标
    private ImageIcon browseAlbumMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "browseAlbum.png");
    // 播放 MV 菜单项图标
    private ImageIcon playMvMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "playMv.png");
    // 收藏菜单项图标
    private ImageIcon collectMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "collect.png");
    // 取消收藏菜单项图标
    private ImageIcon cancelCollectionMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "cancelCollection.png");
    // 下载菜单项图标
    private ImageIcon downloadMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "download.png");
    // 查看评论菜单项图标
    private ImageIcon commentMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "comment.png");
    // 查看乐谱菜单项图标
    private ImageIcon sheetMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "sheet.png");
    // 搜索这首歌曲菜单项图标
    private ImageIcon searchSongItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "searchSong.png");
    // 查看相似歌曲菜单项图标
    private ImageIcon similarMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "similar.png");
    // 查看相关歌单菜单项图标
    private ImageIcon relatedPlaylistMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "similarPlaylist.png");
    // 查看电台菜单项图标
    private ImageIcon radioMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "radio.png");
    // 查看用户图标
    private ImageIcon userMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "user.png");
    // 查看相似 MV 菜单项图标
    private ImageIcon similarMvMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "similarMv.png");
    // 查看视频视频分集菜单项图标
    private ImageIcon videoEpisodeMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "episode.png");
    // 查看相似歌手菜单项图标
    private ImageIcon similarArtistMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "similarArtist.png");
    // 查看歌手合作人菜单项图标
    private ImageIcon buddyMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "buddy.png");
    // 查看用户关注菜单项图标
    private ImageIcon userFollowMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "follow.png");
    // 查看用户粉丝菜单项图标
    private ImageIcon userFollowedMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "followed.png");
    // 复制名称菜单项图标
    private ImageIcon copyNameMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "copy.png");
    // 查看乐谱菜单项图标
    private ImageIcon browseSheetMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "browseSheet.png");
    // 删除菜单项图标
    private ImageIcon removeMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "remove.png");
    // 复制歌词菜单项图标
    private ImageIcon copyLrcMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "copyLrc.png");
    // 定位歌词时间菜单项图标
    private ImageIcon locateLrcMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "locateLrc.png");
    // 查看歌词文件菜单项图标
    private ImageIcon browseLrcMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "browseLrc.png");
    // 歌词偏移菜单项图标
    private ImageIcon lrcOffsetMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "lrcOffset.png");
    // 导出专辑图片菜单项图标
    private ImageIcon saveAlbumImgMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "saveAlbumImg.png");
    // 查看海报菜单项图标
    private ImageIcon posterMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "poster.png");
    // 取消任务菜单项图标
    private ImageIcon cancelTaskMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "cancelTask.png");
    // 重新开始任务菜单项图标
    private ImageIcon restartTaskMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "restartTask.png");
    // 打开文件所在位置图标
    private ImageIcon locateFileMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "locateFile.png");
    // 编辑歌曲信息图标
    private ImageIcon editInfoMenuItemIcon = new ImageIcon(SimplePath.MENU_ICON_PATH + "editInfo.png");

    // 托盘图标
    private TrayIcon trayIconImg = new TrayIcon(trayIcon.getImage(), TITLE);

    // 悬浮帮助提示
    private final String MINI_WINDOW_TIP = "迷你模式";
    private final String MINIMIZE_WINDOW_TIP = "最小化";
    private final String MAXIMIZE_WINDOW_TIP = "最大化";
    private final String CLOSE_WINDOW_TIP = "关闭";
    private final String CHANGE_TO_LYRIC_PANE_TIP = "切换到歌曲详情页";
    private final String CHANGE_TO_MUSIC_PANE_TIP = "切换到列表页";
    private final String COLLECT_TIP = "收藏";
    private final String DOWNLOAD_TIP = "下载";
    private final String COMMENT_TIP = "评论";
    private final String MV_TIP = "播放 MV";
    private final String PLAY_TIP = "播放";
    private final String PAUSE_TIP = "暂停";
    private final String LAST_TIP = "上一首";
    private final String NEXT_TIP = "下一首";
    private final String BACKW_TIP = "快退";
    private final String FORW_TIP = "快进";
    private final String SINGLE_TIP = "单曲循环";
    private final String SEQUENCE_TIP = "顺序播放";
    private final String LIST_CYCLE_TIP = "列表循环";
    private final String SHUFFLE_TIP = "随机播放";
    private final String SOUND_TIP = "声音开启";
    private final String MUTE_TIP = "静音";
    private final String RATE_TIP = "倍速";
    private final String SWITCH_SPECTRUM_TIP = "频谱";
    private final String SWITCH_BLUR_TIP = "模糊";
    private final String SOUND_EFFECT_TIP = "音效";
    private final String SHEET_TIP = "乐谱";
    private final String MENU_TIP = "主菜单";
    private final String GO_TO_PLAY_QUEUE_TIP = "转到播放队列";
    private final String DESKTOP_LRC_TIP = "桌面歌词";
    private final String SWITCH_CHINESE_TIP = "歌词繁简切换";
    private final String SWITCH_JAPANESE_TIP = "日语/罗马音歌词切换";
    private final String SWITCH_LRC_TYPE_TIP = "歌词原文/翻译切换";
    private final String ADD_TIP = "添加歌曲文件";
    private final String REIMPORT_TIP = "重新从歌曲目录导入歌曲";
    private final String MANAGE_CATALOG_TIP = "管理歌曲目录";
    private final String REMOVE_TIP = "删除歌曲";
    private final String CLEAR_TIP = "清空列表";
    private final String DUPLICATE_TIP = "去重";
    private final String REVERSE_TIP = "倒序";
    private final String SORT_TIP = "排序";
    private final String MOVE_UP_TIP = "上移";
    private final String MOVE_DOWN_TIP = "下移";
    private final String CLEAR_INPUT_TIP = "清除输入";
    private final String STYLE_TIP = "换肤";
    private final String HIDE_DETAIL_TIP = "隐藏歌曲详情页";
    private final String SHOW_KEYWORD_PANEL_TIP = "显示关键词面板";
    private final String SEARCH_TIP = "搜索";
    private final String BACKWARD_TIP = "后退";
    private final String PLAY_ALL_TIP = "播放全部";
    private final String REFRESH_TIP = "刷新";
    private final String START_PAGE_TIP = "第一页";
    private final String LAST_PAGE_TIP = "上一页";
    private final String GO_TIP = "跳页";
    private final String NEXT_PAGE_TIP = "下一页";
    private final String END_PAGE_TIP = "最后一页";
    private final String LOCAL_MUSIC_TIP = "离线音乐";
    private final String HISTORY_TIP = "播放历史";
    private final String COLLECTION_TIP = "收藏";
    private final String RECOMMEND_PLAYLIST_TIP = "推荐歌单";
    private final String HIGH_QUALITY_PLAYLIST_TIP = "精品歌单";
    private final String HOT_MUSIC_TIP = "飙升歌曲";
    private final String RECOMMEND_NET_MUSIC_TIP = "新歌速递";
    private final String RECOMMEND_NEW_ALBUM_TIP = "新碟上架";
    private final String RECOMMEND_ARTIST_LIST_TIP = "歌手排行";
    private final String RECOMMEND_NEW_RADIO_TIP = "新晋电台";
    private final String RECOMMEND_HOT_RADIO_TIP = "热门电台";
    private final String RECOMMEND_PROGRAM_TIP = "推荐节目";
    private final String RECOMMEND_MV_TIP = "推荐 MV";
    private final String RESTART_SELECTED_TASKS_TIP = "重新开始选中任务";
    private final String CANCEL_SELECTED_TASKS_TIP = "取消选中任务";
    private final String REMOVE_SELECTED_TASKS_TIP = "删除选中任务";
    private final String RESTART_ALL_TASKS_TIP = "重新开始全部任务";
    private final String CANCEL_ALL_TASKS_TIP = "取消全部任务";
    private final String REMOVE_ALL_TASKS_TIP = "删除全部任务";
    private final String REMOVE_FROM_PLAY_QUEUE_TIP = "删除选中歌曲";
    private final String CLEAR_PLAY_QUEUE_TIP = "清空播放队列";
    private final String CLEAR_HISTORY_SEARCH_TIP = "清空搜索历史";
    private final String REMOVE_HISTORY_KEYWORD_TIP = "右击删除该历史";

    // 当前包含的所有歌曲目录
    private List<File> catalogs = new LinkedList<>();
    // 各种界面风格
    private List<UIStyle> styles = new LinkedList<>();

    // 添加界面风格
    {
        for (UIStyle style : PreDefinedUIStyle.styles) styles.add(style);
    }

    public boolean autoUpdate;
    public int windowState = WindowState.NORMAL;
    // 关闭窗口操作
    public int currCloseWindowOption;
    public int windowSize;
    public int forwardOrBackwardTime;
    public int videoForwardOrBackwardTime;
    // 播放视频时是否关闭主界面
    public boolean videoOnly = true;
    // 当前播放速率
    public double currRate;
    public double currVideoRate;
    // 当前频谱样式
    public int currSpecStyle = SpectrumConstants.GROUND;
    // 当前均衡
    public double currBalance = DEFAULT_BALANCE;
    // 最大缓存大小(MB，超出后自动清理)
    public long maxCacheSize = 1024;
    // 当前排序方式
    private int currSortMethod = -1;
    // 当前排序顺序
    private int currSortOrder = SortMethod.ASCENDING;
    // 当前播放曲目的索引
    private int currSong = -1;
    // 播放失败后重试次数
    private int retry = 0;
    // 当前播放模式
    private int currPlayMode = PlayMode.LIST_CYCLE;
    // 随机播放序列
    private List<Integer> shuffleList = new LinkedList<>();
    // 当前随机播放索引
    private int shuffleIndex;
    // 当前中文歌词类型
    private int currChineseType = ChineseType.SIMPLIFIED;
    // 当前日文歌词类型
    private int currJapaneseType = JapaneseType.KANA;
    // 当前歌词类型
    private int currLrcType = LyricType.ORIGINAL;
    // 歌词显示比率(源)
    private SimpleDoubleProperty originalRatio = new SimpleDoubleProperty();
    // 搜索每页大小
    private int limit = 50;
    private int commentLimit = 30;
    // 当前正在搜索的关键词
    private String netMusicCurrKeyword;
    private String netPlaylistCurrKeyword;
    private String netAlbumCurrKeyword;
    private String netArtistCurrKeyword;
    private String netRadioCurrKeyword;
    private String netMvCurrKeyword;
    private String netUserCurrKeyword;
    // 当前页码
    private int netMusicCurrPage = 1;
    private int netPlaylistCurrPage = 1;
    private int netMusicInPlaylistCurrPage = 1;
    private int netAlbumCurrPage = 1;
    private int netMusicInAlbumCurrPage = 1;
    private int netArtistCurrPage = 1;
    private int netMusicInArtistCurrPage = 1;
    private int netRadioCurrPage = 1;
    private int netMusicInRadioCurrPage = 1;
    private int netMvCurrPage = 1;
    private int netMusicInRecommendCurrPage = 1;
    private int netMusicInCollectionCurrPage = 1;
    private int netRankingCurrPage = 1;
    private int netMusicInRankingCurrPage = 1;
    private int netUserCurrPage = 1;
    private int netMusicInUserCurrPage = 1;
    private int netCommentCurrPage = 1;
    private int netSheetCurrPage = 1;
    private int netRecommendCurrPage = 1;
    // 最大页码
    private int netMusicMaxPage;
    private int netPlaylistMaxPage;
    private int netMusicInPlaylistMaxPage;
    private int netAlbumMaxPage;
    private int netMusicInAlbumMaxPage;
    private int netArtistMaxPage;
    private int netMusicInArtistMaxPage;
    private int netRadioMaxPage;
    private int netMusicInRadioMaxPage;
    private int netMvMaxPage;
    private int netRankingMaxPage;
    private int netMusicInRankingMaxPage;
    private int netUserMaxPage;
    private int netMusicInUserMaxPage;
    private int netCommentMaxPage;
    private int netSheetMaxPage;
    private int netRecommendMaxPage;
    private int netMusicInRecommendMaxPage;
    private int netMusicInCollectionMaxPage;
    // 当前个人音乐展示的标签
    private int currPersonalMusicTab = PersonalMusicTabIndex.LOCAL_MUSIC;
    // 当前推荐展示的标签
    private int currRecommendTab = -1;
    // 默认图标转过的度数
//    private int degree = 0;
//    private Color newColor;
//    private int step = 3;
    // 是否静音
    public boolean isMute;
    // 是否高斯模糊
    public boolean gsOn;
    // 是否暗化
    public boolean darkerOn;
    // 模糊类型
    public int blurType;
    // 是否显示频谱
    private boolean showSpectrum;
    // 是否自动下载歌词
    public boolean isAutoDownloadLrc;
    // 是否显示桌面歌词
    public boolean showDesktopLyric;
    // 是否锁定桌面歌词
    public boolean desktopLyricLocked;
    public int desktopLyricX;
    public int desktopLyricY;
    // 桌面歌词是否置顶
    public boolean desktopLyricOnTop;
    // 桌面歌词透明度
    public double desktopLyricAlpha;
    // 专辑图片宽/高
    private int albumImageWidth;
    // 封面图片宽/高
    private int coverImageWidth = 300;
    // 切换面板按钮图片宽度
    private int changePaneImageWidth = 50;
    // 当前面板
    private int currPane = MusicPane.MUSIC;
    // 上一个面板(评论跳转要用到)
    private int lastPane;

    // 默认专辑图片
    private BufferedImage defaultAlbumImage;
    // 加载中图片
    private BufferedImage loadingImage;

    {
        defaultAlbumImage = ImageUtils.read(SimplePath.ICON_PATH + "album.png");
        loadingImage = ImageUtils.width(ImageUtils.read(SimplePath.ICON_PATH + "loadingImage.png"), coverImageWidth);
    }

    // 全局字体
    private Font globalFont = Fonts.NORMAL;

    // 当前主界面风格
    private UIStyle currUIStyle = styles.get(0);

    private MusicPlayer player = new MusicPlayer(THIS);

    // 标题部分
    private CustomPanel topPanel = new CustomPanel();
    private CustomLabel titleLabel = new CustomLabel();
    private CustomPanel windowCtrlPanel = new CustomPanel();
    // 窗口控制按钮
    private CustomButton hideDetailButton = new CustomButton(hideDetailIcon);
    private CustomLabel splitLabel = new CustomLabel(splitIcon);
    private CustomButton miniButton = new CustomButton(miniIcon);
    private CustomButton minimizeButton = new CustomButton(minimizeIcon);
    private CustomButton maximizeButton = new CustomButton(maximizeIcon);
    private CustomButton closeButton = new CustomButton(closeWindowIcon);

    // 主菜单
    private CustomButton mainMenuButton = new CustomButton(menuIcon);
    private CustomPopupMenu mainMenu = new CustomPopupMenu(THIS);
    private CustomMenuItem settingMenuItem = new CustomMenuItem("设置");
    private CustomMenuItem closeSong = new CustomMenuItem("关闭当前歌曲");
    private CustomMenuItem clearCache = new CustomMenuItem("清空播放缓存");
    private CustomMenuItem manageStyleMenuItem = new CustomMenuItem("更换主题");
    private CustomMenuItem styleCustomMenuItem = new CustomMenuItem("添加自定义主题");
    private CustomMenuItem donateMenuItem = new CustomMenuItem("捐赠 & 感谢");
    private CustomMenuItem releaseMenuItem = new CustomMenuItem("发布页");
    private CustomMenuItem updateMenuItem = new CustomMenuItem("检查更新");
    private CustomMenuItem helpMenuItem = new CustomMenuItem("指南");
    private CustomMenuItem aboutMenuItem = new CustomMenuItem("关于");

    // 歌名
    private CustomLabel songNameLabel = new CustomLabel();
    // 艺术家
    private CustomLabel artistLabel = new CustomLabel();
    // 专辑
    private CustomLabel albumLabel = new CustomLabel();
    // 专辑图片
    private CustomLabel albumImageLabel = new CustomLabel();
    // 专辑图片右键弹出菜单
    private CustomPopupMenu albumImagePopupMenu = new CustomPopupMenu(THIS);
    // 右键菜单：导出专辑图片
    private CustomMenuItem saveAlbumImageMenuItem = new CustomMenuItem(SAVE_ALBUM_IMAGE_TEXT);
    // 歌曲信息右键弹出菜单
    private CustomPopupMenu songNamePopupMenu = new CustomPopupMenu(THIS);
    private CustomPopupMenu artistPopupMenu = new CustomPopupMenu(THIS);
    private CustomPopupMenu albumPopupMenu = new CustomPopupMenu(THIS);
    private CustomMenuItem copySongNameMenuItem = new CustomMenuItem("复制歌曲名");
    private CustomMenuItem copyArtistMenuItem = new CustomMenuItem("复制艺术家");
    private CustomMenuItem copyAlbumMenuItem = new CustomMenuItem("复制专辑名");

    private CustomSlider timeBar = new CustomSlider();
    private CustomLabel currTimeLabel = new CustomLabel(DEFAULT_TIME);
    private CustomLabel durationLabel = new CustomLabel(DEFAULT_TIME);

    // 换肤按钮
    private CustomButton styleToolButton = new CustomButton(styleIcon);
    // 换肤按钮弹出菜单
    private CustomPopupMenu stylePopupMenu = new CustomPopupMenu(THIS);
//    private ButtonGroup stylePopupMenuButtonGroup = new ButtonGroup();
//    private List<CustomRadioButtonMenuItem> stylePopupMenuItems = fetchStyleMenuItems();

    // 歌词列表
    private CustomList<Statement> lrcList = new CustomList<>();
    private CustomScrollPane lrcScrollPane = new CustomScrollPane(lrcList);
    private DefaultListModel<Statement> lrcListModel = new DefaultListModel<>();
    // 频谱面板
    private SpectrumPanel spectrumPanel = new SpectrumPanel(THIS);
    // 歌词右键弹出菜单
    private CustomPopupMenu lrcPopupMenu = new CustomPopupMenu(THIS);
    private CustomMenuItem copyMenuItem = new CustomMenuItem("复制这句歌词");
    private CustomMenuItem locateLrcMenuItem = new CustomMenuItem("定位歌词时间");
    private CustomMenuItem browseLrcMenuItem = new CustomMenuItem("查看歌词文件");
    private CustomMenuItem browseLrcTransMenuItem = new CustomMenuItem("查看歌词翻译文件");
    private CustomMenuItem downloadLrcMenuItem = new CustomMenuItem("下载歌词文件");
    private CustomMenuItem downloadLrcTransMenuItem = new CustomMenuItem("下载歌词翻译文件");
    private double lrcOffset;
    private final double lrcOffsetRadius = 5;
    private final String LRC_OFFSET_MSG = "当前歌词偏移：%.1f s";
    private CustomMenuItem currLrcOffsetMenuItem = new CustomMenuItem("");
    private CustomMenuItem[] calcLrcOffsetMenuItems = {
            new CustomMenuItem("+0.5 s"),
            new CustomMenuItem("+0.1 s"),
            new CustomMenuItem("重置"),
            new CustomMenuItem("-0.1 s"),
            new CustomMenuItem("-0.5 s")
    };
    // 歌词
    private Vector<Statement> statements;
    private String lrcStr;
    private String transStr;
    private int nextLrc = NextLrc.NOT_EXISTS;

    public CustomButton changePaneButton = new CustomButton();
    private CustomButton mvButton = new CustomButton(mvIcon);
    private CustomButton collectButton = new CustomButton(collectIcon);
    private CustomButton downloadButton = new CustomButton(downloadIcon);
    private CustomButton commentButton = new CustomButton(commentIcon);
    public CustomButton playOrPauseButton = new CustomButton(playIcon);
    public CustomButton lastButton = new CustomButton(lastIcon);
    public CustomButton nextButton = new CustomButton(nextIcon);
    // 播放模式切换按钮
    private CustomButton playModeButton = new CustomButton(listCycleIcon);
    private CustomButton forwardButton = new CustomButton(forwIcon);
    private CustomButton backwardButton = new CustomButton(backwIcon);
    private CustomPanel volumePanel = new CustomPanel();
    public CustomButton muteButton = new CustomButton(soundIcon);
    private CustomSlider volumeSlider = new CustomSlider();
    private CustomButton rateButton = new CustomButton(rateIcon);
    //    private ButtonGroup rateMenuItemsButtonGroup = new ButtonGroup();
//    private CustomRadioButtonMenuItem[] rateMenuItems = {
//            new CustomRadioButtonMenuItem("0.2x"),
//            new CustomRadioButtonMenuItem("0.3x"),
//            new CustomRadioButtonMenuItem("0.4x"),
//            new CustomRadioButtonMenuItem("0.5x"),
//            new CustomRadioButtonMenuItem("0.6x"),
//            new CustomRadioButtonMenuItem("0.7x"),
//            new CustomRadioButtonMenuItem("0.8x"),
//            new CustomRadioButtonMenuItem("0.9x"),
//            new CustomRadioButtonMenuItem("1x"),
//            new CustomRadioButtonMenuItem("1.1x"),
//            new CustomRadioButtonMenuItem("1.2x"),
//            new CustomRadioButtonMenuItem("1.3x"),
//            new CustomRadioButtonMenuItem("1.4x"),
//            new CustomRadioButtonMenuItem("1.5x"),
//            new CustomRadioButtonMenuItem("1.6x"),
//            new CustomRadioButtonMenuItem("1.7x"),
//            new CustomRadioButtonMenuItem("1.8x"),
//            new CustomRadioButtonMenuItem("1.9x"),
//            new CustomRadioButtonMenuItem("2x"),
//            new CustomRadioButtonMenuItem("3x"),
//            new CustomRadioButtonMenuItem("4x"),
//            new CustomRadioButtonMenuItem("5x"),
//            new CustomRadioButtonMenuItem("6x"),
//            new CustomRadioButtonMenuItem("7x"),
//            new CustomRadioButtonMenuItem("8x")
//    };
//    private CustomPopupMenu ratePopupMenu = new CustomPopupMenu(THIS);
    private CustomButton switchSpectrumButton = new CustomButton(spectrumOnIcon);
    private CustomButton blurButton = new CustomButton(cvBlurIcon);
    private CustomButton soundEffectButton = new CustomButton(soundEffectIcon);
    private CustomButton sheetButton = new CustomButton(sheetIcon);
    private CustomButton goToPlayQueueButton = new CustomButton(goToPlayQueueIcon);
    public CustomButton desktopLyricButton = new CustomButton(desktopLyricOnIcon);
    private CustomButton switchChineseButton = new CustomButton(simpChineseIcon);
    private CustomButton switchJapaneseButton = new CustomButton(kanaIcon);
    private CustomButton switchLrcTypeButton = new CustomButton(originalIcon);

    // 播放模式右键菜单
    private CustomPopupMenu playModePopupMenu = new CustomPopupMenu(THIS);
    private CustomMenuItem singleMenuItem = new CustomMenuItem("单曲循环");
    private CustomMenuItem sequenceMenuItem = new CustomMenuItem("顺序播放");
    private CustomMenuItem listCycleMenuItem = new CustomMenuItem("列表循环");
    private CustomMenuItem shuffleMenuItem = new CustomMenuItem("随机播放");

    // 模糊模式右键菜单
    private CustomPopupMenu blurPopupMenu = new CustomPopupMenu(THIS);
    private CustomMenuItem gsMenuItem = new CustomMenuItem("高斯模糊");
    private CustomMenuItem darkerMenuItem = new CustomMenuItem("暗化");
    private CustomMenuItem blurOffMenuItem = new CustomMenuItem("跟随主题");
    private CustomMenuItem cvBlurMenuItem = new CustomMenuItem("歌曲封面");
    private CustomMenuItem mcBlurMenuItem = new CustomMenuItem("纯主色调");
    private CustomMenuItem lgBlurMenuItem = new CustomMenuItem("线性渐变");

    // 标签页
    private CustomTabbedPane tabbedPane = new CustomTabbedPane(CustomTabbedPane.LEFT, CustomTabbedPane.WRAP_TAB_LAYOUT);
    // 个人音乐 Tab 面板
    private CustomPanel personalMusicPanel = new CustomPanel();
    private CustomLabel personalMusicLabel = new CustomLabel("个人音乐", personalMusicIcon);
    // 音乐馆 Tab 面板
    private CustomPanel netMusicPanel = new CustomPanel();
    private CustomLabel netMusicLabel = new CustomLabel("音乐馆", netMusicIcon);
    // 歌单广场 Tab 面板
    private CustomPanel netPlaylistPanel = new CustomPanel();
    private CustomLabel netPlaylistLabel = new CustomLabel("歌单广场", playlistIcon);
    // 专辑库 Tab 面板
    private CustomPanel netAlbumPanel = new CustomPanel();
    private CustomLabel netAlbumLabel = new CustomLabel("专辑库", netAlbumIcon);
    // 歌手汇 Tab 面板
    private CustomPanel netArtistPanel = new CustomPanel();
    private CustomLabel netArtistLabel = new CustomLabel("歌手汇", netArtistIcon);
    // 电台 Tab 面板
    private CustomPanel netRadioPanel = new CustomPanel();
    private CustomLabel netRadioLabel = new CustomLabel("电台", netRadioIcon);
    // MV Tab 面板
    private CustomPanel netMvPanel = new CustomPanel();
    private CustomLabel netMvLabel = new CustomLabel("MV", netMvIcon);
    // 榜单 Tab 面板
    private CustomPanel netRankingPanel = new CustomPanel();
    private CustomLabel netRankingLabel = new CustomLabel("榜单", netRankingIcon);
    // 用户 Tab 面板
    private CustomPanel netUserPanel = new CustomPanel();
    private CustomLabel netUserLabel = new CustomLabel("用户", netUserIcon);
    // 推荐 Tab 面板
    private CustomPanel recommendPanel = new CustomPanel();
    private CustomLabel recommendLabel = new CustomLabel("推荐", recommendIcon);
    // 下载管理 Tab 面板
    private CustomPanel downloadManagementPanel = new CustomPanel();
    private CustomLabel downloadManagementLabel = new CustomLabel("下载管理", downloadManagementIcon);
    // 播放队列 Tab 面板
    private CustomPanel playQueuePanel = new CustomPanel();
    private CustomLabel playQueueLabel = new CustomLabel("播放队列", playQueueIcon);

    // 收藏标签页
    private CustomTabbedPane collectionTabbedPane = new CustomTabbedPane(CustomTabbedPane.TOP, CustomTabbedPane.WRAP_TAB_LAYOUT);
    // 音乐收藏 Tab 面板
    private CustomPanel musicCollectionPanel = new CustomPanel();
    private CustomLabel musicCollectionLabel = new CustomLabel("歌曲", netMusicIcon);
    // 歌单收藏 Tab 面板
    private CustomPanel playlistCollectionPanel = new CustomPanel();
    private CustomLabel playlistCollectionLabel = new CustomLabel("歌单", playlistIcon);
    // 专辑收藏 Tab 面板
    private CustomPanel albumCollectionPanel = new CustomPanel();
    private CustomLabel albumCollectionLabel = new CustomLabel("专辑", netAlbumIcon);
    // 歌手收藏 Tab 面板
    private CustomPanel artistCollectionPanel = new CustomPanel();
    private CustomLabel artistCollectionLabel = new CustomLabel("歌手", netArtistIcon);
    // 电台收藏 Tab 面板
    private CustomPanel radioCollectionPanel = new CustomPanel();
    private CustomLabel radioCollectionLabel = new CustomLabel("电台", netRadioIcon);
    // MV 收藏 Tab 面板
    private CustomPanel mvCollectionPanel = new CustomPanel();
    private CustomLabel mvCollectionLabel = new CustomLabel(" MV ", netMvIcon);
    // 榜单收藏 Tab 面板
    private CustomPanel rankingCollectionPanel = new CustomPanel();
    private CustomLabel rankingCollectionLabel = new CustomLabel("榜单", netRankingIcon);
    // 用户收藏 Tab 面板
    private CustomPanel userCollectionPanel = new CustomPanel();
    private CustomLabel userCollectionLabel = new CustomLabel("用户", netUserIcon);

    // 空 ListModel，用于其他 ListModel 的 clear 时暂时显示，防止卡顿
    private DefaultListModel emptyListModel = new DefaultListModel<>();
    private DefaultListModel emptyLrcListModel = new DefaultListModel<>();

    // 列表为空提示面板
    private CustomPanel emptyHintPanel = new CustomPanel();
    // 列表为空提示标签
    private CustomLabel emptyHintLabel = new CustomLabel("列表空空如也~");

    // 个人音乐播放列表
    private CustomList musicList = new CustomList<>();
    private CustomScrollPane musicScrollPane = new CustomScrollPane(musicList);
    // 离线音乐 ListModel
    private DefaultListModel musicListModel = new DefaultListModel<>();
    // 播放历史 ListModel
    public DefaultListModel historyModel = new DefaultListModel<>();

    // 收藏列表
    private CustomList collectionList = new CustomList<>();
    private CustomScrollPane collectionScrollPane = new CustomScrollPane(collectionList);
    // 歌曲收藏 ListModel
    private DefaultListModel collectionModel = new DefaultListModel<>();
    // 歌单收藏 ListModel
    private DefaultListModel playlistCollectionModel = new DefaultListModel<>();
    // 作为收藏歌单单独的 ListModel，切换
    private DefaultListModel netMusicListForPlaylistCollectionModel = new DefaultListModel<>();
    // 专辑收藏 ListModel
    private DefaultListModel albumCollectionModel = new DefaultListModel<>();
    // 作为专辑单独的 ListModel，切换
    private DefaultListModel netMusicListForAlbumCollectionModel = new DefaultListModel<>();
    // 歌手收藏 ListModel
    private DefaultListModel artistCollectionModel = new DefaultListModel<>();
    // 作为收藏歌手单独的 ListModel，切换
    private DefaultListModel netMusicListForArtistCollectionModel = new DefaultListModel<>();
    // 电台收藏 ListModel
    private DefaultListModel radioCollectionModel = new DefaultListModel<>();
    // 作为收藏电台单独的 ListModel，切换
    private DefaultListModel netMusicListForRadioCollectionModel = new DefaultListModel<>();
    // MV 收藏 ListModel
    private DefaultListModel mvCollectionModel = new DefaultListModel<>();
    // 榜单收藏 ListModel
    private DefaultListModel rankingCollectionModel = new DefaultListModel<>();
    // 作为收藏榜单单独的 ListModel，切换
    private DefaultListModel netMusicListForRankingCollectionModel = new DefaultListModel<>();
    // 用户收藏 ListModel
    private DefaultListModel userCollectionModel = new DefaultListModel<>();
    // 作为收藏用户单独的 ListModel，切换
    private DefaultListModel netMusicListForUserCollectionModel = new DefaultListModel<>();
    // 收藏数量面板
    private CustomPanel collectionCountPanel = new CustomPanel();
    // 收藏数量标签
    private CustomLabel collectionCountLabel = new CustomLabel("");
    // 收藏音乐工具栏
    private CustomToolBar musicCollectionToolBar = new CustomToolBar();
    // 收藏返回按钮
    private CustomButton collectionBackwardButton = new CustomButton(backwardIcon);
    // 收藏用户听歌记录类型下拉框
    private CustomComboBox<String> collectionRecordTypeComboBox = new CustomComboBox();
    private DefaultComboBoxModel<String> collectionRecordTypeComboBoxModel = new DefaultComboBoxModel<>();
    private DefaultComboBoxModel<String> collectionOrderComboBoxModel = new DefaultComboBoxModel<>();
    // 收藏播放全部按钮
    private CustomButton collectionPlayAllButton = new CustomButton("播放全部", playAllIcon);
    // 收藏刷新按钮
    private CustomButton collectionRefreshButton = new CustomButton(refreshIcon);
    // 收藏页数框
    private CustomTextField collectionPageTextField = new CustomTextField(3);
    // 收藏跳页按钮
    private CustomButton collectionGoButton = new CustomButton(goIcon);
    // 收藏第一页按钮
    private CustomButton collectionStartPageButton = new CustomButton(startPageIcon);
    // 收藏上一页按钮
    private CustomButton collectionLastPageButton = new CustomButton(lastPageIcon);
    // 收藏下一页按钮
    private CustomButton collectionNextPageButton = new CustomButton(nextPageIcon);
    // 收藏最后一页按钮
    private CustomButton collectionEndPageButton = new CustomButton(endPageIcon);

    // 筛选 ListModel
    private DefaultListModel filterModel = new DefaultListModel<>();
    // 音乐右键弹出菜单
    private CustomPopupMenu musicPopupMenu = new CustomPopupMenu(THIS);
    // 右键菜单：播放
    private CustomMenuItem playMenuItem = new CustomMenuItem(PLAY_MENU_ITEM_TEXT);
    // 右键菜单：下一首播放
    private CustomMenuItem nextPlayMenuItem = new CustomMenuItem(NEXT_PLAY_MENU_ITEM_TEXT);
    // 右键菜单：播放 MV
    private CustomMenuItem playMvMenuItem = new CustomMenuItem(PLAY_MV_MENU_ITEM_TEXT);
    // 右键菜单：收藏
    private CustomMenuItem collectMenuItem = new CustomMenuItem(COLLECT_MENU_ITEM_TEXT);
    // 右键菜单：下载
    private CustomMenuItem downloadMenuItem = new CustomMenuItem(DOWNLOAD_MENU_ITEM_TEXT);
    // 右键菜单：查看评论
    private CustomMenuItem commentMenuItem = new CustomMenuItem(COMMENT_MENU_ITEM_TEXT);
    // 右键菜单：查看乐谱
    private CustomMenuItem sheetMenuItem = new CustomMenuItem(SHEET_MENU_ITEM_TEXT);
    // 右键菜单：搜索这首歌曲
    private CustomMenuItem searchSongMenuItem = new CustomMenuItem(SEARCH_SONG_MENU_ITEM_TEXT);
    // 右键菜单：查看相似歌曲
    private CustomMenuItem similarSongMenuItem = new CustomMenuItem(SIMILAR_SONG_MENU_ITEM_TEXT);
    // 右键菜单：查看相关歌单
    private CustomMenuItem relatedPlaylistMenuItem = new CustomMenuItem(RELATED_PLAYLIST_MENU_ITEM_TEXT);
    // 右键菜单：查看歌手/作者
    private CustomMenuItem authorMenuItem = new CustomMenuItem(AUTHOR_MENU_ITEM_TEXT);
    // 右键菜单：查看专辑
    private CustomMenuItem albumMenuItem = new CustomMenuItem(ALBUM_MENU_ITEM_TEXT);
    // 右键菜单：查看推荐电台
    private CustomMenuItem recRadioMenuItem = new CustomMenuItem(REC_RADIO_MENU_ITEM_TEXT);
    // 右键菜单：查看相关 MV
    private CustomMenuItem relatedMvMenuItem = new CustomMenuItem(RELATED_MV_MENU_ITEM_TEXT);
    // 右键菜单：复制名称
    private CustomMenuItem copyNameMenuItem = new CustomMenuItem(COPY_NAME_MENU_ITEM_TEXT);
    // 右键菜单：打开文件所在位置
    private CustomMenuItem locateFileMenuItem = new CustomMenuItem(LOCATE_FILE_MENU_ITEM_TEXT);
    // 右键菜单：编辑歌曲信息
    private CustomMenuItem editInfoMenuItem = new CustomMenuItem(EDIT_INFO_MENU_ITEM_TEXT);
    // 右键菜单：删除
    private CustomMenuItem removeMenuItem = new CustomMenuItem(REMOVE_MENU_ITEM_TEXT);
    // 个人音乐工具栏
    private CustomToolBar personalMusicToolBar = new CustomToolBar();
    // 离线音乐按钮
    private CustomButton localMusicButton = new CustomButton(localMusicIcon);
    // 播放历史按钮
    private CustomButton historyButton = new CustomButton(historyIcon);
    // 收藏按钮
    private CustomButton collectionButton = new CustomButton(collectionIcon);

    // 播放列表工具栏
    private CustomToolBar musicToolBar = new CustomToolBar();
    // 添加按钮
    private CustomButton addToolButton = new CustomButton(addIcon);
    // 添加按钮弹出菜单
    private CustomPopupMenu addPopupMenu = new CustomPopupMenu(THIS);
    private CustomMenuItem addFileMenuItem = new CustomMenuItem("添加歌曲文件");
    private CustomMenuItem addDirMenuItem = new CustomMenuItem("添加歌曲文件夹");
    // 重新导入按钮
    private CustomButton reimportToolButton = new CustomButton(reimportIcon);
    // 管理歌曲目录按钮
    private CustomButton manageCatalogToolButton = new CustomButton(manageCatalogIcon);
    // 删除按钮
    private CustomButton removeToolButton = new CustomButton(removeIcon);
    // 清空按钮
    private CustomButton clearToolButton = new CustomButton(clearIcon);
    // 去重按钮
    private CustomButton duplicateToolButton = new CustomButton(duplicateIcon);
    // 倒序按钮
    private CustomButton reverseToolButton = new CustomButton(reverseIcon);
    // 排序按钮
    private CustomButton sortToolButton = new CustomButton(sortIcon);
    // 排序按钮弹出菜单
    private CustomPopupMenu sortPopupMenu = new CustomPopupMenu(THIS);
    private ButtonGroup sortOrderButtonGroup = new ButtonGroup();
    private ButtonGroup sortMethodButtonGroup = new ButtonGroup();
    private CustomRadioButtonMenuItem ascendingMenuItem = new CustomRadioButtonMenuItem("升序", currSortOrder == SortMethod.ASCENDING);
    private CustomRadioButtonMenuItem descendingMenuItem = new CustomRadioButtonMenuItem("降序", currSortOrder == SortMethod.DESCENDING);
    private CustomRadioButtonMenuItem sortBySongNameAndFileNameMenuItem = new CustomRadioButtonMenuItem("按曲名/文件名混合");
    private CustomRadioButtonMenuItem sortBySongNameMenuItem = new CustomRadioButtonMenuItem("按曲名");
    private CustomRadioButtonMenuItem sortByArtistNameMenuItem = new CustomRadioButtonMenuItem("按艺术家");
    private CustomRadioButtonMenuItem sortByAlbumNameMenuItem = new CustomRadioButtonMenuItem("按专辑");
    private CustomRadioButtonMenuItem sortByFileNameMenuItem = new CustomRadioButtonMenuItem("按文件名");
    private CustomRadioButtonMenuItem sortByTimeMenuItem = new CustomRadioButtonMenuItem("按时长");
    private CustomRadioButtonMenuItem sortByCreationTimeMenuItem = new CustomRadioButtonMenuItem("按创建时间");
    private CustomRadioButtonMenuItem sortByLastModifiedTimeMenuItem = new CustomRadioButtonMenuItem("按修改时间");
    private CustomRadioButtonMenuItem sortByLastAccessTimeMenuItem = new CustomRadioButtonMenuItem("按访问时间");
    private CustomRadioButtonMenuItem sortBySizeMenuItem = new CustomRadioButtonMenuItem("按大小");
    // 上移按钮
    private CustomButton moveUpToolButton = new CustomButton(moveUpIcon);
    // 下移按钮
    private CustomButton moveDownToolButton = new CustomButton(moveDownIcon);
    // 个人音乐筛选框
    private CustomTextField filterTextField = new CustomTextField(10);
    // 清除输入按钮
    private CustomButton clearInputToolButton = new CustomButton(clearInputIcon);
    // 歌曲数量标签
    private CustomLabel countLabel = new CustomLabel("");

    // 在线播放列表
    private CustomList<NetMusicInfo> netMusicList = new CustomList<>();
    private CustomScrollPane netMusicScrollPane = new CustomScrollPane(netMusicList);
    private DefaultListModel netMusicListModel = new DefaultListModel<>();
    // 在线音乐右键弹出菜单
    private CustomPopupMenu netMusicPopupMenu = new CustomPopupMenu(THIS);
    // 在线音乐右键菜单：播放
    private CustomMenuItem netMusicPlayMenuItem = new CustomMenuItem(PLAY_MENU_ITEM_TEXT);
    // 在线音乐右键菜单：下一首播放
    private CustomMenuItem netMusicNextPlayMenuItem = new CustomMenuItem(NEXT_PLAY_MENU_ITEM_TEXT);
    // 在线音乐右键菜单：播放 MV
    private CustomMenuItem netMusicPlayMvMenuItem = new CustomMenuItem(PLAY_MV_MENU_ITEM_TEXT);
    // 在线音乐右键菜单：收藏
    private CustomMenuItem netMusicCollectMenuItem = new CustomMenuItem(COLLECT_MENU_ITEM_TEXT);
    // 在线音乐右键菜单：下载
    private CustomMenuItem netMusicDownloadMenuItem = new CustomMenuItem(DOWNLOAD_MENU_ITEM_TEXT);
    // 在线音乐右键菜单：查看评论
    private CustomMenuItem netMusicCommentMenuItem = new CustomMenuItem(COMMENT_MENU_ITEM_TEXT);
    // 在线音乐右键菜单：查看乐谱
    private CustomMenuItem netMusicSheetMenuItem = new CustomMenuItem(SHEET_MENU_ITEM_TEXT);
    // 在线音乐右键菜单：搜索这首歌曲
    private CustomMenuItem netMusicSearchSongMenuItem = new CustomMenuItem(SEARCH_SONG_MENU_ITEM_TEXT);
    // 在线音乐右键菜单：查看相似歌曲
    private CustomMenuItem netMusicSimilarSongMenuItem = new CustomMenuItem(SIMILAR_SONG_MENU_ITEM_TEXT);
    // 在线音乐右键菜单：查看相关歌单
    private CustomMenuItem netMusicRelatedPlaylistMenuItem = new CustomMenuItem(RELATED_PLAYLIST_MENU_ITEM_TEXT);
    // 在线音乐右键菜单：查看歌手/作者
    private CustomMenuItem netMusicAuthorMenuItem = new CustomMenuItem(AUTHOR_MENU_ITEM_TEXT);
    // 在线音乐右键菜单：查看专辑/电台
    private CustomMenuItem netMusicAlbumMenuItem = new CustomMenuItem(ALBUM_MENU_ITEM_TEXT);
    // 在线音乐右键菜单：查看推荐电台
    private CustomMenuItem netMusicRecRadioMenuItem = new CustomMenuItem(REC_RADIO_MENU_ITEM_TEXT);
    // 在线音乐右键菜单：查看相关 MV
    private CustomMenuItem netMusicRelatedMvMenuItem = new CustomMenuItem(RELATED_MV_MENU_ITEM_TEXT);
    // 在线音乐右键菜单：复制名称
    private CustomMenuItem netMusicCopyNameMenuItem = new CustomMenuItem(COPY_NAME_MENU_ITEM_TEXT);
    // 在线音乐工具栏
    private CustomToolBar netMusicToolBar = new CustomToolBar();
    // 在线音乐搜索框
    private CustomTextField searchTextField = new CustomTextField(8);
    // 在线音乐清除输入按钮
    private CustomButton netMusicClearInputButton = new CustomButton(clearInputIcon);
    // 在线音乐搜索按钮
    private CustomButton searchButton = new CustomButton(searchIcon);
    // 在线音乐加载更多按钮
//    private CustomButton moreButton = new CustomButton(MORE_TIP, moreIcon);
    // 在线音乐标题标签
    private CustomLabel netMusicTitleLabel = new CustomLabel();
    // 歌曲数量面板
    private CustomPanel netMusicCountPanel = new CustomPanel();
    // 歌曲数量标签
    private CustomLabel netMusicCountLabel = new CustomLabel("");
    // 在线音乐关键词面板
    private CustomPanel netMusicKeywordsPanel = new CustomPanel();
    private CustomScrollPane netMusicKeywordsPanelScrollPane = new CustomScrollPane(netMusicKeywordsPanel);
    // 在线音乐搜索建议面板
    private CustomPanel netMusicSearchSuggestionPanel = new CustomPanel();
    // 在线音乐搜索建议面板 内部面板1
    private CustomPanel netMusicSearchSuggestionInnerPanel1 = new CustomPanel();
    // 在线音乐搜索建议标签
    private CustomLabel netMusicSearchSuggestionLabel = new CustomLabel("搜索建议");
    // 刷新搜索建议按钮
    private CustomButton netMusicRefreshSearchSuggestionButton = new CustomButton(refreshIcon);
    // 在线音乐搜索建议面板 内部面板2
    private CustomPanel netMusicSearchSuggestionInnerPanel2 = new CustomPanel();
    // 在线音乐热搜面板
    private CustomPanel netMusicHotSearchPanel = new CustomPanel();
    // 在线音乐热搜面板 内部面板1
    private CustomPanel netMusicHotSearchInnerPanel1 = new CustomPanel();
    // 在线音乐热搜标签
    private CustomLabel netMusicHotSearchLabel = new CustomLabel("热门搜索");
    // 刷新热搜按钮
    private CustomButton netMusicRefreshHotSearchButton = new CustomButton(refreshIcon);
    // 在线音乐热搜面板 内部面板2
    private CustomPanel netMusicHotSearchInnerPanel2 = new CustomPanel();
    // 在线音乐搜索历史面板
    private CustomPanel netMusicHistorySearchPanel = new CustomPanel();
    // 在线音乐搜索历史面板 内部面板1
    private CustomPanel netMusicHistorySearchInnerPanel1 = new CustomPanel();
    // 在线音乐搜索历史标签
    private CustomLabel netMusicHistorySearchLabel = new CustomLabel("搜索历史");
    // 清空搜索历史按钮
    private CustomButton netMusicClearHistorySearchButton = new CustomButton(clearHistorySearchIcon);
    // 在线音乐搜索历史面板 内部面板2
    public CustomPanel netMusicHistorySearchInnerPanel2 = new CustomPanel();
    // 返回关键词面板按钮
    private CustomButton netMusicBackwardButton = new CustomButton(backwardIcon);
    // 在线音乐搜索类型下拉框
    private CustomComboBox<String> netMusicSourceComboBox = new CustomComboBox();
    private CustomComboBox<String> netMusicSearchTypeComboBox = new CustomComboBox();
    private CustomComboBox<String> netMusicSearchSubTypeComboBox = new CustomComboBox();
    // 在线音乐刷新按钮
    private CustomButton netMusicRefreshButton = new CustomButton(refreshIcon);
    // 在线音乐页数框
    private CustomTextField netMusicPageTextField = new CustomTextField(3);
    // 在线音乐跳页按钮
    private CustomButton netMusicGoButton = new CustomButton(goIcon);
    // 在线音乐第一页按钮
    private CustomButton netMusicStartPageButton = new CustomButton(startPageIcon);
    // 在线音乐上一页按钮
    private CustomButton netMusicLastPageButton = new CustomButton(lastPageIcon);
    // 在线音乐下一页按钮
    private CustomButton netMusicNextPageButton = new CustomButton(nextPageIcon);
    // 在线音乐最后一页按钮
    private CustomButton netMusicEndPageButton = new CustomButton(endPageIcon);

    // 歌单列表
    private CustomList<NetPlaylistInfo> netPlaylistList = new CustomList<>();
    private CustomScrollPane netPlaylistScrollPane = new CustomScrollPane(netPlaylistList);
    private DefaultListModel netPlaylistListModel = new DefaultListModel<>();
    // 作为歌单单独的 ListModel，与 netMusicListModel 在同一 CustomList 中切换
    private DefaultListModel netMusicListForPlaylistModel = new DefaultListModel<>();
    // 歌单右键弹出菜单
    private CustomPopupMenu netPlaylistPopupMenu = new CustomPopupMenu(THIS);
    // 歌单右键菜单：打开
    private CustomMenuItem netPlaylistOpenMenuItem = new CustomMenuItem(OPEN_MENU_ITEM_TEXT);
    // 歌单右键菜单：播放全部
    private CustomMenuItem netPlaylistPlayAllMenuItem = new CustomMenuItem(PLAY_ALL_MENU_ITEM_TEXT);
    // 歌单右键菜单：收藏
    private CustomMenuItem netPlaylistCollectMenuItem = new CustomMenuItem(COLLECT_MENU_ITEM_TEXT);
    // 歌单右键菜单：查看评论
    private CustomMenuItem netPlaylistCommentMenuItem = new CustomMenuItem(COMMENT_MENU_ITEM_TEXT);
    // 歌单右键菜单：查看相似歌单
    private CustomMenuItem netPlaylistSimilarPlaylistMenuItem = new CustomMenuItem(SIMILAR_PLAYLIST_MENU_ITEM_TEXT);
    // 歌单右键菜单：查看创建者
    private CustomMenuItem netPlaylistCreatorMenuItem = new CustomMenuItem(PLAYLIST_CREATOR_MENU_ITEM_TEXT);
    // 歌单右键菜单：查看收藏者
    private CustomMenuItem netPlaylistSubscriberMenuItem = new CustomMenuItem(PLAYLIST_SUBSCRIBER_MENU_ITEM_TEXT);
    // 歌单右键菜单：复制名称
    private CustomMenuItem netPlaylistCopyNameMenuItem = new CustomMenuItem(COPY_NAME_MENU_ITEM_TEXT);
    // 在线歌单工具栏
    private CustomToolBar netPlaylistToolBar = new CustomToolBar();
    // 歌单标题标签
    private CustomLabel netPlaylistTitleLabel = new CustomLabel();
    // 返回歌单按钮
    private CustomButton netPlaylistBackwardButton = new CustomButton(backwardIcon);
    // 歌单搜索框
    private CustomTextField netPlaylistSearchTextField = new CustomTextField(8);
    // 歌单清除输入按钮
    private CustomButton netPlaylistClearInputButton = new CustomButton(clearInputIcon);
    // 歌单搜索按钮
    private CustomButton netPlaylistSearchButton = new CustomButton(searchIcon);
    // 歌单加载更多按钮
//    private CustomButton netPlaylistMoreButton = new CustomButton(MORE_TIP, moreIcon);
    // 歌单播放全部按钮
    private CustomButton netPlaylistPlayAllButton = new CustomButton("播放全部", playAllIcon);
    // 歌单刷新按钮
    private CustomButton netPlaylistRefreshButton = new CustomButton(refreshIcon);
    // 歌单页数框
    private CustomTextField netPlaylistPageTextField = new CustomTextField(3);
    // 歌单跳页按钮
    private CustomButton netPlaylistGoButton = new CustomButton(goIcon);
    // 歌单第一页按钮
    private CustomButton netPlaylistStartPageButton = new CustomButton(startPageIcon);
    // 歌单上一页按钮
    private CustomButton netPlaylistLastPageButton = new CustomButton(lastPageIcon);
    // 歌单下一页按钮
    private CustomButton netPlaylistNextPageButton = new CustomButton(nextPageIcon);
    // 歌单最后一页按钮
    private CustomButton netPlaylistEndPageButton = new CustomButton(endPageIcon);
    // 歌单数量面板
    private CustomPanel netPlaylistCountPanel = new CustomPanel();
    // 歌单源
    private CustomComboBox<String> netPlaylistSourceComboBox = new CustomComboBox();
    // 歌单数量标签
    private CustomLabel netPlaylistCountLabel = new CustomLabel("");
    // 歌单关键词面板
    private CustomPanel netPlaylistKeywordsPanel = new CustomPanel();
    private CustomScrollPane netPlaylistKeywordsPanelScrollPane = new CustomScrollPane(netPlaylistKeywordsPanel);
    // 歌单搜索历史面板
    private CustomPanel netPlaylistHistorySearchPanel = new CustomPanel();
    // 歌单搜索历史面板 内部面板1
    private CustomPanel netPlaylistHistorySearchInnerPanel1 = new CustomPanel();
    // 歌单搜索历史标签
    private CustomLabel netPlaylistHistorySearchLabel = new CustomLabel("搜索历史");
    // 清空搜索历史按钮
    private CustomButton netPlaylistClearHistorySearchButton = new CustomButton(clearHistorySearchIcon);
    // 歌单搜索历史面板 内部面板2
    public CustomPanel netPlaylistHistorySearchInnerPanel2 = new CustomPanel();

    // 专辑列表
    private CustomList<NetAlbumInfo> netAlbumList = new CustomList<>();
    private CustomScrollPane netAlbumScrollPane = new CustomScrollPane(netAlbumList);
    private DefaultListModel<NetAlbumInfo> netAlbumListModel = new DefaultListModel<>();
    private DefaultListModel<NetAlbumInfo> netAlbumListForArtistModel = new DefaultListModel<>();
    // 作为专辑单独的 ListModel，与 netMusicListModel 在同一 CustomList 中切换
    private DefaultListModel netMusicListForAlbumModel = new DefaultListModel<>();
    // 专辑右键弹出菜单
    private CustomPopupMenu netAlbumPopupMenu = new CustomPopupMenu(THIS);
    // 专辑右键菜单：打开
    private CustomMenuItem netAlbumOpenMenuItem = new CustomMenuItem(OPEN_MENU_ITEM_TEXT);
    // 专辑右键菜单：播放全部
    private CustomMenuItem netAlbumPlayAllMenuItem = new CustomMenuItem(PLAY_ALL_MENU_ITEM_TEXT);
    // 专辑右键菜单：收藏
    private CustomMenuItem netAlbumCollectMenuItem = new CustomMenuItem(COLLECT_MENU_ITEM_TEXT);
    // 专辑右键菜单：查看评论
    private CustomMenuItem netAlbumCommentMenuItem = new CustomMenuItem(COMMENT_MENU_ITEM_TEXT);
    // 专辑右键菜单：查看歌手/作者
    private CustomMenuItem netAlbumArtistMenuItem = new CustomMenuItem(ALBUM_ARTIST_MENU_ITEM_TEXT);
    // 专辑右键菜单：查看相似专辑
    private CustomMenuItem netAlbumSimilarMenuItem = new CustomMenuItem(SIMILAR_ALBUM_MENU_ITEM_TEXT);
    // 专辑右键菜单：查看专辑照片
    private CustomMenuItem netAlbumPhotosMenuItem = new CustomMenuItem(ALBUM_PHOTOS_MENU_ITEM_TEXT);
    // 专辑右键菜单：复制名称
    private CustomMenuItem netAlbumCopyNameMenuItem = new CustomMenuItem(COPY_NAME_MENU_ITEM_TEXT);
    // 在线专辑工具栏
    private CustomToolBar netAlbumToolBar = new CustomToolBar();
    // 返回专辑按钮
    private CustomButton netAlbumBackwardButton = new CustomButton(backwardIcon);
    // 专辑标题标签
    private CustomLabel netAlbumTitleLabel = new CustomLabel();
    // 专辑清除输入按钮
    private CustomButton netAlbumClearInputButton = new CustomButton(clearInputIcon);
    // 专辑搜索框
    private CustomTextField netAlbumSearchTextField = new CustomTextField(8);
    // 专辑搜索按钮
    private CustomButton netAlbumSearchButton = new CustomButton(searchIcon);
    // 专辑加载更多按钮
//    private CustomButton netAlbumMoreButton = new CustomButton(MORE_TIP, moreIcon);
    // 专辑播放全部按钮
    private CustomButton netAlbumPlayAllButton = new CustomButton("播放全部", playAllIcon);
    // 专辑刷新按钮
    private CustomButton netAlbumRefreshButton = new CustomButton(refreshIcon);
    // 专辑页数框
    private CustomTextField netAlbumPageTextField = new CustomTextField(3);
    // 专辑跳页按钮
    private CustomButton netAlbumGoButton = new CustomButton(goIcon);
    // 专辑第一页按钮
    private CustomButton netAlbumStartPageButton = new CustomButton(startPageIcon);
    // 专辑上一页按钮
    private CustomButton netAlbumLastPageButton = new CustomButton(lastPageIcon);
    // 专辑下一页按钮
    private CustomButton netAlbumNextPageButton = new CustomButton(nextPageIcon);
    // 专辑最后一页按钮
    private CustomButton netAlbumEndPageButton = new CustomButton(endPageIcon);
    // 专辑数量面板
    private CustomPanel netAlbumCountPanel = new CustomPanel();
    // 专辑源
    private CustomComboBox<String> netAlbumSourceComboBox = new CustomComboBox();
    // 专辑数量标签
    private CustomLabel netAlbumCountLabel = new CustomLabel("");
    // 专辑关键词面板
    private CustomPanel netAlbumKeywordsPanel = new CustomPanel();
    private CustomScrollPane netAlbumKeywordsPanelScrollPane = new CustomScrollPane(netAlbumKeywordsPanel);
    // 专辑搜索历史面板
    private CustomPanel netAlbumHistorySearchPanel = new CustomPanel();
    // 专辑搜索历史面板 内部面板1
    private CustomPanel netAlbumHistorySearchInnerPanel1 = new CustomPanel();
    // 专辑搜索历史标签
    private CustomLabel netAlbumHistorySearchLabel = new CustomLabel("搜索历史");
    // 清空搜索历史按钮
    private CustomButton netAlbumClearHistorySearchButton = new CustomButton(clearHistorySearchIcon);
    // 专辑搜索历史面板 内部面板2
    public CustomPanel netAlbumHistorySearchInnerPanel2 = new CustomPanel();
    // 当前专辑原歌曲
    private NetMusicInfo currAlbumMusicInfo;
    // 当前艺术家
    private NetArtistInfo currAlbumArtistInfo;
    // 当前相似专辑原专辑
    private NetAlbumInfo currAlbumAlbumInfo;
    // 当前专辑原用户
    private NetUserInfo currAlbumUserInfo;

    // 歌手列表
    private CustomList<NetArtistInfo> netArtistList = new CustomList<>();
    private CustomScrollPane netArtistScrollPane = new CustomScrollPane(netArtistList);
    private DefaultListModel netArtistListModel = new DefaultListModel<>();
    // 作为歌手单独的 ListModel，与 netMusicListModel 在同一 CustomList 中切换
    private DefaultListModel netMusicListForArtistModel = new DefaultListModel<>();
    // 歌手右键弹出菜单
    private CustomPopupMenu netArtistPopupMenu = new CustomPopupMenu(THIS);
    // 歌手右键菜单：打开
    private CustomMenuItem netArtistOpenMenuItem = new CustomMenuItem(OPEN_MENU_ITEM_TEXT);
    // 歌手右键菜单：播放全部
    private CustomMenuItem netArtistPlayAllMenuItem = new CustomMenuItem(PLAY_ALL_MENU_ITEM_TEXT);
    // 歌手右键菜单：收藏
    private CustomMenuItem netArtistCollectMenuItem = new CustomMenuItem(COLLECT_MENU_ITEM_TEXT);
    // 歌手右键菜单：查看歌手专辑
    private CustomMenuItem netArtistBrowseAlbumMenuItem = new CustomMenuItem(BROWSE_ALBUM_MENU_ITEM_TEXT);
    // 歌手右键菜单：查看歌手 MV
    private CustomMenuItem netArtistBrowseMvMenuItem = new CustomMenuItem(BROWSE_MV_MENU_ITEM_TEXT);
    // 歌手右键菜单：查看相似歌手
    private CustomMenuItem netArtistSimilarArtistMenuItem = new CustomMenuItem(SIMILAR_ARTIST_MENU_ITEM_TEXT);
    // 歌手右键菜单：查看歌手粉丝
    private CustomMenuItem netArtistFansMenuItem = new CustomMenuItem(ARTIST_FANS_MENU_ITEM_TEXT);
    // 歌手右键菜单：查看歌手合作人
    private CustomMenuItem netArtistBuddyMenuItem = new CustomMenuItem(ARTIST_BUDDY_MENU_ITEM_TEXT);
    // 歌手右键菜单：查看歌手电台
    private CustomMenuItem netArtistRadiosMenuItem = new CustomMenuItem(ARTIST_RADIO_MENU_ITEM_TEXT);
    // 歌手右键菜单：查看歌手照片
    private CustomMenuItem netArtistPhotosMenuItem = new CustomMenuItem(ARTIST_PHOTOS_MENU_ITEM_TEXT);
    // 歌手右键菜单：复制名称
    private CustomMenuItem netArtistCopyNameMenuItem = new CustomMenuItem(COPY_NAME_MENU_ITEM_TEXT);
    // 歌手工具栏
    private CustomToolBar netArtistToolBar = new CustomToolBar();
    // 歌手标题标签
    private CustomLabel netArtistTitleLabel = new CustomLabel();
    // 返回歌手按钮
    private CustomButton netArtistBackwardButton = new CustomButton(backwardIcon);
    // 歌手清除输入按钮
    private CustomButton netArtistClearInputButton = new CustomButton(clearInputIcon);
    // 歌手搜索框
    private CustomTextField netArtistSearchTextField = new CustomTextField(8);
    // 歌手搜索按钮
    private CustomButton netArtistSearchButton = new CustomButton(searchIcon);
    // 歌手加载更多按钮
//    private CustomButton netArtistMoreButton = new CustomButton(MORE_TIP, moreIcon);
    // 歌手播放全部按钮
    private CustomButton netArtistPlayAllButton = new CustomButton("播放全部", playAllIcon);
    // 歌手刷新按钮
    private CustomButton netArtistRefreshButton = new CustomButton(refreshIcon);
    // 歌手页数框
    private CustomTextField netArtistPageTextField = new CustomTextField(3);
    // 歌手跳页按钮
    private CustomButton netArtistGoButton = new CustomButton(goIcon);
    // 歌手第一页按钮
    private CustomButton netArtistStartPageButton = new CustomButton(startPageIcon);
    // 歌手上一页按钮
    private CustomButton netArtistLastPageButton = new CustomButton(lastPageIcon);
    // 歌手下一页按钮
    private CustomButton netArtistNextPageButton = new CustomButton(nextPageIcon);
    // 歌手最后一页按钮
    private CustomButton netArtistEndPageButton = new CustomButton(endPageIcon);
    // 歌手数量面板
    private CustomPanel netArtistCountPanel = new CustomPanel();
    // 歌手源
    private CustomComboBox<String> netArtistSourceComboBox = new CustomComboBox();
    // 歌手数量标签
    private CustomLabel netArtistCountLabel = new CustomLabel("");
    // 歌手关键词面板
    private CustomPanel netArtistKeywordsPanel = new CustomPanel();
    private CustomScrollPane netArtistKeywordsPanelScrollPane = new CustomScrollPane(netArtistKeywordsPanel);
    // 歌手搜索历史面板
    private CustomPanel netArtistHistorySearchPanel = new CustomPanel();
    // 歌手搜索历史面板 内部面板1
    private CustomPanel netArtistHistorySearchInnerPanel1 = new CustomPanel();
    // 歌手搜索历史标签
    private CustomLabel netArtistHistorySearchLabel = new CustomLabel("搜索历史");
    // 清空搜索历史按钮
    private CustomButton netArtistClearHistorySearchButton = new CustomButton(clearHistorySearchIcon);
    // 歌手搜索历史面板 内部面板2
    public CustomPanel netArtistHistorySearchInnerPanel2 = new CustomPanel();

    // 电台列表
    private CustomList<NetRadioInfo> netRadioList = new CustomList<>();
    private CustomScrollPane netRadioScrollPane = new CustomScrollPane(netRadioList);
    private DefaultListModel netRadioListModel = new DefaultListModel<>();
    // 作为电台单独的 ListModel，与 netMusicListModel 在同一 CustomList 中切换
    private DefaultListModel netMusicListForRadioModel = new DefaultListModel<>();
    // 电台右键弹出菜单
    private CustomPopupMenu netRadioPopupMenu = new CustomPopupMenu(THIS);
    // 电台右键菜单：打开
    private CustomMenuItem netRadioOpenMenuItem = new CustomMenuItem(OPEN_MENU_ITEM_TEXT);
    // 电台右键菜单：播放全部
    private CustomMenuItem netRadioPlayAllMenuItem = new CustomMenuItem(PLAY_ALL_MENU_ITEM_TEXT);
    // 电台右键菜单：收藏
    private CustomMenuItem netRadioCollectMenuItem = new CustomMenuItem(COLLECT_MENU_ITEM_TEXT);
    // 电台右键菜单：查看评论
    private CustomMenuItem netRadioCommentMenuItem = new CustomMenuItem(COMMENT_MENU_ITEM_TEXT);
    // 电台右键菜单：查看主播
    private CustomMenuItem netRadioDjMenuItem = new CustomMenuItem(RADIO_DJ_MENU_ITEM_TEXT);
    // 电台右键菜单：查看订阅者
    private CustomMenuItem netRadioSubscriberMenuItem = new CustomMenuItem(RADIO_SUBSCRIBER_MENU_ITEM_TEXT);
    // 电台右键菜单：查看相似电台
    private CustomMenuItem netRadioSimilarMenuItem = new CustomMenuItem(SIMILAR_RADIO_MENU_ITEM_TEXT);
    // 电台右键菜单：查看电台演职员/CV
    private CustomMenuItem netRadioArtistsMenuItem = new CustomMenuItem(RADIO_ARTISTS_MENU_ITEM_TEXT);
    // 电台右键菜单：查看电台照片
    private CustomMenuItem netRadioPhotosMenuItem = new CustomMenuItem(RADIO_PHOTOS_MENU_ITEM_TEXT);
    // 电台右键菜单：查看电台海报
    private CustomMenuItem netRadioPostersMenuItem = new CustomMenuItem(RADIO_POSTERS_MENU_ITEM_TEXT);
    // 电台右键菜单：复制名称
    private CustomMenuItem netRadioCopyNameMenuItem = new CustomMenuItem(COPY_NAME_MENU_ITEM_TEXT);
    // 电台工具栏
    private CustomToolBar netRadioToolBar = new CustomToolBar();
    // 电台标题标签
    private CustomLabel netRadioTitleLabel = new CustomLabel();
    // 返回电台按钮
    private CustomButton netRadioBackwardButton = new CustomButton(backwardIcon);
    // 电台搜索框
    private CustomTextField netRadioSearchTextField = new CustomTextField(8);
    // 电台清除输入按钮
    private CustomButton netRadioClearInputButton = new CustomButton(clearInputIcon);
    // 电台搜索按钮
    private CustomButton netRadioSearchButton = new CustomButton(searchIcon);
    // 电台加载更多按钮
//    private CustomButton netRadioMoreButton = new CustomButton(MORE_TIP, moreIcon);
    // 电台播放全部按钮
    private CustomButton netRadioPlayAllButton = new CustomButton("播放全部", playAllIcon);
    // 电台刷新按钮
    private CustomButton netRadioRefreshButton = new CustomButton(refreshIcon);
    // 电台页数框
    private CustomTextField netRadioPageTextField = new CustomTextField(3);
    // 电台跳页按钮
    private CustomButton netRadioGoButton = new CustomButton(goIcon);
    // 电台第一页按钮
    private CustomButton netRadioStartPageButton = new CustomButton(startPageIcon);
    // 电台上一页按钮
    private CustomButton netRadioLastPageButton = new CustomButton(lastPageIcon);
    // 电台下一页按钮
    private CustomButton netRadioNextPageButton = new CustomButton(nextPageIcon);
    // 电台最后一页按钮
    private CustomButton netRadioEndPageButton = new CustomButton(endPageIcon);
    // 电台数量面板
    private CustomPanel netRadioCountPanel = new CustomPanel();
    // 电台源
    private CustomComboBox<String> netRadioSourceComboBox = new CustomComboBox();
    // 电台数量标签
    private CustomLabel netRadioCountLabel = new CustomLabel("");
    // 电台关键词面板
    private CustomPanel netRadioKeywordsPanel = new CustomPanel();
    private CustomScrollPane netRadioKeywordsPanelScrollPane = new CustomScrollPane(netRadioKeywordsPanel);
    // 电台搜索历史面板
    private CustomPanel netRadioHistorySearchPanel = new CustomPanel();
    // 电台搜索历史面板 内部面板1
    private CustomPanel netRadioHistorySearchInnerPanel1 = new CustomPanel();
    // 电台搜索历史标签
    private CustomLabel netRadioHistorySearchLabel = new CustomLabel("搜索历史");
    // 清空搜索历史按钮
    private CustomButton netRadioClearHistorySearchButton = new CustomButton(clearHistorySearchIcon);
    // 电台搜索历史面板 内部面板2
    public CustomPanel netRadioHistorySearchInnerPanel2 = new CustomPanel();

    //  MV 列表
    private CustomList<NetMvInfo> netMvList = new CustomList<>();
    private CustomScrollPane netMvScrollPane = new CustomScrollPane(netMvList);
    private DefaultListModel netMvListModel = new DefaultListModel<>();
    // MV 右键弹出菜单
    private CustomPopupMenu netMvPopupMenu = new CustomPopupMenu(THIS);
    // MV 右键菜单：播放
    private CustomMenuItem netMvPlayMenuItem = new CustomMenuItem(PLAY_MENU_ITEM_TEXT);
    // MV 右键菜单：收藏
    private CustomMenuItem netMvCollectMenuItem = new CustomMenuItem(COLLECT_MENU_ITEM_TEXT);
    // MV 右键菜单：下载
    private CustomMenuItem netMvDownloadMenuItem = new CustomMenuItem(DOWNLOAD_MENU_ITEM_TEXT);
    // MV 右键菜单：查看相似 MV
    private CustomMenuItem netMvSimilarMvMenuItem = new CustomMenuItem(SIMILAR_MV_MENU_ITEM_TEXT);
    // MV 右键菜单：查看视频分集
    private CustomMenuItem netMvVideoEpisodeMenuItem = new CustomMenuItem(VIDEO_EPISODE_MENU_ITEM_TEXT);
    // MV 右键菜单：查看发布者
    private CustomMenuItem netMvCreatorMenuItem = new CustomMenuItem(MV_CREATOR_MENU_ITEM_TEXT);
    // MV 右键菜单：查看评论
    private CustomMenuItem netMvCommentMenuItem = new CustomMenuItem(COMMENT_MENU_ITEM_TEXT);
    // MV 右键菜单：复制名称
    private CustomMenuItem netMvCopyNameMenuItem = new CustomMenuItem(COPY_NAME_MENU_ITEM_TEXT);
    // MV 工具栏
    private CustomToolBar netMvToolBar = new CustomToolBar();
    // MV 标题标签
    private CustomLabel netMvTitleLabel = new CustomLabel();
    // MV 搜索框
    private CustomTextField netMvSearchTextField = new CustomTextField(8);
    // MV 清除输入按钮
    private CustomButton netMvClearInputButton = new CustomButton(clearInputIcon);
    // MV 搜索按钮
    private CustomButton netMvSearchButton = new CustomButton(searchIcon);
    // MV 加载更多按钮
//    private CustomButton netMvMoreButton = new CustomButton(MORE_TIP, moreIcon);
    // MV 排序类型下拉框
    private CustomComboBox<String> netMvSortTypeComboBox = new CustomComboBox();
    // MV 刷新按钮
    private CustomButton netMvRefreshButton = new CustomButton(refreshIcon);
    // MV 页数框
    private CustomTextField netMvPageTextField = new CustomTextField(3);
    // MV 跳页按钮
    private CustomButton netMvGoButton = new CustomButton(goIcon);
    // MV 第一页按钮
    private CustomButton netMvStartPageButton = new CustomButton(startPageIcon);
    // MV 上一页按钮
    private CustomButton netMvLastPageButton = new CustomButton(lastPageIcon);
    // MV 下一页按钮
    private CustomButton netMvNextPageButton = new CustomButton(nextPageIcon);
    // MV 最后一页按钮
    private CustomButton netMvEndPageButton = new CustomButton(endPageIcon);
    // MV 数量面板
    private CustomPanel netMvCountPanel = new CustomPanel();
    // MV 源
    private CustomComboBox<String> netMvSourceComboBox = new CustomComboBox();
    //  MV 数量标签
    private CustomLabel netMvCountLabel = new CustomLabel("");
    // MV 关键词面板
    private CustomPanel netMvKeywordsPanel = new CustomPanel();
    private CustomScrollPane netMvKeywordsPanelScrollPane = new CustomScrollPane(netMvKeywordsPanel);
    // MV 搜索历史面板
    private CustomPanel netMvHistorySearchPanel = new CustomPanel();
    // MV 搜索历史面板 内部面板1
    private CustomPanel netMvHistorySearchInnerPanel1 = new CustomPanel();
    // MV 搜索历史标签
    private CustomLabel netMvHistorySearchLabel = new CustomLabel("搜索历史");
    // 清空搜索历史按钮
    private CustomButton netMvClearHistorySearchButton = new CustomButton(clearHistorySearchIcon);
    // MV 搜索历史面板 内部面板2
    public CustomPanel netMvHistorySearchInnerPanel2 = new CustomPanel();
    // 返回关键词面板按钮
    private CustomButton netMvBackwardButton = new CustomButton(backwardIcon);
    // 当前艺术家
    private NetArtistInfo currMvArtistInfo;

    // 榜单列表
    private CustomList<NetRankingInfo> netRankingList = new CustomList<>();
    private CustomScrollPane netRankingScrollPane = new CustomScrollPane(netRankingList);
    private DefaultListModel netRankingListModel = new DefaultListModel<>();
    // 作为榜单单独的 ListModel，与 netMusicListModel 在同一 CustomList 中切换
    private DefaultListModel netMusicListForRankingModel = new DefaultListModel<>();
    // 榜单右键弹出菜单
    private CustomPopupMenu netRankingPopupMenu = new CustomPopupMenu(THIS);
    // 榜单右键菜单：打开
    private CustomMenuItem netRankingOpenMenuItem = new CustomMenuItem(OPEN_MENU_ITEM_TEXT);
    // 榜单右键菜单：播放全部
    private CustomMenuItem netRankingPlayAllMenuItem = new CustomMenuItem(PLAY_ALL_MENU_ITEM_TEXT);
    // 榜单右键菜单：收藏
    private CustomMenuItem netRankingCollectMenuItem = new CustomMenuItem(COLLECT_MENU_ITEM_TEXT);
    // 榜单右键菜单：查看评论
    private CustomMenuItem netRankingCommentMenuItem = new CustomMenuItem(COMMENT_MENU_ITEM_TEXT);
    // 榜单右键菜单：复制名称
    private CustomMenuItem netRankingCopyNameMenuItem = new CustomMenuItem(COPY_NAME_MENU_ITEM_TEXT);
    // 榜单工具栏
    private CustomToolBar netRankingToolBar = new CustomToolBar();
    // 返回榜单按钮
    private CustomButton netRankingBackwardButton = new CustomButton(backwardIcon);
    // 榜单播放全部按钮
    private CustomButton netRankingPlayAllButton = new CustomButton("播放全部", playAllIcon);
    // 榜单刷新按钮
    private CustomButton netRankingRefreshButton = new CustomButton(refreshIcon);
    // 榜单页数框
    private CustomTextField netRankingPageTextField = new CustomTextField(3);
    // 榜单跳页按钮
    private CustomButton netRankingGoButton = new CustomButton(goIcon);
    // 榜单第一页按钮
    private CustomButton netRankingStartPageButton = new CustomButton(startPageIcon);
    // 榜单上一页按钮
    private CustomButton netRankingLastPageButton = new CustomButton(lastPageIcon);
    // 榜单下一页按钮
    private CustomButton netRankingNextPageButton = new CustomButton(nextPageIcon);
    // 榜单最后一页按钮
    private CustomButton netRankingEndPageButton = new CustomButton(endPageIcon);
    // 榜单数量面板
    private CustomPanel netRankingCountPanel = new CustomPanel();
    // 榜单源
    private CustomComboBox<String> netRankingSourceComboBox = new CustomComboBox();
    // 榜单数量标签
    private CustomLabel netRankingCountLabel = new CustomLabel("");

    // 用户列表
    private CustomList<NetUserInfo> netUserList = new CustomList<>();
    private CustomScrollPane netUserScrollPane = new CustomScrollPane(netUserList);
    private DefaultListModel netUserListModel = new DefaultListModel<>();
    // 作为用户单独的 ListModel，与 netMusicListModel 在同一 CustomList 中切换
    private DefaultListModel netMusicListForUserModel = new DefaultListModel<>();
    // 用户右键弹出菜单
    private CustomPopupMenu netUserPopupMenu = new CustomPopupMenu(THIS);
    // 用户右键菜单：打开
    private CustomMenuItem netUserOpenMenuItem = new CustomMenuItem(OPEN_MENU_ITEM_TEXT);
    // 用户右键菜单：播放全部
    private CustomMenuItem netUserPlayAllMenuItem = new CustomMenuItem(PLAY_ALL_MENU_ITEM_TEXT);
    // 用户右键菜单：收藏
    private CustomMenuItem netUserCollectMenuItem = new CustomMenuItem(COLLECT_MENU_ITEM_TEXT);
    // 用户右键菜单：查看用户歌单
    private CustomMenuItem netUserPlaylistMenuItem = new CustomMenuItem(USER_PLAYLIST_MENU_ITEM_TEXT);
    // 用户右键菜单：查看用户专辑
    private CustomMenuItem netUserAlbumMenuItem = new CustomMenuItem(USER_ALBUM_MENU_ITEM_TEXT);
    // 用户右键菜单：查看用户电台
    private CustomMenuItem netUserRadioMenuItem = new CustomMenuItem(USER_RADIO_MENU_ITEM_TEXT);
    // 用户右键菜单：查看用户视频
    private CustomMenuItem netUserVideoMenuItem = new CustomMenuItem(USER_VIDEO_MENU_ITEM_TEXT);
    // 用户右键菜单：查看用户关注
    private CustomMenuItem netUserFollowMenuItem = new CustomMenuItem(USER_FOLLOW_MENU_ITEM_TEXT);
    // 用户右键菜单：查看用户粉丝
    private CustomMenuItem netUserFollowedMenuItem = new CustomMenuItem(USER_FOLLOWED_MENU_ITEM_TEXT);
    // 用户右键菜单：复制名称
    private CustomMenuItem netUserCopyNameMenuItem = new CustomMenuItem(COPY_NAME_MENU_ITEM_TEXT);
    // 用户工具栏
    private CustomToolBar netUserToolBar = new CustomToolBar();
    // 用户标题标签
    private CustomLabel netUserTitleLabel = new CustomLabel();
    // 用户听歌记录类型下拉框
    private CustomComboBox<String> netUserRecordTypeComboBox = new CustomComboBox();
    private DefaultComboBoxModel<String> recordTypeComboBoxModel = new DefaultComboBoxModel<>();
    private DefaultComboBoxModel<String> orderComboBoxModel = new DefaultComboBoxModel<>();
    // 返回用户按钮
    private CustomButton netUserBackwardButton = new CustomButton(backwardIcon);
    // 用户搜索框
    private CustomTextField netUserSearchTextField = new CustomTextField(8);
    // 用户清除输入按钮
    private CustomButton netUserClearInputButton = new CustomButton(clearInputIcon);
    // 用户搜索按钮
    private CustomButton netUserSearchButton = new CustomButton(searchIcon);
    // 用户加载更多按钮
//    private CustomButton netUserMoreButton = new CustomButton(MORE_TIP, moreIcon);
    // 用户播放全部按钮
    private CustomButton netUserPlayAllButton = new CustomButton("播放全部", playAllIcon);
    // 用户刷新按钮
    private CustomButton netUserRefreshButton = new CustomButton(refreshIcon);
    // 用户页数框
    private CustomTextField netUserPageTextField = new CustomTextField(3);
    // 用户跳页按钮
    private CustomButton netUserGoButton = new CustomButton(goIcon);
    // 用户第一页按钮
    private CustomButton netUserStartPageButton = new CustomButton(startPageIcon);
    // 用户上一页按钮
    private CustomButton netUserLastPageButton = new CustomButton(lastPageIcon);
    // 用户下一页按钮
    private CustomButton netUserNextPageButton = new CustomButton(nextPageIcon);
    // 用户最后一页按钮
    private CustomButton netUserEndPageButton = new CustomButton(endPageIcon);
    // 用户数量面板
    private CustomPanel netUserCountPanel = new CustomPanel();
    // 用户源
    private CustomComboBox<String> netUserSourceComboBox = new CustomComboBox();
    // 用户数量标签
    private CustomLabel netUserCountLabel = new CustomLabel("");
    // 用户关键词面板
    private CustomPanel netUserKeywordsPanel = new CustomPanel();
    private CustomScrollPane netUserKeywordsPanelScrollPane = new CustomScrollPane(netUserKeywordsPanel);
    // 用户搜索历史面板
    private CustomPanel netUserHistorySearchPanel = new CustomPanel();
    // 用户搜索历史面板 内部面板1
    private CustomPanel netUserHistorySearchInnerPanel1 = new CustomPanel();
    // 用户搜索历史标签
    private CustomLabel netUserHistorySearchLabel = new CustomLabel("搜索历史");
    // 清空搜索历史按钮
    private CustomButton netUserClearHistorySearchButton = new CustomButton(clearHistorySearchIcon);
    // 用户搜索历史面板 内部面板2
    public CustomPanel netUserHistorySearchInnerPanel2 = new CustomPanel();

    // 推荐歌单/专辑/歌手/电台列表
    private CustomList itemRecommendList = new CustomList<>();
    private CustomScrollPane itemRecommendScrollPane = new CustomScrollPane(itemRecommendList);
    // 推荐歌单 ListModel
    private DefaultListModel playlistRecommendListModel = new DefaultListModel<>();
    // 作为推荐歌单单独的 ListModel，切换
    private DefaultListModel netMusicListForPlaylistRecommendModel = new DefaultListModel<>();
    // 推荐专辑 ListModel
    private DefaultListModel albumRecommendListModel = new DefaultListModel<>();
    // 作为推荐专辑单独的 ListModel，切换
    private DefaultListModel netMusicListForAlbumRecommendModel = new DefaultListModel<>();
    // 推荐歌手 ListModel
    private DefaultListModel artistRecommendListModel = new DefaultListModel<>();
    // 作为推荐歌手单独的 ListModel，切换
    private DefaultListModel netMusicListForArtistRecommendModel = new DefaultListModel<>();
    // 推荐电台 ListModel
    private DefaultListModel radioRecommendListModel = new DefaultListModel<>();
    // 作为推荐电台单独的 ListModel，切换
    private DefaultListModel netMusicListForRadioRecommendModel = new DefaultListModel<>();
    // 推荐 MV ListModel
    private DefaultListModel mvRecommendListModel = new DefaultListModel<>();
    // 推荐单曲 ListModel
    private DefaultListModel netMusicRecommendListModel = new DefaultListModel<>();
    // 推荐工具栏
    private CustomToolBar recommendToolBar = new CustomToolBar();
    // 推荐歌单按钮
    private CustomButton playlistRecommendButton = new CustomButton(playlistRecommendIcon);
    // 精品歌单按钮
    private CustomButton highQualityPlaylistButton = new CustomButton(highQualityPlaylistIcon);
    // 飙升歌曲按钮
    private CustomButton hotMusicButton = new CustomButton(hotMusicIcon);
    // 推荐单曲按钮
    private CustomButton netMusicRecommendButton = new CustomButton(musicRecommendIcon);
    // 新碟上架按钮
    private CustomButton newAlbumRecommendButton = new CustomButton(newAlbumRecommendIcon);
    // 歌手排行按钮
    private CustomButton artistListRecommendButton = new CustomButton(artistListRecommendIcon);
    // 新晋电台按钮
    private CustomButton newRadioRecommendButton = new CustomButton(newRadioRecommendIcon);
    // 热门电台按钮
    private CustomButton hotRadioRecommendButton = new CustomButton(hotRadioRecommendIcon);
    // 推荐节目按钮
    private CustomButton programRecommendButton = new CustomButton(programRecommendIcon);
    // 推荐 MV 按钮
    private CustomButton mvRecommendButton = new CustomButton(mvRecommendIcon);
    // 推荐数量面板
    private CustomPanel recommendCountPanel = new CustomPanel();
    // 推荐源
    private CustomComboBox<String> netRecommendSourceComboBox = new CustomComboBox();
    // 推荐数量标签
    private CustomLabel recommendCountLabel = new CustomLabel("");
    // 推荐歌单/专辑/歌手/电台音乐工具栏
    private CustomToolBar musicRecommendToolBar = new CustomToolBar();
    // 返回推荐歌单/专辑/歌手/电台按钮
    private CustomButton recommendBackwardButton = new CustomButton(backwardIcon);
    // 推荐歌单标签下拉框
    private CustomComboBox<String> netRecommendTagComboBox = new CustomComboBox();
    // 推荐播放全部按钮
    private CustomButton netRecommendPlayAllButton = new CustomButton("播放全部", playAllIcon);
    // 推荐刷新按钮
    private CustomButton netRecommendRefreshButton = new CustomButton(refreshIcon);
    // 推荐页数框
    private CustomTextField netRecommendPageTextField = new CustomTextField(3);
    // 推荐跳页按钮
    private CustomButton netRecommendGoButton = new CustomButton(goIcon);
    // 推荐第一页按钮
    private CustomButton netRecommendStartPageButton = new CustomButton(startPageIcon);
    // 推荐上一页按钮
    private CustomButton netRecommendLastPageButton = new CustomButton(lastPageIcon);
    // 推荐下一页按钮
    private CustomButton netRecommendNextPageButton = new CustomButton(nextPageIcon);
    // 推荐最后一页按钮
    private CustomButton netRecommendEndPageButton = new CustomButton(endPageIcon);

    // 下载列表
    private CustomList<Task> downloadList = new CustomList<>();
    private CustomScrollPane downloadListScrollPane = new CustomScrollPane(downloadList);
    // 下载列表 ListModel
    private DefaultListModel<Task> downloadListModel = new DefaultListModel<>();
    // 下载右键弹出菜单
    private CustomPopupMenu downloadPopupMenu = new CustomPopupMenu(THIS);
    // 下载右键菜单：播放
    private CustomMenuItem downloadPlayMenuItem = new CustomMenuItem(PLAY_MENU_ITEM_TEXT);
    // 下载右键菜单：下一首播放
    private CustomMenuItem downloadNextPlayMenuItem = new CustomMenuItem(NEXT_PLAY_MENU_ITEM_TEXT);
    // 下载右键菜单：打开文件所在位置
    private CustomMenuItem downloadLocateFileMenuItem = new CustomMenuItem("打开文件所在位置");
    // 下载右键菜单：编辑歌曲信息
    private CustomMenuItem downloadEditInfoMenuItem = new CustomMenuItem("编辑歌曲信息");
    // 下载右键菜单：取消任务
    private CustomMenuItem cancelTaskMenuItem = new CustomMenuItem("取消下载");
    // 下载右键菜单：重新开始
    private CustomMenuItem restartTaskMenuItem = new CustomMenuItem("重新下载");
    // 下载右键菜单：删除任务
    private CustomMenuItem removeTaskMenuItem = new CustomMenuItem("删除任务");
    // 下载工具栏
    private CustomToolBar downloadToolBar = new CustomToolBar();
    // 重新开始选中任务按钮
    private CustomButton restartSelectedTasksButton = new CustomButton(restartTaskMenuItemIcon);
    // 取消选中任务按钮
    private CustomButton cancelSelectedTasksButton = new CustomButton(cancelTaskMenuItemIcon);
    // 删除选中任务按钮
    private CustomButton removeSelectedTasksButton = new CustomButton(removeMenuItemIcon);
    // 重新开始全部任务按钮
    private CustomButton restartAllTasksButton = new CustomButton(restartAllTasksIcon);
    // 取消全部任务按钮
    private CustomButton cancelAllTasksButton = new CustomButton(cancelAllTasksIcon);
    // 删除全部任务按钮
    private CustomButton removeAllTasksButton = new CustomButton(removeAllTasksIcon);
    // 下载任务数量标签
    private CustomLabel taskCountLabel = new CustomLabel("共 0 项任务");

    // 播放队列
    private CustomList playQueue = new CustomList<>();
    private ListCellRenderer playQueueRenderer;
    private CustomScrollPane playQueueScrollPane = new CustomScrollPane(playQueue);
    // 播放队列 ListModel
    private DefaultListModel playQueueModel = new DefaultListModel<>();
    // 播放队列右键弹出菜单
    private CustomPopupMenu playQueuePopupMenu = new CustomPopupMenu(THIS);
    // 播放队列右键菜单：播放
    private CustomMenuItem playQueuePlayMenuItem = new CustomMenuItem(PLAY_MENU_ITEM_TEXT);
    // 播放队列右键菜单：下一首播放
    private CustomMenuItem playQueueNextPlayMenuItem = new CustomMenuItem(NEXT_PLAY_MENU_ITEM_TEXT);
    // 播放队列右键菜单：播放 MV
    private CustomMenuItem playQueuePlayMvMenuItem = new CustomMenuItem(PLAY_MV_MENU_ITEM_TEXT);
    // 播放队列右键菜单：收藏
    private CustomMenuItem playQueueCollectMenuItem = new CustomMenuItem(COLLECT_MENU_ITEM_TEXT);
    // 播放队列右键菜单：下载
    private CustomMenuItem playQueueDownloadMenuItem = new CustomMenuItem(DOWNLOAD_MENU_ITEM_TEXT);
    // 播放队列右键菜单：查看评论
    private CustomMenuItem playQueueCommentMenuItem = new CustomMenuItem(COMMENT_MENU_ITEM_TEXT);
    // 播放队列右键菜单：查看乐谱
    private CustomMenuItem playQueueSheetMenuItem = new CustomMenuItem(SHEET_MENU_ITEM_TEXT);
    // 播放队列右键菜单：搜索这首歌曲
    private CustomMenuItem playQueueSearchSongMenuItem = new CustomMenuItem(SEARCH_SONG_MENU_ITEM_TEXT);
    // 播放队列右键菜单：查看相似歌曲
    private CustomMenuItem playQueueSimilarSongMenuItem = new CustomMenuItem(SIMILAR_SONG_MENU_ITEM_TEXT);
    // 播放队列右键菜单：查看相关歌单
    private CustomMenuItem playQueueRelatedPlaylistMenuItem = new CustomMenuItem(RELATED_PLAYLIST_MENU_ITEM_TEXT);
    // 播放队列右键菜单：查看歌手/作者
    private CustomMenuItem playQueueAuthorMenuItem = new CustomMenuItem(AUTHOR_MENU_ITEM_TEXT);
    // 播放队列右键菜单：查看专辑/电台
    private CustomMenuItem playQueueAlbumMenuItem = new CustomMenuItem(ALBUM_MENU_ITEM_TEXT);
    // 播放队列右键菜单：查看推荐电台
    private CustomMenuItem playQueueRecRadioMenuItem = new CustomMenuItem(REC_RADIO_MENU_ITEM_TEXT);
    // 播放队列右键菜单：查看相关 MV
    private CustomMenuItem playQueueRelatedMvMenuItem = new CustomMenuItem(RELATED_MV_MENU_ITEM_TEXT);
    // 播放队列右键菜单：复制名称
    private CustomMenuItem playQueueCopyNameMenuItem = new CustomMenuItem(COPY_NAME_MENU_ITEM_TEXT);
    // 播放队列右键菜单：打开文件所在位置
    private CustomMenuItem playQueueLocateFileMenuItem = new CustomMenuItem(LOCATE_FILE_MENU_ITEM_TEXT);
    // 播放队列右键菜单：编辑歌曲信息
    private CustomMenuItem playQueueEditInfoMenuItem = new CustomMenuItem(EDIT_INFO_MENU_ITEM_TEXT);
    // 播放队列右键菜单：删除
    private CustomMenuItem playQueueRemoveMenuItem = new CustomMenuItem("从播放队列删除");
    // 播放队列工具栏
    private CustomToolBar playQueueToolBar = new CustomToolBar();
    // 删除选中歌曲按钮
    private CustomButton playQueueRemoveToolButton = new CustomButton(removeIcon);
    // 清空播放队列按钮
    private CustomButton playQueueClearToolButton = new CustomButton(clearIcon);
    // 去重按钮
    private CustomButton playQueueDuplicateToolButton = new CustomButton(duplicateIcon);
    // 倒序按钮
    private CustomButton playQueueReverseToolButton = new CustomButton(reverseIcon);
    // 上移按钮
    private CustomButton playQueueMoveUpToolButton = new CustomButton(moveUpIcon);
    // 下移按钮
    private CustomButton playQueueMoveDownToolButton = new CustomButton(moveDownIcon);
    // 歌曲数量标签
    private CustomLabel playQueueCountLabel = new CustomLabel("共 0 首");

    // 描述面板弹出菜单
    private CustomPopupMenu descriptionPanelPopupMenu = new CustomPopupMenu(THIS);
    private CustomMenuItem saveDescCoverImgMenuItem = new CustomMenuItem("导出封面");
    private CustomMenuItem saveDescBgImgMenuItem = new CustomMenuItem("导出背景");
    private CustomMenuItem copyDescNameMenuItem = new CustomMenuItem("复制名称");
    private CustomMenuItem copyDescTagMenuItem = new CustomMenuItem("复制标签");
    private CustomMenuItem copyDescMenuItem = new CustomMenuItem("复制描述");
    private CustomPanel playlistDescriptionPanel = new CustomPanel();
    private CustomPanel albumDescriptionPanel = new CustomPanel();
    private CustomPanel artistDescriptionPanel = new CustomPanel();
    private CustomPanel radioDescriptionPanel = new CustomPanel();
    private CustomPanel rankingDescriptionPanel = new CustomPanel();
    private CustomPanel userDescriptionPanel = new CustomPanel();
    private CustomPanel recommendItemDescriptionPanel = new CustomPanel();
    private CustomPanel collectionItemDescriptionPanel = new CustomPanel();
    // 歌单/专辑/歌手/电台封面图和名称标签
    private CustomLabel playlistCoverAndNameLabel = new CustomLabel("");
    private CustomLabel albumCoverAndNameLabel = new CustomLabel("");
    private CustomLabel artistCoverAndNameLabel = new CustomLabel("");
    private CustomLabel radioCoverAndNameLabel = new CustomLabel("");
    private CustomLabel rankingCoverAndNameLabel = new CustomLabel("");
    private CustomLabel userCoverAndNameLabel = new CustomLabel("");
    private CustomLabel recommendItemCoverAndNameLabel = new CustomLabel("");
    private CustomLabel collectionItemCoverAndNameLabel = new CustomLabel("");
    // 歌单标签
    private CustomLabel playlistTagLabel = new CustomLabel("");
    private CustomLabel artistTagLabel = new CustomLabel("");
    private CustomLabel radioTagLabel = new CustomLabel("");
    private CustomLabel userTagLabel = new CustomLabel("");
    private CustomLabel recommendItemTagLabel = new CustomLabel("");
    private CustomLabel collectionItemTagLabel = new CustomLabel("");
    // 歌单/专辑/歌手/电台描述标签
    private CustomLabel playlistDescriptionLabel = new CustomLabel("");
    private CustomLabel albumDescriptionLabel = new CustomLabel("");
    private CustomLabel artistDescriptionLabel = new CustomLabel("");
    private CustomLabel radioDescriptionLabel = new CustomLabel("");
    private CustomLabel rankingDescriptionLabel = new CustomLabel("");
    private CustomLabel userDescriptionLabel = new CustomLabel("");
    private CustomLabel recommendItemDescriptionLabel = new CustomLabel("");
    private CustomLabel collectionItemDescriptionLabel = new CustomLabel("");
    // 描述部分滚动条
    private CustomScrollPane playlistDescriptionScrollPane = new CustomScrollPane(playlistDescriptionPanel);
    private CustomScrollPane albumDescriptionScrollPane = new CustomScrollPane(albumDescriptionPanel);
    private CustomScrollPane artistDescriptionScrollPane = new CustomScrollPane(artistDescriptionPanel);
    private CustomScrollPane radioDescriptionScrollPane = new CustomScrollPane(radioDescriptionPanel);
    private CustomScrollPane rankingDescriptionScrollPane = new CustomScrollPane(rankingDescriptionPanel);
    private CustomScrollPane userDescriptionScrollPane = new CustomScrollPane(userDescriptionPanel);
    private CustomScrollPane recommendItemDescriptionScrollPane = new CustomScrollPane(recommendItemDescriptionPanel);
    private CustomScrollPane collectionItemDescriptionScrollPane = new CustomScrollPane(collectionItemDescriptionPanel);

    // 全局 Panel
    private GlobalPanel globalPanel = new GlobalPanel();
    // 页面切换 Panel
    private CustomPanel changePanePanel = new CustomPanel();
    // 控制面板 Panel
    private CustomPanel controlPanel = new CustomPanel();
    // 歌词控制面板 Panel
    private CustomPanel controlLrcPanel = new CustomPanel();
    // 进度条 Panel
    private CustomPanel progressPanel = new CustomPanel();

    // 顶部盒子
    private Box topBox = new Box(BoxLayout.X_AXIS);
    // 左部工具条和播放列表盒子
    private Box leftBox = new Box(BoxLayout.Y_AXIS);
    private Box netLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box netPlaylistLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box netAlbumLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box netArtistLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box netRadioLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box netMvLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box netRankingLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box netUserLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box recommendLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box collectionLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box downloadLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box playQueueLeftBox = new Box(BoxLayout.Y_AXIS);
    // 左部收藏列表盒子
    private Box musicCollectionLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box playlistCollectionLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box albumCollectionLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box artistCollectionLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box radioCollectionLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box mvCollectionLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box rankingCollectionLeftBox = new Box(BoxLayout.Y_AXIS);
    private Box userCollectionLeftBox = new Box(BoxLayout.Y_AXIS);
    // 底部进度条和控制面板盒子
    private Box bottomBox = new Box(BoxLayout.Y_AXIS);
    // 进度条水平盒子
    private Box progressBox = new Box(BoxLayout.X_AXIS);
    // 控制面板水平盒子
    private Box controlBox = new Box(BoxLayout.X_AXIS);
    // 歌曲信息和歌词盒子
    private Box infoAndLrcBox = new Box(BoxLayout.X_AXIS);
    // 歌词和频谱盒子
    private Box lrcAndSpecBox = new Box(BoxLayout.Y_AXIS);
    // 左边专辑和标签盒子
    private Box leftInfoBox = new Box(BoxLayout.Y_AXIS);
    // 左下标签纵向排列盒子
    private Box leftBottomBox = new Box(BoxLayout.Y_AXIS);
    // 列表盒子(除搜索工具框，下面所有部分)
    private Box playlistListBox = new Box(BoxLayout.X_AXIS);
    private Box albumListBox = new Box(BoxLayout.X_AXIS);
    private Box artistListBox = new Box(BoxLayout.X_AXIS);
    private Box radioListBox = new Box(BoxLayout.X_AXIS);
    private Box rankingListBox = new Box(BoxLayout.X_AXIS);
    private Box userListBox = new Box(BoxLayout.X_AXIS);
    private Box recommendItemListBox = new Box(BoxLayout.X_AXIS);
    private Box collectionItemListBox = new Box(BoxLayout.X_AXIS);
    // 列表和数量标签盒子
    private Box playlistListCountBox = new Box(BoxLayout.Y_AXIS);
    private Box albumListCountBox = new Box(BoxLayout.Y_AXIS);
    private Box artistListCountBox = new Box(BoxLayout.Y_AXIS);
    private Box radioListCountBox = new Box(BoxLayout.Y_AXIS);
    private Box rankingListCountBox = new Box(BoxLayout.Y_AXIS);
    private Box userListCountBox = new Box(BoxLayout.Y_AXIS);
    private Box recommendItemListCountBox = new Box(BoxLayout.Y_AXIS);
    private Box collectionItemListCountBox = new Box(BoxLayout.Y_AXIS);

    // 评论盒子
    private Box netCommentBox = new Box(BoxLayout.Y_AXIS);
    // 评论列表
    private CustomList<NetCommentInfo> netCommentList = new CustomList<>();
    private CustomScrollPane netCommentScrollPane = new CustomScrollPane(netCommentList);
    private DefaultListModel<NetCommentInfo> netCommentListModel = new DefaultListModel<>();
    // 评论右键弹出菜单
    private CustomPopupMenu netCommentPopupMenu = new CustomPopupMenu(THIS);
    // 评论右键菜单：复制评论
    private CustomMenuItem netCommentCopyMenuItem = new CustomMenuItem("复制评论");
    // 评论右键菜单：导出用户头像
    private CustomMenuItem netCommentSaveProfileMenuItem = new CustomMenuItem("导出用户头像");
    // 评论右键菜单：查看用户
    private CustomMenuItem netCommentUserMenuItem = new CustomMenuItem("查看用户");
    // 评论右键菜单：查看用户歌单
    private CustomMenuItem netCommentPlaylistMenuItem = new CustomMenuItem("查看用户歌单");
    // 评论右键菜单：查看用户专辑
    private CustomMenuItem netCommentAlbumMenuItem = new CustomMenuItem("查看用户专辑");
    // 评论工具栏
    private CustomToolBar netCommentToolBar = new CustomToolBar();
    // 评论返回按钮
    private CustomButton netCommentBackwardButton = new CustomButton(backwardIcon);
    // 评论标题标签
    private CustomLabel netCommentTitleLabel = new CustomLabel("");
    // 评论类型下拉框
    private CustomComboBox<String> netCommentTypeComboBox = new CustomComboBox();
    // 评论刷新按钮
    private CustomButton netCommentRefreshButton = new CustomButton(refreshIcon);
    // 评论页数框
    private CustomTextField netCommentPageTextField = new CustomTextField(3);
    // 评论跳页按钮
    private CustomButton netCommentGoButton = new CustomButton(goIcon);
    // 评论第一页按钮
    private CustomButton netCommentStartPageButton = new CustomButton(startPageIcon);
    // 评论上一页按钮
    private CustomButton netCommentLastPageButton = new CustomButton(lastPageIcon);
    // 评论下一页按钮
    private CustomButton netCommentNextPageButton = new CustomButton(nextPageIcon);
    // 评论最后一页按钮
    private CustomButton netCommentEndPageButton = new CustomButton(endPageIcon);
    // 评论数量面板
    private CustomPanel netCommentCountPanel = new CustomPanel();
    // 评论数量标签
    private CustomLabel netCommentCountLabel = new CustomLabel("");
    // 当前显示评论的对象信息
    private Object currCommentObjectInfo;

    // 乐谱盒子
    private Box netSheetBox = new Box(BoxLayout.Y_AXIS);
    // 乐谱列表
    private CustomList<NetSheetInfo> netSheetList = new CustomList<>();
    private CustomScrollPane netSheetScrollPane = new CustomScrollPane(netSheetList);
    private DefaultListModel<NetSheetInfo> netSheetListModel = new DefaultListModel<>();
    // 乐谱右键弹出菜单
    private CustomPopupMenu netSheetPopupMenu = new CustomPopupMenu(THIS);
    // 乐谱右键菜单：查看乐谱
    private CustomMenuItem netSheetBrowseMenuItem = new CustomMenuItem("查看乐谱");
    // 乐谱右键菜单：复制名称
    private CustomMenuItem netSheetCopyNameMenuItem = new CustomMenuItem("复制名称");
    // 乐谱工具栏
    private CustomToolBar netSheetToolBar = new CustomToolBar();
    // 乐谱返回按钮
    private CustomButton netSheetBackwardButton = new CustomButton(backwardIcon);
    // 乐谱标题标签
    private CustomLabel netSheetTitleLabel = new CustomLabel("");
    //    // 乐谱类型下拉框
//    private CustomComboBox<String> netSheetTypeComboBox = new CustomComboBox();
    // 乐谱刷新按钮
    private CustomButton netSheetRefreshButton = new CustomButton(refreshIcon);
    // 乐谱页数框
    private CustomTextField netSheetPageTextField = new CustomTextField(3);
    // 乐谱跳页按钮
    private CustomButton netSheetGoButton = new CustomButton(goIcon);
    // 乐谱第一页按钮
    private CustomButton netSheetStartPageButton = new CustomButton(startPageIcon);
    // 乐谱上一页按钮
    private CustomButton netSheetLastPageButton = new CustomButton(lastPageIcon);
    // 乐谱下一页按钮
    private CustomButton netSheetNextPageButton = new CustomButton(nextPageIcon);
    // 乐谱最后一页按钮
    private CustomButton netSheetEndPageButton = new CustomButton(endPageIcon);
    // 乐谱数量面板
    private CustomPanel netSheetCountPanel = new CustomPanel();
    // 乐谱数量标签
    private CustomLabel netSheetCountLabel = new CustomLabel("");
    // 当前显示乐谱的歌曲信息
    private NetMusicInfo currSheetMusicInfo;

    // 收藏打开事件
    Runnable openCollectionItemAction;
    // 推荐打开事件
    Runnable openRecommendItemAction;
    // 获取榜单事件
    Runnable getRankingAction;

    // 当前音效名称
    public String currSoundEffectName = EqualizerData.names[0];
    // 当前均衡
    public double[] ed = EqualizerData.data[0];

    // 当前相似歌曲原歌曲
    private NetMusicInfo currMusicMusicInfo;
    // 当前相关歌单原歌曲
    private NetMusicInfo currPlaylistMusicInfo;
    // 当前相关 MV 原歌曲
    private NetMusicInfo currMvMusicInfo;
    // 当前相似歌单原歌单
    private NetPlaylistInfo currPlaylistPlaylistInfo;
    // 当前歌单原评论
    private NetCommentInfo currPlaylistCommentInfo;
    // 当前歌单原用户
    private NetUserInfo currPlaylistUserInfo;
    // 当前电台原歌曲
    private NetMusicInfo currRadioMusicInfo;
    // 当前推荐电台原歌曲
    private NetMusicInfo currRecRadioMusicInfo;
    // 当前电台原用户
    private NetUserInfo currRadioUserInfo;
    // 当前专辑原评论
    private NetCommentInfo currAlbumCommentInfo;
    // 当前相似 MV 原 MV
    private NetMvInfo currMvMvInfo;
    // 当前分集原 MV
    private NetMvInfo currEpisodesMvInfo;
    // 当前视频原用户
    private NetUserInfo currMvUserInfo;
    // 当前歌手原歌曲
    private NetMusicInfo currArtistMusicInfo;
    // 当前歌手原专辑
    private NetAlbumInfo currArtistAlbumInfo;
    // 当前相似歌手原歌手
    private NetArtistInfo currArtistArtistInfo;
    // 当前合作人原歌手
    private NetArtistInfo currBuddyArtistInfo;
    // 当前电台原歌手
    private NetArtistInfo currRadioArtistInfo;
    // 当前相似电台原电台
    private NetRadioInfo currRadioRadioInfo;
    // 当前歌手原 MV
    private NetMvInfo currArtistMvInfo;
    // 当前 CV 原电台
    private NetRadioInfo currCVRadioInfo;
    // 当前演职员原电台
    private NetRadioInfo currArtistRadioInfo;
    // 当前关注用户原用户
    private NetUserInfo currFollowUserUserInfo;
    // 当前粉丝用户原用户
    private NetUserInfo currFollowedUserUserInfo;
    // 当前用户(作者)原歌曲
    private NetMusicInfo currAuthorMusicInfo;
    // 当前用户(作者)原专辑
    private NetAlbumInfo currAuthorAlbumInfo;
    // 当前用户(创建者)原歌单
    private NetPlaylistInfo currUserPlaylistInfo;
    // 当前用户(收藏者)原歌单
    private NetPlaylistInfo currSubscriberPlaylistInfo;
    // 当前用户(粉丝)原歌手
    private NetArtistInfo currUserArtistInfo;
    // 当前用户(发布者)原 MV
    private NetMvInfo currUserMvInfo;
    // 当前用户(主播)原电台
    private NetRadioInfo currUserRadioInfo;
    // 当前用户(订阅者)原电台
    private NetRadioInfo currSubscriberRadioInfo;
    // 当前用户原评论
    private NetCommentInfo currUserCommentInfo;

    // 格言
    private String motto;
    // 格言弹出菜单
    private CustomPopupMenu mottoPopupMenu = new CustomPopupMenu(THIS);
    // 格言右键菜单：复制格言
    private CustomMenuItem copyMottoMenuItem = new CustomMenuItem("复制格言");
    // 格言右键菜单：下一条格言
    private CustomMenuItem nextMottoMenuItem = new CustomMenuItem("下一条格言");

    // loading 面板
    private LoadingPanel loading = new LoadingPanel(THIS);

    // 托盘
    private CustomPopupMenu trayPopupMenu = new CustomPopupMenu(THIS);
    private CustomMenuItem openMainFrameMenuItem = new CustomMenuItem("打开主界面");
    private CustomMenuItem exitMenuItem = new CustomMenuItem("退出" + TITLE);

    // 频谱/歌词/背景图切换/滚动条流畅动画 Timer
    private Timer spectrumTimer;
    private Timer lrcTimer;
    public boolean lrcScrollAnimation;
    private boolean lrcScrollWait;
    //    private Timer lrcScrollTimer;
    //    private Timeline spectrumTimeline;
//    private Timeline lrcTimeline;
    private Timer globalPanelTimer;
//    private Timer gcTimer;

    private int row;
    private int currScrollVal;

    // 执行多个动画的线程池，是使用多个 Timer 造成卡顿的替代方案！
    private ExecutorService spectrumExecutor = Executors.newSingleThreadExecutor();
    private ExecutorService blurExecutor = Executors.newSingleThreadExecutor();
    private ExecutorService playExecutor = Executors.newSingleThreadExecutor();
    private ExecutorService lrcExecutor = Executors.newSingleThreadExecutor();
    private ExecutorService globalPanelExecutor = Executors.newSingleThreadExecutor();
//    private ExecutorService lrcScrollExecutor = Executors.newSingleThreadExecutor();

    // 其他需要多线程的操作提交给该线程池
    private ExecutorService globalExecutor = Executors.newFixedThreadPool(5);

    // 桌面歌词对话框
    private DesktopLyricDialog desktopLyricDialog = new DesktopLyricDialog(THIS);
    // MV 播放对话框
    private VideoDialog videoDialog;
    // 迷你窗口
    public MiniDialog miniDialog;
    // 迷你窗口坐标
    public int miniX;
    public int miniY;
    // 图片预览对话框
    private ImageViewDialog imageViewDialog;

    // 当前弹出的菜单
    public JPopupMenu currPopup;
    // 当前弹出的对话框
    public List<JDialog> currDialogs = new LinkedList<>();

    // 当前窗口坐标
    public int x;
    public int y;

    // 更新格言
    private void updateMotto() {
        globalExecutor.submit(() -> {
            try {
                motto = MusicServerUtils.getMotto();
                titleLabel.setVisible(false);
                titleLabel.setText(StringUtils.textToHtmlWithSpace(TITLE + "\n" + motto));
                titleLabel.setVisible(true);
            } catch (Exception e) {
                titleLabel.setText(TITLE);
            }
        });
    }

    private void initUI() throws ClassNotFoundException, UnsupportedLookAndFeelException, InstantiationException, IllegalAccessException, AWTException, IOException, InterruptedException {
        // 主界面
        setTitle(TITLE);
        globalPanel.setLayout(new BorderLayout());
        setIconImage(titleIcon.getImage());
        setUndecorated(true);
        // 窗口关闭事件
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                closeButton.doClick();
            }
        });
        // 窗口焦点事件：调整桌面歌词的显示
        addWindowFocusListener(new WindowAdapter() {
            @Override
            public void windowGainedFocus(WindowEvent e) {
                if (windowState == WindowState.MAXIMIZED) desktopLyricDialog.setVisible(false);
                lrcScrollAnimation = true;
            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                if (windowState == WindowState.MAXIMIZED) desktopLyricDialog.setVisible(showDesktopLyric);
            }
        });
        // 窗口圆角
        setDefaultLookAndFeelDecorated(true);
        // 窗口透明
        // setWindowOpaque 存在性能问题，别用
//        AWTUtilities.setWindowOpaque(THIS, false);
//        setBackground(Colors.TRANSLUCENT);
        // 窗口大小适应
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                if (x == 0x3f3f3f3f && y == 0x3f3f3f3f) setLocationRelativeTo(null);
                else if (windowState != WindowState.MAXIMIZED) setLocation(x, y);
                int w = getWidth(), h = getHeight();
                // 窗口圆角
                SwingUtilities.invokeLater(() -> setShape(windowState == WindowState.MAXIMIZED ? new Rectangle2D.Double(0, 0, w, h)
                        : new RoundRectangle2D.Double(0, 0, w, h, 10, 10)));
                // 避免标签字太多超宽！！！
                Dimension ld = new Dimension((int) (w * 0.3), (int) (h * 0.077));
                songNameLabel.setPreferredSize(ld);
                artistLabel.setPreferredSize(ld);
                albumLabel.setPreferredSize(ld);
                // 歌词面板
                Dimension d = new Dimension((int) (w * 0.6), h);
                Dimension d2 = new Dimension((int) (w * 0.6), SpectrumConstants.BAR_MAX_HEIGHT);
                lrcScrollPane.setPreferredSize(d);
                spectrumPanel.setPreferredSize(d2);
                // 时间条
                currTimeLabel.setVisible(false);
                currTimeLabel.setVisible(true);
                timeBar.setPreferredSize(new Dimension(w - currTimeLabel.getPreferredSize().width - durationLabel.getPreferredSize().width - 30 * 2, 12));
                // 专辑图片
                albumImageWidth = (int) (w * 0.33);
                Dimension ad = new Dimension((int) (w * 0.4), Integer.MAX_VALUE);
                albumImageLabel.setMaximumSize(ad);
                if (player.loadedMusic()) {
                    showAlbumImage();
                    // 防止歌词面板错位
                    infoAndLrcBox.add(leftInfoBox);
                    infoAndLrcBox.add(lrcAndSpecBox);
                }
                // 背景
                if (blurType == BlurType.OFF) doStyleBlur(currUIStyle);
            }
        });
        // 解决 setUndecorated(true) 后窗口不能拖动的问题
        Point origin = new Point();
        topBox.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.getButton() != MouseEvent.BUTTON1 || windowState == WindowState.MAXIMIZED) return;
                origin.x = e.getX();
                origin.y = e.getY();
            }
        });
        topBox.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                // mouseDragged 不能正确返回 button 值，需要借助此方法
                if (!SwingUtilities.isLeftMouseButton(e) || windowState == WindowState.MAXIMIZED) return;
                Point p = getLocation();
                setLocation(x = p.x + e.getX() - origin.x, y = p.y + e.getY() - origin.y);
            }
        });
        titleLabel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.getButton() != MouseEvent.BUTTON1 || windowState == WindowState.MAXIMIZED) return;
                origin.x = e.getX();
                origin.y = e.getY();
            }
        });
        titleLabel.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                // mouseDragged 不能正确返回 button 值，需要借助此方法
                if (!SwingUtilities.isLeftMouseButton(e) || windowState == WindowState.MAXIMIZED) return;
                Point p = getLocation();
                setLocation(x = p.x + e.getX() - origin.x, y = p.y + e.getY() - origin.y);
            }
        });

        // loading 面板
        setGlassPane(loading);

        // 初始化 JavaFX 组件
        Platform.setImplicitExit(false);
        add(new JFXPanel());

        // 初始化标题栏
        titleBarInit();

        // 初始化主菜单
        mainMenuInit();

        // 初始化标签页
        tabbedPaneInit();

        // 初始化收藏标签页
        collectionTabbedPaneInit();

        // 初始化收藏工具条
        collectionToolBarInit();

        // 初始化收藏列表
        collectionListInit();

        // 初始化标签
        labelInit();

        // 初始化个人音乐工具条
        personalMusicToolBarInit();

        // 初始化离线音乐工具条
        musicToolBarInit();

        // 初始化个人音乐列表
        musicListInit();

        // 初始化在线音乐工具条
        netMusicToolBarInit();

        // 初始化在线音乐列表
        netMusicListInit();

        // 初始化描述盒子
        descriptionPanelInit();

        // 初始化歌单工具条
        netPlaylistToolBarInit();

        // 初始化歌单列表
        netPlaylistListInit();

        // 初始化专辑工具条
        netAlbumToolBarInit();

        // 初始化专辑列表
        netAlbumListInit();

        // 初始化歌手工具条
        netArtistToolBarInit();

        // 初始化歌手列表
        netArtistListInit();

        // 初始化电台工具条
        netRadioToolBarInit();

        // 初始化电台列表
        netRadioListInit();

        // 初始化 MV 工具条
        netMvToolBarInit();

        // 初始化 MV 列表
        netMvListInit();

        // 初始化榜单工具条
        netRankingToolBarInit();

        // 初始化榜单列表
        netRankingListInit();

        // 初始化用户工具条
        netUserToolBarInit();

        // 初始化用户列表
        netUserListInit();

        // 初始化评论工具条
        netCommentToolBarInit();

        // 初始化评论列表
        netCommentListInit();

        // 初始化乐谱工具条
        netSheetToolBarInit();

        // 初始化乐谱列表
        netSheetListInit();

        // 初始化推荐工具条
        recommendToolBarInit();

        // 初始化推荐列表
        itemRecommendListInit();

        // 初始化下载工具条
        downloadToolBarInit();

        // 初始化下载列表
        downloadListInit();

        // 初始化播放队列工具条
        playQueueToolBarInit();

        // 初始化播放队列列表
        playQueueInit();

        // 初始化歌词列表
        lrcListInit();

        // 初始化动画 Timer
        timerInit();

        // 初始化进度条
        timeBarInit();

        // 初始化控制面板
        controlPanelInit();

        // 格言
        updateMotto();

        // 初始化托盘
        trayInit();

        // 更新 LAF
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        SwingUtilities.updateComponentTreeUI(THIS);
        SwingUtilities.updateComponentTreeUI(globalPanel);

        // 加载配置
        boolean succeed = loadConfig();

        add(globalPanel);
        setVisible(true);

        // 加载全局快捷键监听器
        loadHotKeyListener();

        // 首次使用显示指南
        if (!succeed) helpMenuItem.doClick();
    }

    // 初始化标题栏
    private void titleBarInit() {
        titleLabel.setText(TITLE);
        titleLabel.setIcon(titleIcon);
        titleLabel.setIconTextGap(15);
        titleLabel.setHorizontalTextPosition(SwingConstants.RIGHT);
        titleLabel.setHorizontalAlignment(SwingConstants.LEFT);
        titleLabel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON3) {
                    if (player.isEmpty()) mottoPopupMenu.show(titleLabel, e.getX(), e.getY());
                }
            }
        });

        // 复制格言
        copyMottoMenuItem.addActionListener(e -> {
            StringSelection stringSelection = new StringSelection(motto);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });
        // 下一条格言
        nextMottoMenuItem.addActionListener(e -> updateMotto());

        mottoPopupMenu.add(copyMottoMenuItem);
        mottoPopupMenu.add(nextMottoMenuItem);

        // 隐藏歌曲详情
        hideDetailButton.addActionListener(e -> changePaneButton.doClick());
        // 换肤按钮
        styleToolButton.setComponentPopupMenu(stylePopupMenu);
        styleToolButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1) {
//                    SwingUtilities.updateComponentTreeUI(stylePopupMenu);
                    stylePopupMenu.show(styleToolButton, e.getX(), e.getY());
                }
            }
        });
        // 主菜单弹出按钮
        mainMenuButton.setComponentPopupMenu(mainMenu);
        mainMenuButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
//                SwingUtilities.updateComponentTreeUI(mainMenu);
                mainMenu.show(mainMenuButton, e.getX(), e.getY());
            }
        });
        // 迷你模式
        miniButton.addActionListener(e -> {
            // 关闭频谱
            closeSpectrum();
            dispose();
            miniDialog = new MiniDialog(THIS);
            miniDialog.showDialog();
            miniButton.setIcon(ImageUtils.dye(miniIcon, currUIStyle.getButtonColor()));
        });
        // 最小化
        minimizeButton.addActionListener(e -> {
            setExtendedState(ICONIFIED);
//            windowState = WindowState.MINIMIZED;
        });
        // 最大化
        maximizeButton.addActionListener(e -> {
            if (windowState == NORMAL) {
                windowState = WindowState.MAXIMIZED;
                maximizeButton.setIcon(ImageUtils.dye(restoreIcon, currUIStyle.getButtonColor()));
                // 取消桌面歌词显示
                desktopLyricDialog.setVisible(false);
                // 不覆盖任务栏
                Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                Insets insets = Toolkit.getDefaultToolkit().getScreenInsets(getGraphicsConfiguration());
                setBounds(0, 0, screenSize.width, screenSize.height - insets.bottom);
            } else {
                windowState = WindowState.NORMAL;
                maximizeButton.setIcon(ImageUtils.dye(maximizeIcon, currUIStyle.getButtonColor()));
                // 如果开启桌面歌词，恢复桌面歌词显示
                desktopLyricDialog.setVisible(showDesktopLyric);
                // 恢复窗口大小
                setSize(windowWidth, windowHeight);
            }
        });
        // 关闭窗口
        closeButton.addActionListener(e -> {
            // 询问隐藏到托盘还是退出程序
            if (currCloseWindowOption == CloseWindowOptions.ASK) {
                ConfirmDialog confirmDialog = new ConfirmDialog(THIS, ASK_DISPOSE_MSG, EXIT_OPTIONS[0], EXIT_OPTIONS[1], EXIT_OPTIONS[2], true, REMEMBER_CHOICE_MSG);
                confirmDialog.showDialog();
                int response = confirmDialog.getResponse();
                boolean checked = confirmDialog.isChecked();
                if (response == JOptionPane.YES_OPTION) {
                    if (checked) currCloseWindowOption = CloseWindowOptions.DISPOSE;
                    // 关闭频谱
                    closeSpectrum();
                    dispose();
                } else if (response == JOptionPane.NO_OPTION) {
                    if (checked) currCloseWindowOption = CloseWindowOptions.EXIT;
                    // 移除托盘图标、保存配置并退出
                    exit();
                }
            }
            // 隐藏到托盘
            else if (currCloseWindowOption == CloseWindowOptions.DISPOSE) {
                // 关闭频谱
                closeSpectrum();
                dispose();
            }
            // 退出程序
            else if (currCloseWindowOption == CloseWindowOptions.EXIT) {
                // 移除托盘图标、保存配置并退出
                exit();
            }
        });
        // 隐藏详情暂时不可见
        hideDetailButton.setVisible(false);
        // 最佳大小
        Dimension d = new Dimension(30, hideDetailIcon.getIconHeight());
        hideDetailButton.setPreferredSize(d);
        styleToolButton.setPreferredSize(d);
        mainMenuButton.setPreferredSize(d);
        splitLabel.setPreferredSize(d);
        miniButton.setPreferredSize(d);
        minimizeButton.setPreferredSize(d);
        maximizeButton.setPreferredSize(d);
        closeButton.setPreferredSize(d);
        // 悬浮提示
        hideDetailButton.setToolTipText(HIDE_DETAIL_TIP);
        styleToolButton.setToolTipText(STYLE_TIP);
        mainMenuButton.setToolTipText(MENU_TIP);
        miniButton.setToolTipText(MINI_WINDOW_TIP);
        minimizeButton.setToolTipText(MINIMIZE_WINDOW_TIP);
        maximizeButton.setToolTipText(MAXIMIZE_WINDOW_TIP);
        closeButton.setToolTipText(CLOSE_WINDOW_TIP);
        // 鼠标事件
        hideDetailButton.addMouseListener(new ButtonMouseListener(hideDetailButton, THIS));
        styleToolButton.addMouseListener(new ButtonMouseListener(styleToolButton, THIS));
        mainMenuButton.addMouseListener(new ButtonMouseListener(mainMenuButton, THIS));
        miniButton.addMouseListener(new ButtonMouseListener(miniButton, THIS));
        minimizeButton.addMouseListener(new ButtonMouseListener(minimizeButton, THIS));
        maximizeButton.addMouseListener(new ButtonMouseListener(maximizeButton, THIS));
        closeButton.addMouseListener(new ButtonMouseListener(closeButton, THIS));

        FlowLayout fl = new FlowLayout(FlowLayout.RIGHT);
        fl.setHgap(16);
        windowCtrlPanel.setLayout(fl);
        windowCtrlPanel.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));
        windowCtrlPanel.setMinimumSize(new Dimension(360, 10));
        windowCtrlPanel.add(hideDetailButton);
        windowCtrlPanel.add(styleToolButton);
        windowCtrlPanel.add(mainMenuButton);
        windowCtrlPanel.add(splitLabel);
        windowCtrlPanel.add(miniButton);
        windowCtrlPanel.add(minimizeButton);
        windowCtrlPanel.add(maximizeButton);
        windowCtrlPanel.add(closeButton);
        topPanel.setLayout(new BoxLayout(topPanel, BoxLayout.X_AXIS));
        topPanel.add(titleLabel);
        topPanel.add(Box.createHorizontalGlue());
        topPanel.add(windowCtrlPanel);
        topBox.add(topPanel);
        topBox.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 10));
        globalPanel.add(topBox, BorderLayout.NORTH);
    }

    public boolean keyEnabled;
    public LinkedList<Integer> playOrPauseKeys;
    public LinkedList<Integer> playLastKeys;
    public LinkedList<Integer> playNextKeys;
    public LinkedList<Integer> backwardKeys;
    public LinkedList<Integer> forwardKeys;
    public LinkedList<Integer> videoFullScreenKeys;
    public final LinkedList<Integer> currKeys = new LinkedList<>();

    // 加载全局快捷键监听器，AWTEventListener
    private void loadHotKeyListener() {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        toolkit.addAWTEventListener(event -> {
            if (!(event instanceof KeyEvent)) return;
            KeyEvent kE = (KeyEvent) event;
            boolean released = kE.getID() == KeyEvent.KEY_RELEASED, pressed = kE.getID() == KeyEvent.KEY_PRESSED;
            if (!released && !pressed) return;
            int code = kE.getKeyCode();

            // 图片浏览窗口的监听事件
            if (imageViewDialog != null && released && !imageViewDialog.pageTextField.hasFocus()) {
                if (code == KeyEvent.VK_LEFT) {
                    imageViewDialog.lastImgButton.doClick();
                } else if (code == KeyEvent.VK_RIGHT) {
                    imageViewDialog.nextImgButton.doClick();
                }
            }
            // 视频界面恢复窗口事件
            else if (videoDialog != null) {
                if (keyEnabled) {
                    // 记录所有按键
                    if (released && !currKeys.isEmpty()) currKeys.removeLast();
                    else if (!currKeys.contains(code)) currKeys.add(code);
                    else return;
                    if (ListUtils.equals(playOrPauseKeys, currKeys)) {
                        videoDialog.playOrPause();
                    } else if (ListUtils.equals(backwardKeys, currKeys)) {
                        videoDialog.backwardButton.doClick();
                    } else if (ListUtils.equals(forwardKeys, currKeys)) {
                        videoDialog.forwardButton.doClick();
                    } else if (ListUtils.equals(videoFullScreenKeys, currKeys)) {
                        videoDialog.switchWindow();
                    }
                }
            } else {
                // 搜索框输入时不受影响
                if (!collectionPageTextField.hasFocus()
                        && !searchTextField.hasFocus() && !netMusicPageTextField.hasFocus()
                        && !netPlaylistSearchTextField.hasFocus() && !netPlaylistPageTextField.hasFocus()
                        && !netAlbumSearchTextField.hasFocus() && !netAlbumPageTextField.hasFocus()
                        && !netArtistSearchTextField.hasFocus() && !netArtistPageTextField.hasFocus()
                        && !netRadioSearchTextField.hasFocus() && !netRadioPageTextField.hasFocus()
                        && !netMvSearchTextField.hasFocus() && !netMvPageTextField.hasFocus()
                        && !netRankingPageTextField.hasFocus()
                        && !netUserSearchTextField.hasFocus() && !netUserPageTextField.hasFocus()
                        && !netCommentPageTextField.hasFocus()
                        && !netSheetPageTextField.hasFocus()
                        && !netRecommendPageTextField.hasFocus()
                        && !filterTextField.hasFocus() && currDialogs.isEmpty()) {
                    // 播放或暂停、上下一首
                    if (keyEnabled) {
                        // 记录所有按键
                        if (released && !currKeys.isEmpty()) currKeys.removeLast();
                        else if (!currKeys.contains(code)) currKeys.add(code);
                        else return;
                        if (ListUtils.equals(playOrPauseKeys, currKeys)) {
                            if (videoDialog == null) playOrPause();
                        } else if (ListUtils.equals(playLastKeys, currKeys)) {
                            if (videoDialog == null) playLast();
                        } else if (ListUtils.equals(playNextKeys, currKeys)) {
                            if (videoDialog == null) playNext();
                        } else if (ListUtils.equals(backwardKeys, currKeys)) {
                            if (videoDialog == null) backwardButton.doClick();
                        } else if (ListUtils.equals(forwardKeys, currKeys)) {
                            if (videoDialog == null) forwardButton.doClick();
                        }
                    }
                } else if (currDialogs.isEmpty()) {
                    if (code == KeyEvent.VK_ENTER) {
                        // 回车跳页
                        if (collectionPageTextField.hasFocus()) collectionGoButton.doClick();
                        else if (netMusicPageTextField.hasFocus()) netMusicGoButton.doClick();
                        else if (netPlaylistPageTextField.hasFocus()) netPlaylistGoButton.doClick();
                        else if (netAlbumPageTextField.hasFocus()) netAlbumGoButton.doClick();
                        else if (netArtistPageTextField.hasFocus()) netArtistGoButton.doClick();
                        else if (netRadioPageTextField.hasFocus()) netRadioGoButton.doClick();
                        else if (netMvPageTextField.hasFocus()) netMvGoButton.doClick();
                        else if (netRankingPageTextField.hasFocus()) netRankingGoButton.doClick();
                        else if (netUserPageTextField.hasFocus()) netUserGoButton.doClick();
                        else if (netCommentPageTextField.hasFocus()) netCommentGoButton.doClick();
                        else if (netSheetPageTextField.hasFocus()) netSheetGoButton.doClick();
                        else if (netRecommendPageTextField.hasFocus()) netRecommendGoButton.doClick();
                        else {
                            // 回车搜索
                            int selectedIndex = tabbedPane.getSelectedIndex();
                            if (selectedIndex == TabIndex.NET_MUSIC) searchButton.doClick();
                            else if (selectedIndex == TabIndex.NET_PLAYLIST) netPlaylistSearchButton.doClick();
                            else if (selectedIndex == TabIndex.NET_ALBUM) netAlbumSearchButton.doClick();
                            else if (selectedIndex == TabIndex.NET_ARTIST) netArtistSearchButton.doClick();
                            else if (selectedIndex == TabIndex.NET_RADIO) netRadioSearchButton.doClick();
                            else if (selectedIndex == TabIndex.NET_MV) netMvSearchButton.doClick();
                            else if (selectedIndex == TabIndex.NET_USER) netUserSearchButton.doClick();
                        }
                    }
                }
            }
        }, AWTEvent.KEY_EVENT_MASK);
    }

    // 加载配置
    private boolean loadConfig() throws ClassNotFoundException, UnsupportedLookAndFeelException, InstantiationException, IllegalAccessException, IOException, AWTException {
        JSONObject config = JsonUtils.readJson(ConfigConstants.fileName);
        // 载入已保存的自定义风格(逆序加载，这样才能保持顺序一致)
        JSONArray styleArray = config.optJSONArray(ConfigConstants.CUSTOM_UI_STYLES);
        if (styleArray != null) {
            for (int i = 0, len = styleArray.size(); i < len; i++) {
                JSONObject styleObject = styleArray.getJSONObject(i);
                UIStyle style = new UIStyle(
                        UIStyleConstants.CUSTOM,
                        styleObject.getString("name"),
                        styleObject.getString("imgPath"),
                        ColorUtils.RGBStringToColor((String) styleObject.get("bgColor")),
                        ColorUtils.RGBStringToColor((String) styleObject.get("foreColor")),
                        ColorUtils.RGBStringToColor((String) styleObject.get("selectedColor")),
                        ColorUtils.RGBStringToColor((String) styleObject.get("lrcColor")),
                        ColorUtils.RGBStringToColor((String) styleObject.get("highlightColor")),
                        ColorUtils.RGBStringToColor((String) styleObject.get("labelColor")),
                        ColorUtils.RGBStringToColor((String) styleObject.get("timeBarColor")),
                        ColorUtils.RGBStringToColor((String) styleObject.get("buttonColor")),
                        ColorUtils.RGBStringToColor((String) styleObject.get("scrollBarColor")),
                        ColorUtils.RGBStringToColor((String) styleObject.get("sliderColor")),
                        ColorUtils.RGBStringToColor((String) styleObject.get("spectrumColor")),
                        ColorUtils.RGBStringToColor((String) styleObject.get("menuItemColor"))
                );
                addStyle(style, false);
            }
        }
        // 载入是否启用快捷键
        keyEnabled = config.optBoolean(ConfigConstants.KEY_ENABLED, true);
        playOrPauseKeys = KeyUtils.strToCodes(config.optString(ConfigConstants.PLAY_OR_PAUSE_KEYS));
        if (playOrPauseKeys.isEmpty()) {
            playOrPauseKeys.add(KeyEvent.VK_CONTROL);
            playOrPauseKeys.add(KeyEvent.VK_F5);
        }
        playLastKeys = KeyUtils.strToCodes(config.optString(ConfigConstants.PLAY_LAST_KEYS));
        if (playLastKeys.isEmpty()) {
            playLastKeys.add(KeyEvent.VK_CONTROL);
            playLastKeys.add(KeyEvent.VK_LEFT);
        }
        playNextKeys = KeyUtils.strToCodes(config.optString(ConfigConstants.PLAY_NEXT_KEYS));
        if (playNextKeys.isEmpty()) {
            playNextKeys.add(KeyEvent.VK_CONTROL);
            playNextKeys.add(KeyEvent.VK_RIGHT);
        }
        backwardKeys = KeyUtils.strToCodes(config.optString(ConfigConstants.BACKWARD_KEYS));
        if (backwardKeys.isEmpty()) {
            backwardKeys.add(KeyEvent.VK_CONTROL);
            backwardKeys.add(KeyEvent.VK_ALT);
            backwardKeys.add(KeyEvent.VK_LEFT);
        }
        forwardKeys = KeyUtils.strToCodes(config.optString(ConfigConstants.FORWARD_KEYS));
        if (forwardKeys.isEmpty()) {
            forwardKeys.add(KeyEvent.VK_CONTROL);
            forwardKeys.add(KeyEvent.VK_ALT);
            forwardKeys.add(KeyEvent.VK_RIGHT);
        }
        videoFullScreenKeys = KeyUtils.strToCodes(config.optString(ConfigConstants.VIDEO_FULL_SCREEN_KEYS));
        if (videoFullScreenKeys.isEmpty()) {
            videoFullScreenKeys.add(KeyEvent.VK_F11);
        }
        // 载入是否自动更新
        autoUpdate = config.optBoolean(ConfigConstants.AUTO_UPDATE, true);
        if (autoUpdate) checkUpdate(true);
        // 载入关闭窗口操作
        currCloseWindowOption = config.optInt(ConfigConstants.CLOSE_WINDOW_OPTION, CloseWindowOptions.ASK);
        // 载入窗口大小
        windowSize = config.optInt(ConfigConstants.WINDOW_SIZE, WindowSize.MIDDLE);
        windowWidth = WindowSize.dimensions[windowSize][0];
        windowHeight = WindowSize.dimensions[windowSize][1];
        x = y = 0x3f3f3f3f;
        setSize(windowWidth, windowHeight);
        // 载入播放视频是否关闭主界面
        videoOnly = config.optBoolean(ConfigConstants.VIDEO_ONLY, true);
        // 载入歌曲下载路径
        String musicDownPath = config.optString(ConfigConstants.MUSIC_DOWN_PATH);
        if (!musicDownPath.isEmpty()) SimplePath.DOWNLOAD_MUSIC_PATH = musicDownPath;
        FileUtils.makeSureDir(musicDownPath);
        // 载入 MV 下载路径
        String mvDownPath = config.optString(ConfigConstants.MV_DOWN_PATH);
        if (!mvDownPath.isEmpty()) SimplePath.DOWNLOAD_MV_PATH = mvDownPath;
        FileUtils.makeSureDir(mvDownPath);
        // 载入缓存路径
        String cachePath = config.optString(ConfigConstants.CACHE_PATH);
        if (!cachePath.isEmpty()) {
            SimplePath.CACHE_PATH = cachePath;
            SimplePath.IMG_CACHE_PATH = cachePath + (cachePath.endsWith("/") ? "" : "/") + "img/";
        }
        FileUtils.makeSureDir(cachePath);
        FileUtils.makeSureDir(SimplePath.IMG_CACHE_PATH);
        // 载入最大缓存大小
        maxCacheSize = config.optLong(ConfigConstants.MAX_CACHE_SIZE, 1024);
        // 载入最大播放历史数量
        maxHistoryCount = config.optInt(ConfigConstants.MAX_HISTORY_COUNT, 300);
        // 载入最大搜索历史数量
        maxSearchHistoryCount = config.optInt(ConfigConstants.MAX_SEARCH_HISTORY_COUNT, 50);
        // 载入同时下载的最大任务数
        int maxConcurrentTaskCount = Math.min(3, config.optInt(ConfigConstants.MAX_CONCURRENT_TASK_COUNT, 3));
        GlobalExecutors.downloadExecutor = Executors.newFixedThreadPool(maxConcurrentTaskCount);
        // 载入是否显示频谱
        showSpectrum = config.optBoolean(ConfigConstants.SHOW_SPECTRUM, true);
        switchSpectrumButton.setIcon(ImageUtils.dye(showSpectrum ? spectrumOnIcon : spectrumOffIcon, currUIStyle.getButtonColor()));
        // 载入是否高斯模糊
        gsOn = config.optBoolean(ConfigConstants.GS_ON, false);
        // 载入是否暗化
        darkerOn = config.optBoolean(ConfigConstants.DARKER_ON, true);
        // 载入模糊类型
        blurType = config.optInt(ConfigConstants.BLUR_TYPE, BlurType.OFF);
        blurButton.setIcon(ImageUtils.dye(blurType == BlurType.CV ? cvBlurIcon : blurType == BlurType.MC ? mcBlurIcon :
                blurType == BlurType.LG ? lgBlurIcon : blurOffIcon, currUIStyle.getButtonColor()));
        // 载入是否自动下载歌词
        isAutoDownloadLrc = config.optBoolean(ConfigConstants.AUTO_DOWNLOAD_LYRIC, true);
        // 载入上次选的风格
        int styleIndex = config.optInt(ConfigConstants.CURR_UI_STYLE, 0);
        changeUIStyle(styles.get(styleIndex));
        // 载入歌词偏移
        lrcOffset = config.optDouble(ConfigConstants.LYRIC_OFFSET, 0);
        currLrcOffsetMenuItem.setText(String.format(LRC_OFFSET_MSG, lrcOffset));
        // 载入是否显示桌面歌词
        desktopLyricDialog.setLyric(NO_LRC_MSG, 0);
        if (showDesktopLyric = config.optBoolean(ConfigConstants.SHOW_DESKTOP_LYRIC, true)) {
            desktopLyricDialog.setVisible(true);
        } else desktopLyricButton.setIcon(ImageUtils.dye(desktopLyricOffIcon, currUIStyle.getButtonColor()));
        // 载入是否锁定桌面歌词
        desktopLyricLocked = config.optBoolean(ConfigConstants.LOCK_DESKTOP_LYRIC, false);
        // 载入桌面歌词坐标
        desktopLyricX = config.optInt(ConfigConstants.DESKTOP_LYRIC_X, -1);
        desktopLyricY = config.optInt(ConfigConstants.DESKTOP_LYRIC_Y, -1);
        if (desktopLyricX >= 0) desktopLyricDialog.setLocation(desktopLyricX, desktopLyricY);
        // 载入是否桌面歌词置顶
        desktopLyricOnTop = config.optBoolean(ConfigConstants.DESKTOP_LYRIC_ON_TOP, true);
        desktopLyricDialog.setAlwaysOnTop(desktopLyricOnTop);
        // 载入桌面歌词透明度
        desktopLyricAlpha = config.optDouble(ConfigConstants.DESKTOP_LYRIC_ALPHA, 1);
        desktopLyricDialog.setAlpha((float) desktopLyricAlpha);
//        stylePopupMenuItems.get(styleIndex).setSelected(true);
//        updateMenuItemIcon(stylePopupMenu);
        // 载入播放模式
        switch (config.optInt(ConfigConstants.PLAY_MODE, PlayMode.LIST_CYCLE)) {
            case PlayMode.SEQUENCE:
                changeToSequence(false);
                break;
            case PlayMode.LIST_CYCLE:
                changeToListCycle(false);
                break;
            case PlayMode.SINGLE:
                changeToSingle(false);
                break;
            case PlayMode.SHUFFLE:
                changeToShuffle(false);
                break;
        }
        // 载入快进/快退时间
        forwardOrBackwardTime = config.optInt(ConfigConstants.FOB_TIME, DEFAULT_FORWARD_OR_BACKWARD_TIME);
        // 载入视频快进/快退时间
        videoForwardOrBackwardTime = config.optInt(ConfigConstants.VIDEO_FOB_TIME, DEFAULT_FORWARD_OR_BACKWARD_TIME);
        // 载入速率
        currRate = config.optDouble(ConfigConstants.RATE, DEFAULT_RATE);
        // 载入视频速率
        currVideoRate = config.optDouble(ConfigConstants.VIDEO_RATE, DEFAULT_RATE);
//        String rateStr = String.valueOf(currRate).replace(".0", "");
//        for (CustomRadioButtonMenuItem mi : rateMenuItems) {
//            if (rateStr.equals(mi.getText().replaceFirst("x", ""))) {
//                mi.setSelected(true);
//                updateMenuItemIcon(ratePopupMenu);
//                break;
//            }
//        }
        // 载入频谱样式
        currSpecStyle = config.optInt(ConfigConstants.SPECTRUM_STYLE, SpectrumConstants.GROUND);
        // 载入均衡
        currBalance = config.optDouble(ConfigConstants.BALANCE, DEFAULT_BALANCE);
        // 载入音量
        volumeSlider.setValue(config.optInt(ConfigConstants.VOLUME, DEFAULT_VOLUME));
        // 载入是否静音
        isMute = config.optBoolean(ConfigConstants.MUTE, false);
        if (isMute) muteButton.setIcon(ImageUtils.dye(muteIcon, currUIStyle.getButtonColor()));
        // 载入音效名称
        currSoundEffectName = config.optString(ConfigConstants.SOUND_EFFECT_NAME, EqualizerData.names[0]);
        // 载入均衡数据
        JSONArray equalizerData = config.optJSONArray(ConfigConstants.EQUALIZER_DATA);
        if (equalizerData != null) {
            ed = new double[EqualizerData.BAND_NUM];
            for (int i = 0, len = equalizerData.size(); i < len; i++) ed[i] = equalizerData.optDouble(i);
        }
        // 载入迷你窗口位置
        miniX = config.optInt(ConfigConstants.MINIX, -0x3f3f3f3f);
        miniY = config.optInt(ConfigConstants.MINIY, -0x3f3f3f3f);
        // 载入中文类型
        currChineseType = config.optInt(ConfigConstants.CHINESE_TYPE, ChineseType.SIMPLIFIED);
        if (currChineseType == ChineseType.SIMPLIFIED)
            switchChineseButton.setIcon(ImageUtils.dye(simpChineseIcon, currUIStyle.getButtonColor()));
        else
            switchChineseButton.setIcon(ImageUtils.dye(tradChineseIcon, currUIStyle.getButtonColor()));
        // 载入日文类型
        currJapaneseType = config.optInt(ConfigConstants.JAPANESE_TYPE, JapaneseType.KANA);
        if (currJapaneseType == JapaneseType.KANA)
            switchJapaneseButton.setIcon(ImageUtils.dye(kanaIcon, currUIStyle.getButtonColor()));
        else
            switchJapaneseButton.setIcon(ImageUtils.dye(romajiIcon, currUIStyle.getButtonColor()));
        // 载入歌词类型
        currLrcType = config.optInt(ConfigConstants.LYRIC_TYPE, LyricType.ORIGINAL);
        if (currLrcType == LyricType.ORIGINAL)
            switchLrcTypeButton.setIcon(ImageUtils.dye(originalIcon, currUIStyle.getButtonColor()));
        else if (currLrcType == LyricType.TRANSLATION)
            switchLrcTypeButton.setIcon(ImageUtils.dye(translationIcon, currUIStyle.getButtonColor()));
        // 载入排序顺序
        currSortOrder = config.optInt(ConfigConstants.SORT_ORDER, SortMethod.ASCENDING);
        ascendingMenuItem.setSelected(currSortOrder == SortMethod.ASCENDING);
        descendingMenuItem.setSelected(currSortOrder == SortMethod.DESCENDING);
        updateMenuItemIcon(sortPopupMenu);

        // 载入歌曲目录
        JSONArray catalogJsonArray = config.optJSONArray(ConfigConstants.CATALOGS);
        if (catalogJsonArray != null) {
            for (int i = 0, len = catalogJsonArray.size(); i < len; i++) {
                String filePath = catalogJsonArray.getString(i);
                catalogs.add(new File(filePath));
            }
        }

        // 载入本地音乐列表
        loadLocalMusicList(config);

        // 载入上次播放歌曲，选中并加载
//            int musicIndex = config.getInt(ConfigConstants.MUSIC_PLAYING);
//            if (musicIndex > -1) {
//                musicList.setSelectedIndex(musicIndex);
//                currSong = musicIndex;
//                prepareToPlay((File) musicListModel.get(musicIndex), null);
//            }

        // 载入历史列表
        JSONArray historyJsonArray = config.optJSONArray(ConfigConstants.HISTORY);
        if (historyJsonArray != null) {
            for (int i = 0, len = historyJsonArray.size(); i < len; i++) {
                String s = historyJsonArray.getString(i);
                // 判断是否为文件路径
                if (!s.contains("\"")) {
                    AudioFile audioFile = new AudioFile(s);
                    globalExecutor.submit(() -> {
                        MusicUtils.fillAudioFileInfo(audioFile);
                        musicList.repaint();
                    });
                    historyModel.addElement(audioFile);
                } else {
                    JSONObject jsonObject = JSONObject.fromObject(s);
                    NetMusicInfo netMusicInfo = new NetMusicInfo();
                    netMusicInfo.setSource(jsonObject.optInt(ConfigConstants.NET_MUSIC_SOURCE));
                    netMusicInfo.setFormat(jsonObject.optString(ConfigConstants.NET_MUSIC_FORMAT));
                    netMusicInfo.setHash(jsonObject.optString(ConfigConstants.NET_MUSIC_HASH));
                    netMusicInfo.setId(jsonObject.optString(ConfigConstants.NET_MUSIC_ID));
                    netMusicInfo.setProgramId(jsonObject.optString(ConfigConstants.NET_MUSIC_PROGRAM_ID));
                    netMusicInfo.setName(jsonObject.optString(ConfigConstants.NET_MUSIC_NAME));
                    netMusicInfo.setArtist(jsonObject.optString(ConfigConstants.NET_MUSIC_ARTIST));
                    netMusicInfo.setArtistId(jsonObject.optString(ConfigConstants.NET_MUSIC_ARTIST_ID));
                    netMusicInfo.setAlbumName(jsonObject.optString(ConfigConstants.NET_MUSIC_ALBUM_NAME));
                    netMusicInfo.setAlbumId(jsonObject.optString(ConfigConstants.NET_MUSIC_ALBUM_ID));
                    netMusicInfo.setDuration(jsonObject.optDouble(ConfigConstants.NET_MUSIC_DURATION));
                    netMusicInfo.setMvId(jsonObject.optString(ConfigConstants.NET_MUSIC_MV_ID));
                    historyModel.addElement(netMusicInfo);
                }
            }
        }

        // 载入所有收藏列表
        loadCollectedMusicList(config);

        // 载入下载任务列表
        JSONArray tasksJsonArray = config.optJSONArray(ConfigConstants.TASKS);
        if (tasksJsonArray != null) {
            for (int i = 0, len = tasksJsonArray.size(); i < len; i++) {
                String s = tasksJsonArray.getString(i);

                JSONObject jsonObject = JSONObject.fromObject(s);
                int type = jsonObject.optInt(ConfigConstants.TASK_TYPE);
                String name = jsonObject.optString(ConfigConstants.TASK_NAME);
                String dest = jsonObject.optString(ConfigConstants.TASK_DEST);
                int status = jsonObject.optInt(ConfigConstants.TASK_STATUS);
                long finished = jsonObject.optLong(ConfigConstants.TASK_FINISHED);
                long total = jsonObject.optLong(ConfigConstants.TASK_TOTAL);

                Task task = null;
                if (type == TaskType.MUSIC) {
                    JSONObject jo = jsonObject.getJSONObject(ConfigConstants.TASK_MUSIC_INFO);
                    NetMusicInfo netMusicInfo = new NetMusicInfo();
                    netMusicInfo.setSource(jo.optInt(ConfigConstants.NET_MUSIC_SOURCE));
                    netMusicInfo.setFormat(jo.optString(ConfigConstants.NET_MUSIC_FORMAT));
                    netMusicInfo.setId(jo.optString(ConfigConstants.NET_MUSIC_ID));
                    netMusicInfo.setName(jo.optString(ConfigConstants.NET_MUSIC_NAME));
                    netMusicInfo.setArtist(jo.optString(ConfigConstants.NET_MUSIC_ARTIST));
                    task = new Task(downloadList, type, netMusicInfo, null);

                    task.setInvokeLater(() -> {
                        try {
                            String destLrcPath = SimplePath.DOWNLOAD_MUSIC_PATH + netMusicInfo.toSimpleLrcFileName();
                            // 写入歌曲信息
                            if (netMusicInfo.isMp3()) MusicUtils.writeMP3Info(dest, netMusicInfo);
                            // 自动下载歌词
                            if (isAutoDownloadLrc && StringUtils.isNotEmpty(netMusicInfo.getLrc()))
                                FileUtils.writeStr(netMusicInfo.getLrc(), destLrcPath, false);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    });
                } else if (type == TaskType.MV) {
                    JSONObject jo = jsonObject.getJSONObject(ConfigConstants.TASK_MV_INFO);
                    NetMvInfo netMvInfo = new NetMvInfo();
                    netMvInfo.setSource(jo.optInt(ConfigConstants.NET_MV_SOURCE));
                    netMvInfo.setType(jo.optInt(ConfigConstants.NET_MV_TYPE));
                    netMvInfo.setFormat(jo.optString(ConfigConstants.NET_MV_FORMAT));
                    netMvInfo.setId(jo.optString(ConfigConstants.NET_MV_ID));
                    netMvInfo.setBvid(jo.optString(ConfigConstants.NET_MV_BVID));
                    netMvInfo.setName(jo.optString(ConfigConstants.NET_MV_NAME));
                    netMvInfo.setArtist(jo.optString(ConfigConstants.NET_MV_ARTIST));
                    task = new Task(downloadList, type, null, netMvInfo);
                }
                // 考虑到下载路径可能更换，沿用任务原来的路径
                task.setDest(dest);
                task.setName(name);
                task.setStatus(status);
                task.setFinished(finished);
                task.setTotal(total);
                downloadListModel.addElement(task);
            }
        }

        // 载入播放队列
        JSONArray playQueueJsonArray = config.optJSONArray(ConfigConstants.PLAY_QUEUE);
        if (playQueueJsonArray != null) {
            for (int i = 0, len = playQueueJsonArray.size(); i < len; i++) {
                String s = playQueueJsonArray.getString(i);
                // 判断是否为文件路径
                if (!s.contains("\"")) {
                    AudioFile audioFile = new AudioFile(s);
                    globalExecutor.submit(() -> {
                        MusicUtils.fillAudioFileInfo(audioFile);
                        playQueue.repaint();
                    });
                    playQueueModel.addElement(audioFile);
                } else {
                    JSONObject jsonObject = JSONObject.fromObject(s);
                    NetMusicInfo netMusicInfo = new NetMusicInfo();
                    netMusicInfo.setSource(jsonObject.optInt(ConfigConstants.NET_MUSIC_SOURCE));
                    netMusicInfo.setFormat(jsonObject.optString(ConfigConstants.NET_MUSIC_FORMAT));
                    netMusicInfo.setHash(jsonObject.optString(ConfigConstants.NET_MUSIC_HASH));
                    netMusicInfo.setId(jsonObject.optString(ConfigConstants.NET_MUSIC_ID));
                    netMusicInfo.setProgramId(jsonObject.optString(ConfigConstants.NET_MUSIC_PROGRAM_ID));
                    netMusicInfo.setName(jsonObject.optString(ConfigConstants.NET_MUSIC_NAME));
                    netMusicInfo.setArtist(jsonObject.optString(ConfigConstants.NET_MUSIC_ARTIST));
                    netMusicInfo.setArtistId(jsonObject.optString(ConfigConstants.NET_MUSIC_ARTIST_ID));
                    netMusicInfo.setAlbumName(jsonObject.optString(ConfigConstants.NET_MUSIC_ALBUM_NAME));
                    netMusicInfo.setAlbumId(jsonObject.optString(ConfigConstants.NET_MUSIC_ALBUM_ID));
                    netMusicInfo.setDuration(jsonObject.optDouble(ConfigConstants.NET_MUSIC_DURATION));
                    netMusicInfo.setMvId(jsonObject.optString(ConfigConstants.NET_MUSIC_MV_ID));
                    playQueueModel.addElement(netMusicInfo);
                }
            }
        }

        // 载入在线音乐搜索历史关键词
        JSONArray historySearchJsonArray = config.optJSONArray(ConfigConstants.NET_MUSIC_HISTORY_SEARCH);
        if (historySearchJsonArray != null) {
            // 显示 “搜索历史” 标签
            if (!historySearchJsonArray.isEmpty()) {
                netMusicKeywordsPanel.add(netMusicHistorySearchPanel);
                // 更新 LAF，防止按钮样式不正确
                SwingUtilities.updateComponentTreeUI(netMusicClearHistorySearchButton);
            }
            for (int i = 0, len = historySearchJsonArray.size(); i < len; i++) {
                String keyword = historySearchJsonArray.getString(i);
                DialogButton b = new DialogButton(keyword);
                b.addActionListener(event -> {
                    searchTextField.requestFocus();
                    searchTextField.setText(b.getText());
                    netMusicClearInputButton.setVisible(true);
                    searchButton.doClick();
                    netLeftBox.remove(netMusicKeywordsPanelScrollPane);
                    netLeftBox.add(netMusicScrollPane);
                });
                // 右击删除历史
                b.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.getButton() == MouseEvent.BUTTON3) {
                            netMusicHistorySearchInnerPanel2.remove(b);
                            netMusicHistorySearchInnerPanel2.repaint();
                            if (netMusicHistorySearchInnerPanel2.getComponentCount() == 0) {
                                netMusicKeywordsPanel.remove(netMusicHistorySearchPanel);
                            }
                        }
                    }
                });
                b.setToolTipText(REMOVE_HISTORY_KEYWORD_TIP);
                b.setForeColor(currUIStyle.getButtonColor());
                netMusicHistorySearchInnerPanel2.add(b);
            }
            netMusicKeywordsPanel.repaint();
        }

        // 载入歌单搜索历史关键词
        historySearchJsonArray = config.optJSONArray(ConfigConstants.NET_PLAYLIST_HISTORY_SEARCH);
        if (historySearchJsonArray != null) {
            // 显示 “搜索历史” 标签
            if (!historySearchJsonArray.isEmpty()) {
                netPlaylistKeywordsPanel.add(netPlaylistHistorySearchPanel);
                // 更新 LAF，防止按钮样式不正确
                SwingUtilities.updateComponentTreeUI(netPlaylistClearHistorySearchButton);
            }
            for (int i = 0, len = historySearchJsonArray.size(); i < len; i++) {
                String keyword = historySearchJsonArray.getString(i);
                DialogButton b = new DialogButton(keyword);
                b.addActionListener(event -> {
                    netPlaylistSearchTextField.requestFocus();
                    netPlaylistSearchTextField.setText(b.getText());
                    netPlaylistClearInputButton.setVisible(true);
                    netPlaylistLeftBox.remove(netPlaylistKeywordsPanelScrollPane);
                    netPlaylistLeftBox.add(netPlaylistScrollPane);
                    netPlaylistSearchButton.doClick();
                });
                // 右击删除历史
                b.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.getButton() == MouseEvent.BUTTON3) {
                            netPlaylistHistorySearchInnerPanel2.remove(b);
                            netPlaylistHistorySearchInnerPanel2.repaint();
                            if (netPlaylistHistorySearchInnerPanel2.getComponentCount() == 0) {
                                netPlaylistKeywordsPanel.remove(netPlaylistHistorySearchPanel);
                                netPlaylistKeywordsPanel.repaint();
                            }
                        }
                    }
                });
                b.setToolTipText(REMOVE_HISTORY_KEYWORD_TIP);
                b.setForeColor(currUIStyle.getButtonColor());
                netPlaylistHistorySearchInnerPanel2.add(b);
            }
            netPlaylistKeywordsPanel.repaint();
        }

        // 载入专辑搜索历史关键词
        historySearchJsonArray = config.optJSONArray(ConfigConstants.NET_ALBUM_HISTORY_SEARCH);
        if (historySearchJsonArray != null) {
            // 显示 “搜索历史” 标签
            if (!historySearchJsonArray.isEmpty()) {
                netAlbumKeywordsPanel.add(netAlbumHistorySearchPanel);
                // 更新 LAF，防止按钮样式不正确
                SwingUtilities.updateComponentTreeUI(netAlbumClearHistorySearchButton);
            }
            for (int i = 0, len = historySearchJsonArray.size(); i < len; i++) {
                String keyword = historySearchJsonArray.getString(i);
                DialogButton b = new DialogButton(keyword);
                b.addActionListener(event -> {
                    netAlbumSearchTextField.requestFocus();
                    netAlbumSearchTextField.setText(b.getText());
                    netAlbumClearInputButton.setVisible(true);
                    netAlbumLeftBox.remove(netAlbumKeywordsPanelScrollPane);
                    netAlbumLeftBox.add(netAlbumScrollPane);
                    netAlbumSearchButton.doClick();
                });
                // 右击删除历史
                b.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.getButton() == MouseEvent.BUTTON3) {
                            netAlbumHistorySearchInnerPanel2.remove(b);
                            netAlbumHistorySearchInnerPanel2.repaint();
                            if (netAlbumHistorySearchInnerPanel2.getComponentCount() == 0) {
                                netAlbumKeywordsPanel.remove(netAlbumHistorySearchPanel);
                                netAlbumKeywordsPanel.repaint();
                            }
                        }
                    }
                });
                b.setToolTipText(REMOVE_HISTORY_KEYWORD_TIP);
                b.setForeColor(currUIStyle.getButtonColor());
                netAlbumHistorySearchInnerPanel2.add(b);
            }
            netAlbumKeywordsPanel.repaint();
        }

        // 载入歌手搜索历史关键词
        historySearchJsonArray = config.optJSONArray(ConfigConstants.NET_ARTIST_HISTORY_SEARCH);
        if (historySearchJsonArray != null) {
            // 显示 “搜索历史” 标签
            if (!historySearchJsonArray.isEmpty()) {
                netArtistKeywordsPanel.add(netArtistHistorySearchPanel);
                // 更新 LAF，防止按钮样式不正确
                SwingUtilities.updateComponentTreeUI(netArtistClearHistorySearchButton);
            }
            for (int i = 0, len = historySearchJsonArray.size(); i < len; i++) {
                String keyword = historySearchJsonArray.getString(i);
                DialogButton b = new DialogButton(keyword);
                b.addActionListener(event -> {
                    netArtistSearchTextField.requestFocus();
                    netArtistSearchTextField.setText(b.getText());
                    netArtistClearInputButton.setVisible(true);
                    netArtistLeftBox.remove(netArtistKeywordsPanelScrollPane);
                    netArtistLeftBox.add(netArtistScrollPane);
                    netArtistSearchButton.doClick();
                });
                // 右击删除历史
                b.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.getButton() == MouseEvent.BUTTON3) {
                            netArtistHistorySearchInnerPanel2.remove(b);
                            netArtistHistorySearchInnerPanel2.repaint();
                            if (netArtistHistorySearchInnerPanel2.getComponentCount() == 0) {
                                netArtistKeywordsPanel.remove(netArtistHistorySearchPanel);
                                netArtistKeywordsPanel.repaint();
                            }
                        }
                    }
                });
                b.setToolTipText(REMOVE_HISTORY_KEYWORD_TIP);
                b.setForeColor(currUIStyle.getButtonColor());
                netArtistHistorySearchInnerPanel2.add(b);
            }
            netArtistKeywordsPanel.repaint();
        }

        // 载入电台搜索历史关键词
        historySearchJsonArray = config.optJSONArray(ConfigConstants.NET_RADIO_HISTORY_SEARCH);
        if (historySearchJsonArray != null) {
            // 显示 “搜索历史” 标签
            if (!historySearchJsonArray.isEmpty()) {
                netRadioKeywordsPanel.add(netRadioHistorySearchPanel);
                // 更新 LAF，防止按钮样式不正确
                SwingUtilities.updateComponentTreeUI(netRadioClearHistorySearchButton);
            }
            for (int i = 0, len = historySearchJsonArray.size(); i < len; i++) {
                String keyword = historySearchJsonArray.getString(i);
                DialogButton b = new DialogButton(keyword);
                b.addActionListener(event -> {
                    netRadioSearchTextField.requestFocus();
                    netRadioSearchTextField.setText(b.getText());
                    netRadioClearInputButton.setVisible(true);
                    netRadioLeftBox.remove(netRadioKeywordsPanelScrollPane);
                    netRadioLeftBox.add(netRadioScrollPane);
                    netRadioSearchButton.doClick();
                });
                // 右击删除历史
                b.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.getButton() == MouseEvent.BUTTON3) {
                            netRadioHistorySearchInnerPanel2.remove(b);
                            netRadioHistorySearchInnerPanel2.repaint();
                            if (netRadioHistorySearchInnerPanel2.getComponentCount() == 0) {
                                netRadioKeywordsPanel.remove(netRadioHistorySearchPanel);
                                netRadioKeywordsPanel.repaint();
                            }
                        }
                    }
                });
                b.setToolTipText(REMOVE_HISTORY_KEYWORD_TIP);
                b.setForeColor(currUIStyle.getButtonColor());
                netRadioHistorySearchInnerPanel2.add(b);
            }
            netRadioKeywordsPanel.repaint();
        }

        // 载入 MV 搜索历史关键词
        historySearchJsonArray = config.optJSONArray(ConfigConstants.NET_MV_HISTORY_SEARCH);
        if (historySearchJsonArray != null) {
            // 显示 “搜索历史” 标签
            if (!historySearchJsonArray.isEmpty()) {
                netMvKeywordsPanel.add(netMvHistorySearchPanel);
                // 更新 LAF，防止按钮样式不正确
                SwingUtilities.updateComponentTreeUI(netMvClearHistorySearchButton);
            }
            for (int i = 0, len = historySearchJsonArray.size(); i < len; i++) {
                String keyword = historySearchJsonArray.getString(i);
                DialogButton b = new DialogButton(keyword);
                b.addActionListener(event -> {
                    netMvSearchTextField.requestFocus();
                    netMvSearchTextField.setText(b.getText());
                    netMvClearInputButton.setVisible(true);
                    netMvLeftBox.remove(netMvKeywordsPanelScrollPane);
                    netMvLeftBox.add(netMvScrollPane);
                    netMvSearchButton.doClick();
                });
                // 右击删除历史
                b.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.getButton() == MouseEvent.BUTTON3) {
                            netMvHistorySearchInnerPanel2.remove(b);
                            netMvHistorySearchInnerPanel2.repaint();
                            if (netMvHistorySearchInnerPanel2.getComponentCount() == 0) {
                                netMvKeywordsPanel.remove(netMvHistorySearchPanel);
                                netMvKeywordsPanel.repaint();
                            }
                        }
                    }
                });
                b.setToolTipText(REMOVE_HISTORY_KEYWORD_TIP);
                b.setForeColor(currUIStyle.getButtonColor());
                netMvHistorySearchInnerPanel2.add(b);
            }
            netMvKeywordsPanel.repaint();
        }

        // 载入用户搜索历史关键词
        historySearchJsonArray = config.optJSONArray(ConfigConstants.NET_USER_HISTORY_SEARCH);
        if (historySearchJsonArray != null) {
            // 显示 “搜索历史” 标签
            if (!historySearchJsonArray.isEmpty()) {
                netUserKeywordsPanel.add(netUserHistorySearchPanel);
                // 更新 LAF，防止按钮样式不正确
                SwingUtilities.updateComponentTreeUI(netUserClearHistorySearchButton);
            }
            for (int i = 0, len = historySearchJsonArray.size(); i < len; i++) {
                String keyword = historySearchJsonArray.getString(i);
                DialogButton b = new DialogButton(keyword);
                b.addActionListener(event -> {
                    netUserSearchTextField.requestFocus();
                    netUserSearchTextField.setText(b.getText());
                    netUserClearInputButton.setVisible(true);
                    netUserLeftBox.remove(netUserKeywordsPanelScrollPane);
                    netUserLeftBox.add(netUserScrollPane);
                    netUserSearchButton.doClick();
                });
                // 右击删除历史
                b.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.getButton() == MouseEvent.BUTTON3) {
                            netUserHistorySearchInnerPanel2.remove(b);
                            netUserHistorySearchInnerPanel2.repaint();
                            if (netUserHistorySearchInnerPanel2.getComponentCount() == 0) {
                                netUserKeywordsPanel.remove(netUserHistorySearchPanel);
                                netUserKeywordsPanel.repaint();
                            }
                        }
                    }
                });
                b.setToolTipText(REMOVE_HISTORY_KEYWORD_TIP);
                b.setForeColor(currUIStyle.getButtonColor());
                netUserHistorySearchInnerPanel2.add(b);
            }
            netUserKeywordsPanel.repaint();
        }

        // 开屏空列表提示
        if (musicListModel.isEmpty()) {
            leftBox.remove(musicScrollPane);
            leftBox.add(emptyHintPanel);
        }

        System.gc();
        return !config.isEmpty();
    }

    // 载入本地音乐列表
    public void loadLocalMusicList(JSONObject config) {
        JSONArray musicJsonArray = config.optJSONArray(ConfigConstants.MUSIC_LIST);
        if (musicJsonArray != null) {
            for (int i = 0, len = musicJsonArray.size(); i < len; i++) {
                String filePath = musicJsonArray.getString(i);
                AudioFile audioFile = new AudioFile(filePath);
                globalExecutor.submit(() -> {
                    MusicUtils.fillAudioFileInfo(audioFile);
                    musicList.repaint();
                });
                musicListModel.addElement(audioFile);
            }
        }
    }

    // 载入全部收藏列表
    public void loadCollectedMusicList(JSONObject config) {
        // 载入收藏歌曲列表
        JSONArray collectionJsonArray = config.optJSONArray(ConfigConstants.COLLECTION);
        if (collectionJsonArray != null) {
            for (int i = 0, len = collectionJsonArray.size(); i < len; i++) {
                String s = collectionJsonArray.getString(i);
                // 判断是否为文件路径
                if (!s.contains("\"")) {
                    AudioFile audioFile = new AudioFile(s);
                    globalExecutor.submit(() -> {
                        MusicUtils.fillAudioFileInfo(audioFile);
                        musicList.repaint();
                    });
                    collectionModel.addElement(audioFile);
                } else {
                    JSONObject jsonObject = JSONObject.fromObject(s);
                    NetMusicInfo netMusicInfo = new NetMusicInfo();
                    netMusicInfo.setSource(jsonObject.optInt(ConfigConstants.NET_MUSIC_SOURCE));
                    netMusicInfo.setFormat(jsonObject.optString(ConfigConstants.NET_MUSIC_FORMAT));
                    netMusicInfo.setHash(jsonObject.optString(ConfigConstants.NET_MUSIC_HASH));
                    netMusicInfo.setId(jsonObject.optString(ConfigConstants.NET_MUSIC_ID));
                    netMusicInfo.setProgramId(jsonObject.optString(ConfigConstants.NET_MUSIC_PROGRAM_ID));
                    netMusicInfo.setName(jsonObject.optString(ConfigConstants.NET_MUSIC_NAME));
                    netMusicInfo.setArtist(jsonObject.optString(ConfigConstants.NET_MUSIC_ARTIST));
                    netMusicInfo.setArtistId(jsonObject.optString(ConfigConstants.NET_MUSIC_ARTIST_ID));
                    netMusicInfo.setAlbumName(jsonObject.optString(ConfigConstants.NET_MUSIC_ALBUM_NAME));
                    netMusicInfo.setAlbumId(jsonObject.optString(ConfigConstants.NET_MUSIC_ALBUM_ID));
                    netMusicInfo.setDuration(jsonObject.optDouble(ConfigConstants.NET_MUSIC_DURATION));
                    netMusicInfo.setMvId(jsonObject.optString(ConfigConstants.NET_MUSIC_MV_ID));
                    collectionModel.addElement(netMusicInfo);
                }
            }
        }

        // 载入收藏歌单列表
        JSONArray playlistCollectionJsonArray = config.optJSONArray(ConfigConstants.PLAYLIST_COLLECTION);
        if (playlistCollectionJsonArray != null) {
            for (int i = 0, len = playlistCollectionJsonArray.size(); i < len; i++) {
                JSONObject jsonObject = playlistCollectionJsonArray.getJSONObject(i);

                NetPlaylistInfo netPlaylistInfo = new NetPlaylistInfo();
                netPlaylistInfo.setSource(jsonObject.optInt(ConfigConstants.NET_PLAYLIST_SOURCE));
                netPlaylistInfo.setId(jsonObject.optString(ConfigConstants.NET_PLAYLIST_ID));
                netPlaylistInfo.setName(jsonObject.optString(ConfigConstants.NET_PLAYLIST_NAME));
                netPlaylistInfo.setCreator(jsonObject.optString(ConfigConstants.NET_PLAYLIST_CREATOR));
                netPlaylistInfo.setCreatorId(jsonObject.optString(ConfigConstants.NET_PLAYLIST_CREATOR_ID));
                netPlaylistInfo.setCoverImgThumbUrl(jsonObject.optString(ConfigConstants.NET_PLAYLIST_COVER_IMG_THUMB_URL));
                netPlaylistInfo.setTrackCount(jsonObject.optInt(ConfigConstants.NET_PLAYLIST_TRACK_COUNT, -1));
                netPlaylistInfo.setPlayCount(jsonObject.optLong(ConfigConstants.NET_PLAYLIST_PLAY_COUNT, -1));

                playlistCollectionModel.addElement(netPlaylistInfo);
            }
        }

        // 载入收藏专辑列表
        JSONArray albumCollectionJsonArray = config.optJSONArray(ConfigConstants.ALBUM_COLLECTION);
        if (albumCollectionJsonArray != null) {
            for (int i = 0, len = albumCollectionJsonArray.size(); i < len; i++) {
                JSONObject jsonObject = albumCollectionJsonArray.getJSONObject(i);

                NetAlbumInfo netAlbumInfo = new NetAlbumInfo();
                netAlbumInfo.setSource(jsonObject.optInt(ConfigConstants.NET_ALBUM_SOURCE));
                netAlbumInfo.setId(jsonObject.optString(ConfigConstants.NET_ALBUM_ID));
                netAlbumInfo.setName(jsonObject.optString(ConfigConstants.NET_ALBUM_NAME));
                netAlbumInfo.setArtist(jsonObject.optString(ConfigConstants.NET_ALBUM_ARTIST));
                netAlbumInfo.setArtistId(jsonObject.optString(ConfigConstants.NET_ALBUM_ARTIST_ID));
                netAlbumInfo.setCoverImgThumbUrl(jsonObject.optString(ConfigConstants.NET_ALBUM_COVER_IMG_THUMB_URL));
                netAlbumInfo.setSongNum(jsonObject.optInt(ConfigConstants.NET_ALBUM_SONG_NUM, -1));
                netAlbumInfo.setPublishTime(jsonObject.optString(ConfigConstants.NET_ALBUM_PUBLISH_TIME));

                albumCollectionModel.addElement(netAlbumInfo);
            }
        }

        // 载入收藏歌手列表
        JSONArray artistCollectionJsonArray = config.optJSONArray(ConfigConstants.ARTIST_COLLECTION);
        if (artistCollectionJsonArray != null) {
            for (int i = 0, len = artistCollectionJsonArray.size(); i < len; i++) {
                JSONObject jsonObject = artistCollectionJsonArray.getJSONObject(i);

                NetArtistInfo netArtistInfo = new NetArtistInfo();
                netArtistInfo.setSource(jsonObject.optInt(ConfigConstants.NET_ARTIST_SOURCE));
                netArtistInfo.setOrganization(jsonObject.optBoolean(ConfigConstants.NET_ARTIST_IS_ORGANIZATION));
                netArtistInfo.setId(jsonObject.optString(ConfigConstants.NET_ARTIST_ID));
                netArtistInfo.setName(jsonObject.optString(ConfigConstants.NET_ARTIST_NAME));
                netArtistInfo.setCoverImgUrl(jsonObject.optString(ConfigConstants.NET_ARTIST_COVER_IMG_URL));
                netArtistInfo.setCoverImgThumbUrl(jsonObject.optString(ConfigConstants.NET_ARTIST_COVER_IMG_THUMB_URL));
                netArtistInfo.setSongNum(jsonObject.optInt(ConfigConstants.NET_ARTIST_SONG_NUM, -1));
                netArtistInfo.setAlbumNum(jsonObject.optInt(ConfigConstants.NET_ARTIST_ALBUM_NUM, -1));
                netArtistInfo.setMvNum(jsonObject.optInt(ConfigConstants.NET_ARTIST_MV_NUM, -1));

                artistCollectionModel.addElement(netArtistInfo);
            }
        }

        // 载入收藏电台列表
        JSONArray radioCollectionJsonArray = config.optJSONArray(ConfigConstants.RADIO_COLLECTION);
        if (radioCollectionJsonArray != null) {
            for (int i = 0, len = radioCollectionJsonArray.size(); i < len; i++) {
                JSONObject jsonObject = radioCollectionJsonArray.getJSONObject(i);

                NetRadioInfo netRadioInfo = new NetRadioInfo();
                netRadioInfo.setSource(jsonObject.optInt(ConfigConstants.NET_RADIO_SOURCE));
                netRadioInfo.setId(jsonObject.optString(ConfigConstants.NET_RADIO_ID));
                netRadioInfo.setName(jsonObject.optString(ConfigConstants.NET_RADIO_NAME));
                netRadioInfo.setDj(jsonObject.optString(ConfigConstants.NET_RADIO_DJ));
                netRadioInfo.setDjId(jsonObject.optString(ConfigConstants.NET_RADIO_DJ_ID));
                netRadioInfo.setCoverImgUrl(jsonObject.optString(ConfigConstants.NET_RADIO_COVER_IMG_URL));
                netRadioInfo.setCoverImgThumbUrl(jsonObject.optString(ConfigConstants.NET_RADIO_COVER_IMG_THUMB_URL));
                netRadioInfo.setCategory(jsonObject.optString(ConfigConstants.NET_RADIO_CATEGORY));
                netRadioInfo.setTrackCount(jsonObject.optInt(ConfigConstants.NET_RADIO_TRACK_COUNT, -1));
                netRadioInfo.setPlayCount(jsonObject.optLong(ConfigConstants.NET_RADIO_PLAY_COUNT, -1));

                radioCollectionModel.addElement(netRadioInfo);
            }
        }

        // 载入收藏 MV 列表
        JSONArray mvCollectionJsonArray = config.optJSONArray(ConfigConstants.MV_COLLECTION);
        if (mvCollectionJsonArray != null) {
            for (int i = 0, len = mvCollectionJsonArray.size(); i < len; i++) {
                JSONObject jsonObject = mvCollectionJsonArray.getJSONObject(i);

                NetMvInfo netMvInfo = new NetMvInfo();
                netMvInfo.setSource(jsonObject.optInt(ConfigConstants.NET_MV_SOURCE));
                netMvInfo.setType(jsonObject.optInt(ConfigConstants.NET_MV_TYPE));
                netMvInfo.setFormat(jsonObject.optString(ConfigConstants.NET_MV_FORMAT));
                netMvInfo.setId(jsonObject.optString(ConfigConstants.NET_MV_ID));
                netMvInfo.setBvid(jsonObject.optString(ConfigConstants.NET_MV_BVID));
                netMvInfo.setName(jsonObject.optString(ConfigConstants.NET_MV_NAME));
                netMvInfo.setArtist(jsonObject.optString(ConfigConstants.NET_MV_ARTIST));
                netMvInfo.setCreatorId(jsonObject.optString(ConfigConstants.NET_MV_CREATOR_ID));
                netMvInfo.setDuration(jsonObject.optDouble(ConfigConstants.NET_MV_DURATION));
                netMvInfo.setPubTime(jsonObject.optString(ConfigConstants.NET_MV_PUB_TIME));
                netMvInfo.setCoverImgUrl(jsonObject.optString(ConfigConstants.NET_MV_COVER_IMG_URL));
                netMvInfo.setPlayCount(jsonObject.optLong(ConfigConstants.NET_MV_PLAY_COUNT, -1));

                mvCollectionModel.addElement(netMvInfo);
            }
        }

        // 载入收藏榜单列表
        JSONArray rankingCollectionJsonArray = config.optJSONArray(ConfigConstants.RANKING_COLLECTION);
        if (rankingCollectionJsonArray != null) {
            for (int i = 0, len = rankingCollectionJsonArray.size(); i < len; i++) {
                JSONObject jsonObject = rankingCollectionJsonArray.getJSONObject(i);

                NetRankingInfo netRankingInfo = new NetRankingInfo();
                netRankingInfo.setSource(jsonObject.optInt(ConfigConstants.NET_RANKING_SOURCE));
                netRankingInfo.setId(jsonObject.optString(ConfigConstants.NET_RANKING_ID));
                netRankingInfo.setName(jsonObject.optString(ConfigConstants.NET_RANKING_NAME));
                netRankingInfo.setPlayCount(jsonObject.optLong(ConfigConstants.NET_RANKING_PLAY_COUNT, -1));
                netRankingInfo.setDescription(jsonObject.optString(ConfigConstants.NET_RANKING_DESCRIPTION));
                netRankingInfo.setUpdateFre(jsonObject.optString(ConfigConstants.NET_RANKING_UPDATE_FRE));
                netRankingInfo.setUpdateTime(jsonObject.optString(ConfigConstants.NET_RANKING_UPDATE_TIME));
                netRankingInfo.setCoverImgUrl(jsonObject.optString(ConfigConstants.NET_RANKING_COVER_IMG_URL));

                rankingCollectionModel.addElement(netRankingInfo);
            }
        }

        // 载入收藏用户列表
        JSONArray userCollectionJsonArray = config.optJSONArray(ConfigConstants.USER_COLLECTION);
        if (userCollectionJsonArray != null) {
            for (int i = 0, len = userCollectionJsonArray.size(); i < len; i++) {
                JSONObject jsonObject = userCollectionJsonArray.getJSONObject(i);

                NetUserInfo netUserInfo = new NetUserInfo();
                netUserInfo.setSource(jsonObject.optInt(ConfigConstants.NET_USER_SOURCE));
                netUserInfo.setId(jsonObject.optString(ConfigConstants.NET_USER_ID));
                netUserInfo.setName(jsonObject.optString(ConfigConstants.NET_USER_NAME));
                netUserInfo.setGender(jsonObject.optString(ConfigConstants.NET_USER_GENDER));
                netUserInfo.setAvatarUrl(jsonObject.optString(ConfigConstants.NET_USER_AVATAR_URL));
                netUserInfo.setAvatarThumbUrl(jsonObject.optString(ConfigConstants.NET_USER_AVATAR_THUMB_URL));
                netUserInfo.setFollow(jsonObject.optInt(ConfigConstants.NET_USER_FOLLOW, -1));
                netUserInfo.setFollowed(jsonObject.optInt(ConfigConstants.NET_USER_FOLLOWED, -1));
                netUserInfo.setPlaylistCount(jsonObject.optInt(ConfigConstants.NET_USER_PLAYLIST_COUNT, -1));
                netUserInfo.setRadioCount(jsonObject.optInt(ConfigConstants.NET_USER_RADIO_COUNT, -1));
                netUserInfo.setProgramCount(jsonObject.optInt(ConfigConstants.NET_USER_PROGRAM_COUNT, -1));

                userCollectionModel.addElement(netUserInfo);
            }
        }
    }

    // 保存配置
    void saveConfig() throws IOException {
        JSONObject config = new JSONObject();
        // 存入自定义风格
        JSONArray styleArray = new JSONArray();
        for (UIStyle style : styles) {
            if (style.isCustom()) {
                JSONObject styleObject = new JSONObject();
                styleObject.put("name", style.getStyleName());
                styleObject.put("imgPath", style.getStyleImgPath());
                styleObject.put("bgColor", ColorUtils.colorToRGBString(style.getBgColor()));
                styleObject.put("foreColor", ColorUtils.colorToRGBString(style.getForeColor()));
                styleObject.put("selectedColor", ColorUtils.colorToRGBString(style.getSelectedColor()));
                styleObject.put("lrcColor", ColorUtils.colorToRGBString(style.getLrcColor()));
                styleObject.put("highlightColor", ColorUtils.colorToRGBString(style.getHighlightColor()));
                styleObject.put("labelColor", ColorUtils.colorToRGBString(style.getLabelColor()));
                styleObject.put("timeBarColor", ColorUtils.colorToRGBString(style.getTimeBarColor()));
                styleObject.put("buttonColor", ColorUtils.colorToRGBString(style.getButtonColor()));
                styleObject.put("scrollBarColor", ColorUtils.colorToRGBString(style.getScrollBarColor()));
                styleObject.put("sliderColor", ColorUtils.colorToRGBString(style.getSliderColor()));
                styleObject.put("spectrumColor", ColorUtils.colorToRGBString(style.getSpectrumColor()));
                styleObject.put("menuItemColor", ColorUtils.colorToRGBString(style.getMenuItemColor()));
                styleArray.add(styleObject);
            }
        }
        config.put(ConfigConstants.CUSTOM_UI_STYLES, styleArray);
        // 当前 UI 风格索引
        config.put(ConfigConstants.CURR_UI_STYLE, ListUtils.search(styles, currUIStyle));
        // 存入快捷键
        config.put(ConfigConstants.KEY_ENABLED, keyEnabled);
        config.put(ConfigConstants.PLAY_OR_PAUSE_KEYS, KeyUtils.codesToStr(playOrPauseKeys));
        config.put(ConfigConstants.PLAY_LAST_KEYS, KeyUtils.codesToStr(playLastKeys));
        config.put(ConfigConstants.PLAY_NEXT_KEYS, KeyUtils.codesToStr(playNextKeys));
        config.put(ConfigConstants.BACKWARD_KEYS, KeyUtils.codesToStr(backwardKeys));
        config.put(ConfigConstants.FORWARD_KEYS, KeyUtils.codesToStr(forwardKeys));
        config.put(ConfigConstants.VIDEO_FULL_SCREEN_KEYS, KeyUtils.codesToStr(videoFullScreenKeys));
        // 存入是否自动更新
        config.put(ConfigConstants.AUTO_UPDATE, autoUpdate);
        // 存入关闭窗口操作
        config.put(ConfigConstants.CLOSE_WINDOW_OPTION, currCloseWindowOption);
        // 存入窗口大小
        config.put(ConfigConstants.WINDOW_SIZE, windowSize);
        // 存入播放视频是否隐藏主界面
        config.put(ConfigConstants.VIDEO_ONLY, videoOnly);
        // 存入歌曲下载路径
        config.put(ConfigConstants.MUSIC_DOWN_PATH, SimplePath.DOWNLOAD_MUSIC_PATH);
        // 存入 MV 下载路径
        config.put(ConfigConstants.MV_DOWN_PATH, SimplePath.DOWNLOAD_MV_PATH);
        // 存入缓存路径
        config.put(ConfigConstants.CACHE_PATH, SimplePath.CACHE_PATH);
        // 存入最大缓存大小
        config.put(ConfigConstants.MAX_CACHE_SIZE, maxCacheSize);
        // 存入最大播放历史数量
        config.put(ConfigConstants.MAX_HISTORY_COUNT, maxHistoryCount);
        // 存入最大搜索历史数量
        config.put(ConfigConstants.MAX_SEARCH_HISTORY_COUNT, maxSearchHistoryCount);
        // 存入同时下载的最大任务数
        config.put(ConfigConstants.MAX_CONCURRENT_TASK_COUNT, ((ThreadPoolExecutor) GlobalExecutors.downloadExecutor).getCorePoolSize());
        // 存入当前播放模式
        config.put(ConfigConstants.PLAY_MODE, currPlayMode);
        // 存入快进/快退时间(索引)
//        config.put(ConfigConstants.FOB_TIME, )
        // 存入是否显示频谱
        config.put(ConfigConstants.SHOW_SPECTRUM, showSpectrum);
        // 存入是否高斯模糊
        config.put(ConfigConstants.GS_ON, gsOn);
        // 存入是否暗化
        config.put(ConfigConstants.DARKER_ON, darkerOn);
        // 存入模糊类型
        config.put(ConfigConstants.BLUR_TYPE, blurType);
        // 存入是否自动下载歌词
        config.put(ConfigConstants.AUTO_DOWNLOAD_LYRIC, isAutoDownloadLrc);
        // 存入歌词偏移
        config.put(ConfigConstants.LYRIC_OFFSET, lrcOffset);
        // 存入是否显示桌面歌词
        config.put(ConfigConstants.SHOW_DESKTOP_LYRIC, showDesktopLyric);
        // 存入是否锁定桌面歌词
        config.put(ConfigConstants.LOCK_DESKTOP_LYRIC, desktopLyricLocked);
        // 存入桌面歌词坐标
        config.put(ConfigConstants.DESKTOP_LYRIC_X, desktopLyricX);
        config.put(ConfigConstants.DESKTOP_LYRIC_Y, desktopLyricY);
        // 存入是否桌面歌词置顶
        config.put(ConfigConstants.DESKTOP_LYRIC_ON_TOP, desktopLyricOnTop);
        // 存入桌面歌词透明度
        config.put(ConfigConstants.DESKTOP_LYRIC_ALPHA, desktopLyricAlpha);
        // 存入快进/快退时间
        config.put(ConfigConstants.FOB_TIME, forwardOrBackwardTime);
        // 存入视频快进/快退时间
        config.put(ConfigConstants.VIDEO_FOB_TIME, videoForwardOrBackwardTime);
        // 存入速率
        config.put(ConfigConstants.RATE, currRate);
        // 存入视频速率
        config.put(ConfigConstants.VIDEO_RATE, currVideoRate);
        // 存入频谱样式
        config.put(ConfigConstants.SPECTRUM_STYLE, currSpecStyle);
        // 存入均衡
        config.put(ConfigConstants.BALANCE, currBalance);
        // 存入是否静音
        config.put(ConfigConstants.MUTE, isMute);
        // 存入音量
        config.put(ConfigConstants.VOLUME, volumeSlider.getValue());
        // 存入音效名称
        config.put(ConfigConstants.SOUND_EFFECT_NAME, currSoundEffectName);
        // 存入均衡数据
        config.put(ConfigConstants.EQUALIZER_DATA, ed);
        // 存入迷你窗口位置
        config.put(ConfigConstants.MINIX, miniX);
        config.put(ConfigConstants.MINIY, miniY);
        // 存入中文类型
        config.put(ConfigConstants.CHINESE_TYPE, currChineseType);
        // 存入日文类型
        config.put(ConfigConstants.JAPANESE_TYPE, currJapaneseType);
        // 存入歌词类型
        config.put(ConfigConstants.LYRIC_TYPE, currLrcType);
        // 存入排序顺序
        config.put(ConfigConstants.SORT_ORDER, currSortOrder);
        // 存入当前所有歌曲目录
        JSONArray catalogJsonArray = new JSONArray();
        for (int i = 0, len = catalogs.size(); i < len; i++) {
            File dir = catalogs.get(i);
            catalogJsonArray.add(dir.getAbsolutePath());
        }
        config.put(ConfigConstants.CATALOGS, catalogJsonArray);
        // 存入当前播放列表(文件路径)
        saveLocalMusicList(config);
        // 存入当前播放的歌曲索引
        config.put(ConfigConstants.MUSIC_PLAYING, currSong);
        // 存入当前历史列表
        JSONArray historyJsonArray = new JSONArray();
        for (int i = 0, len = historyModel.getSize(); i < len; i++) {
            Object o = historyModel.get(i);
            if (o instanceof File) {
                File file = (File) o;
                historyJsonArray.add(file.getPath());
            } else if (o instanceof NetMusicInfo) {
                NetMusicInfo netMusicInfo = (NetMusicInfo) o;
                JSONObject jsonObject = new JSONObject();
                jsonObject.put(ConfigConstants.NET_MUSIC_SOURCE, netMusicInfo.getSource());
                jsonObject.put(ConfigConstants.NET_MUSIC_FORMAT, netMusicInfo.getFormat());
                if (netMusicInfo.hasHash()) jsonObject.put(ConfigConstants.NET_MUSIC_HASH, netMusicInfo.getHash());
                jsonObject.put(ConfigConstants.NET_MUSIC_ID, netMusicInfo.getId());
                jsonObject.put(ConfigConstants.NET_MUSIC_PROGRAM_ID, netMusicInfo.getProgramId());
                jsonObject.put(ConfigConstants.NET_MUSIC_NAME, netMusicInfo.getName());
                jsonObject.put(ConfigConstants.NET_MUSIC_ARTIST, netMusicInfo.getArtist());
                jsonObject.put(ConfigConstants.NET_MUSIC_ARTIST_ID, netMusicInfo.getArtistId());
                jsonObject.put(ConfigConstants.NET_MUSIC_ALBUM_NAME, netMusicInfo.getAlbumName());
                jsonObject.put(ConfigConstants.NET_MUSIC_ALBUM_ID, netMusicInfo.getAlbumId());
                if (netMusicInfo.hasDuration())
                    jsonObject.put(ConfigConstants.NET_MUSIC_DURATION, netMusicInfo.getDuration());
                jsonObject.put(ConfigConstants.NET_MUSIC_MV_ID, netMusicInfo.getMvId());
                historyJsonArray.add(jsonObject);
            }
        }
        config.put(ConfigConstants.HISTORY, historyJsonArray);

        // 存入全部收藏列表
        saveCollectedMusicList(config);

        // 存入下载任务列表
        JSONArray tasksJsonArray = new JSONArray();
        for (int i = 0, len = downloadListModel.getSize(); i < len; i++) {
            Task task = downloadListModel.get(i);
            // 保存任务时，任务还在运行，先中断
            if (task.isProcessing()) task.stop();
            JSONObject jsonObject = new JSONObject();
            jsonObject.put(ConfigConstants.TASK_URL, task.getUrl());
            jsonObject.put(ConfigConstants.TASK_DEST, task.getDest());
            jsonObject.put(ConfigConstants.TASK_TYPE, task.getType());
            jsonObject.put(ConfigConstants.TASK_NAME, task.getName());
            jsonObject.put(ConfigConstants.TASK_STATUS, task.getStatus());
            jsonObject.put(ConfigConstants.TASK_FINISHED, task.getFinished());
            jsonObject.put(ConfigConstants.TASK_TOTAL, task.getTotal());
            // 如果是音乐下载任务，需要额外记录音乐信息
            if (task.isMusic()) {
                NetMusicInfo netMusicInfo = task.getNetMusicInfo();
                JSONObject jo = new JSONObject();
                jo.put(ConfigConstants.NET_MUSIC_SOURCE, netMusicInfo.getSource());
                jo.put(ConfigConstants.NET_MUSIC_FORMAT, netMusicInfo.getFormat());
                jo.put(ConfigConstants.NET_MUSIC_ID, netMusicInfo.getId());
                jo.put(ConfigConstants.NET_MUSIC_NAME, netMusicInfo.getName());
                jo.put(ConfigConstants.NET_MUSIC_ARTIST, netMusicInfo.getArtist());
                jsonObject.put(ConfigConstants.TASK_MUSIC_INFO, jo);
            }
            // 如果是 MV 下载任务，需要额外记录 MV 信息
            else if (task.getType() == TaskType.MV) {
                NetMvInfo netMvInfo = task.getNetMvInfo();
                JSONObject jo = new JSONObject();
                jo.put(ConfigConstants.NET_MV_SOURCE, netMvInfo.getSource());
                jo.put(ConfigConstants.NET_MV_TYPE, netMvInfo.getType());
                jo.put(ConfigConstants.NET_MV_FORMAT, netMvInfo.getFormat());
                jo.put(ConfigConstants.NET_MV_ID, netMvInfo.getId());
                jo.put(ConfigConstants.NET_MV_BVID, netMvInfo.getBvid());
                jo.put(ConfigConstants.NET_MV_NAME, netMvInfo.getName());
                jo.put(ConfigConstants.NET_MV_ARTIST, netMvInfo.getArtist());
                jsonObject.put(ConfigConstants.TASK_MV_INFO, jo);
            }
            tasksJsonArray.add(jsonObject);
        }
        config.put(ConfigConstants.TASKS, tasksJsonArray);

        // 存入播放队列
        JSONArray playQueueJsonArray = new JSONArray();
        for (int i = 0, len = playQueueModel.getSize(); i < len; i++) {
            Object o = playQueueModel.get(i);
            if (o instanceof File) {
                File file = (File) o;
                playQueueJsonArray.add(file.getPath());
            } else if (o instanceof NetMusicInfo) {
                NetMusicInfo netMusicInfo = (NetMusicInfo) o;
                JSONObject jsonObject = new JSONObject();
                jsonObject.put(ConfigConstants.NET_MUSIC_SOURCE, netMusicInfo.getSource());
                jsonObject.put(ConfigConstants.NET_MUSIC_FORMAT, netMusicInfo.getFormat());
                if (netMusicInfo.hasHash()) jsonObject.put(ConfigConstants.NET_MUSIC_HASH, netMusicInfo.getHash());
                jsonObject.put(ConfigConstants.NET_MUSIC_ID, netMusicInfo.getId());
                jsonObject.put(ConfigConstants.NET_MUSIC_PROGRAM_ID, netMusicInfo.getProgramId());
                jsonObject.put(ConfigConstants.NET_MUSIC_NAME, netMusicInfo.getName());
                jsonObject.put(ConfigConstants.NET_MUSIC_ARTIST, netMusicInfo.getArtist());
                jsonObject.put(ConfigConstants.NET_MUSIC_ARTIST_ID, netMusicInfo.getArtistId());
                jsonObject.put(ConfigConstants.NET_MUSIC_ALBUM_NAME, netMusicInfo.getAlbumName());
                jsonObject.put(ConfigConstants.NET_MUSIC_ALBUM_ID, netMusicInfo.getAlbumId());
                if (netMusicInfo.hasDuration())
                    jsonObject.put(ConfigConstants.NET_MUSIC_DURATION, netMusicInfo.getDuration());
                jsonObject.put(ConfigConstants.NET_MUSIC_MV_ID, netMusicInfo.getMvId());
                playQueueJsonArray.add(jsonObject);
            }
        }
        config.put(ConfigConstants.PLAY_QUEUE, playQueueJsonArray);

        // 存入搜索历史关键词
        JSONArray historySearchJsonArray = new JSONArray();
        Component[] components = netMusicHistorySearchInnerPanel2.getComponents();
        for (Component c : components) {
            DialogButton b = (DialogButton) c;
            historySearchJsonArray.add(b.getText());
        }
        config.put(ConfigConstants.NET_MUSIC_HISTORY_SEARCH, historySearchJsonArray);

        // 存入歌单搜索历史关键词
        historySearchJsonArray.clear();
        components = netPlaylistHistorySearchInnerPanel2.getComponents();
        for (Component c : components) {
            DialogButton b = (DialogButton) c;
            historySearchJsonArray.add(b.getText());
        }
        config.put(ConfigConstants.NET_PLAYLIST_HISTORY_SEARCH, historySearchJsonArray);

        // 存入专辑搜索历史关键词
        historySearchJsonArray.clear();
        components = netAlbumHistorySearchInnerPanel2.getComponents();
        for (Component c : components) {
            DialogButton b = (DialogButton) c;
            historySearchJsonArray.add(b.getText());
        }
        config.put(ConfigConstants.NET_ALBUM_HISTORY_SEARCH, historySearchJsonArray);

        // 存入歌手搜索历史关键词
        historySearchJsonArray.clear();
        components = netArtistHistorySearchInnerPanel2.getComponents();
        for (Component c : components) {
            DialogButton b = (DialogButton) c;
            historySearchJsonArray.add(b.getText());
        }
        config.put(ConfigConstants.NET_ARTIST_HISTORY_SEARCH, historySearchJsonArray);

        // 存入电台搜索历史关键词
        historySearchJsonArray.clear();
        components = netRadioHistorySearchInnerPanel2.getComponents();
        for (Component c : components) {
            DialogButton b = (DialogButton) c;
            historySearchJsonArray.add(b.getText());
        }
        config.put(ConfigConstants.NET_RADIO_HISTORY_SEARCH, historySearchJsonArray);

        // 存入 MV 搜索历史关键词
        historySearchJsonArray.clear();
        components = netMvHistorySearchInnerPanel2.getComponents();
        for (Component c : components) {
            DialogButton b = (DialogButton) c;
            historySearchJsonArray.add(b.getText());
        }
        config.put(ConfigConstants.NET_MV_HISTORY_SEARCH, historySearchJsonArray);

        // 存入用户搜索历史关键词
        historySearchJsonArray.clear();
        components = netUserHistorySearchInnerPanel2.getComponents();
        for (Component c : components) {
            DialogButton b = (DialogButton) c;
            historySearchJsonArray.add(b.getText());
        }
        config.put(ConfigConstants.NET_USER_HISTORY_SEARCH, historySearchJsonArray);

        JsonUtils.saveJson(config, ConfigConstants.fileName);
    }

    // 存入本地音乐列表
    public void saveLocalMusicList(JSONObject config) {
        JSONArray musicJsonArray = new JSONArray();
        for (int i = 0, len = musicListModel.getSize(); i < len; i++) {
            File file = (File) musicListModel.get(i);
            musicJsonArray.add(file.getPath());
        }
        config.put(ConfigConstants.MUSIC_LIST, musicJsonArray);
    }

    // 存入全部收藏列表
    public void saveCollectedMusicList(JSONObject config) {
        // 存入收藏歌曲列表
        JSONArray collectionJsonArray = new JSONArray();
        for (int i = 0, len = collectionModel.getSize(); i < len; i++) {
            Object o = collectionModel.get(i);
            if (o instanceof File) {
                File file = (File) o;
                collectionJsonArray.add(file.getPath());
            } else if (o instanceof NetMusicInfo) {
                NetMusicInfo netMusicInfo = (NetMusicInfo) o;
                JSONObject jsonObject = new JSONObject();
                jsonObject.put(ConfigConstants.NET_MUSIC_SOURCE, netMusicInfo.getSource());
                jsonObject.put(ConfigConstants.NET_MUSIC_FORMAT, netMusicInfo.getFormat());
                if (netMusicInfo.hasHash()) jsonObject.put(ConfigConstants.NET_MUSIC_HASH, netMusicInfo.getHash());
                jsonObject.put(ConfigConstants.NET_MUSIC_ID, netMusicInfo.getId());
                jsonObject.put(ConfigConstants.NET_MUSIC_PROGRAM_ID, netMusicInfo.getProgramId());
                jsonObject.put(ConfigConstants.NET_MUSIC_NAME, netMusicInfo.getName());
                jsonObject.put(ConfigConstants.NET_MUSIC_ARTIST, netMusicInfo.getArtist());
                jsonObject.put(ConfigConstants.NET_MUSIC_ARTIST_ID, netMusicInfo.getArtistId());
                jsonObject.put(ConfigConstants.NET_MUSIC_ALBUM_NAME, netMusicInfo.getAlbumName());
                jsonObject.put(ConfigConstants.NET_MUSIC_ALBUM_ID, netMusicInfo.getAlbumId());
                if (netMusicInfo.hasDuration())
                    jsonObject.put(ConfigConstants.NET_MUSIC_DURATION, netMusicInfo.getDuration());
                jsonObject.put(ConfigConstants.NET_MUSIC_MV_ID, netMusicInfo.getMvId());
                collectionJsonArray.add(jsonObject);
            }
        }
        config.put(ConfigConstants.COLLECTION, collectionJsonArray);

        // 存入收藏歌单列表
        JSONArray playlistCollectionJsonArray = new JSONArray();
        for (int i = 0, len = playlistCollectionModel.getSize(); i < len; i++) {
            NetPlaylistInfo netPlaylistInfo = (NetPlaylistInfo) playlistCollectionModel.get(i);

            JSONObject jsonObject = new JSONObject();
            jsonObject.put(ConfigConstants.NET_PLAYLIST_SOURCE, netPlaylistInfo.getSource());
            jsonObject.put(ConfigConstants.NET_PLAYLIST_ID, netPlaylistInfo.getId());
            jsonObject.put(ConfigConstants.NET_PLAYLIST_NAME, netPlaylistInfo.getName());
            jsonObject.put(ConfigConstants.NET_PLAYLIST_CREATOR, netPlaylistInfo.getCreator());
            jsonObject.put(ConfigConstants.NET_PLAYLIST_CREATOR_ID, netPlaylistInfo.getCreatorId());
            jsonObject.put(ConfigConstants.NET_PLAYLIST_COVER_IMG_THUMB_URL, netPlaylistInfo.getCoverImgThumbUrl());
            jsonObject.put(ConfigConstants.NET_PLAYLIST_TRACK_COUNT, netPlaylistInfo.getTrackCount());
            jsonObject.put(ConfigConstants.NET_PLAYLIST_PLAY_COUNT, netPlaylistInfo.getPlayCount());
            playlistCollectionJsonArray.add(jsonObject);
        }
        config.put(ConfigConstants.PLAYLIST_COLLECTION, playlistCollectionJsonArray);

        // 存入收藏专辑列表
        JSONArray albumCollectionJsonArray = new JSONArray();
        for (int i = 0, len = albumCollectionModel.getSize(); i < len; i++) {
            NetAlbumInfo netAlbumInfo = (NetAlbumInfo) albumCollectionModel.get(i);

            JSONObject jsonObject = new JSONObject();
            jsonObject.put(ConfigConstants.NET_ALBUM_SOURCE, netAlbumInfo.getSource());
            jsonObject.put(ConfigConstants.NET_ALBUM_ID, netAlbumInfo.getId());
            jsonObject.put(ConfigConstants.NET_ALBUM_NAME, netAlbumInfo.getName());
            jsonObject.put(ConfigConstants.NET_ALBUM_ARTIST, netAlbumInfo.getArtist());
            jsonObject.put(ConfigConstants.NET_ALBUM_ARTIST_ID, netAlbumInfo.getArtistId());
            jsonObject.put(ConfigConstants.NET_ALBUM_COVER_IMG_THUMB_URL, netAlbumInfo.getCoverImgThumbUrl());
            jsonObject.put(ConfigConstants.NET_ALBUM_SONG_NUM, netAlbumInfo.getSongNum());
            jsonObject.put(ConfigConstants.NET_ALBUM_PUBLISH_TIME, netAlbumInfo.getPublishTime());
            albumCollectionJsonArray.add(jsonObject);
        }
        config.put(ConfigConstants.ALBUM_COLLECTION, albumCollectionJsonArray);

        // 存入收藏歌手列表
        JSONArray artistCollectionJsonArray = new JSONArray();
        for (int i = 0, len = artistCollectionModel.getSize(); i < len; i++) {
            NetArtistInfo netArtistInfo = (NetArtistInfo) artistCollectionModel.get(i);

            JSONObject jsonObject = new JSONObject();
            jsonObject.put(ConfigConstants.NET_ARTIST_SOURCE, netArtistInfo.getSource());
            jsonObject.put(ConfigConstants.NET_ARTIST_IS_ORGANIZATION, netArtistInfo.isOrganization());
            jsonObject.put(ConfigConstants.NET_ARTIST_ID, netArtistInfo.getId());
            jsonObject.put(ConfigConstants.NET_ARTIST_NAME, netArtistInfo.getName());
            jsonObject.put(ConfigConstants.NET_ARTIST_COVER_IMG_URL, netArtistInfo.getCoverImgUrl());
            jsonObject.put(ConfigConstants.NET_ARTIST_COVER_IMG_THUMB_URL, netArtistInfo.getCoverImgThumbUrl());
            jsonObject.put(ConfigConstants.NET_ARTIST_SONG_NUM, netArtistInfo.getSongNum());
            jsonObject.put(ConfigConstants.NET_ARTIST_ALBUM_NUM, netArtistInfo.getAlbumNum());
            jsonObject.put(ConfigConstants.NET_ARTIST_MV_NUM, netArtistInfo.getMvNum());
            artistCollectionJsonArray.add(jsonObject);
        }
        config.put(ConfigConstants.ARTIST_COLLECTION, artistCollectionJsonArray);

        // 存入收藏电台列表
        JSONArray radioCollectionJsonArray = new JSONArray();
        for (int i = 0, len = radioCollectionModel.getSize(); i < len; i++) {
            NetRadioInfo netRadioInfo = (NetRadioInfo) radioCollectionModel.get(i);

            JSONObject jsonObject = new JSONObject();
            jsonObject.put(ConfigConstants.NET_RADIO_SOURCE, netRadioInfo.getSource());
            jsonObject.put(ConfigConstants.NET_RADIO_ID, netRadioInfo.getId());
            jsonObject.put(ConfigConstants.NET_RADIO_NAME, netRadioInfo.getName());
            jsonObject.put(ConfigConstants.NET_RADIO_DJ, netRadioInfo.getDj());
            jsonObject.put(ConfigConstants.NET_RADIO_DJ_ID, netRadioInfo.getDjId());
            jsonObject.put(ConfigConstants.NET_RADIO_COVER_IMG_URL, netRadioInfo.getCoverImgUrl());
            jsonObject.put(ConfigConstants.NET_RADIO_COVER_IMG_THUMB_URL, netRadioInfo.getCoverImgThumbUrl());
            jsonObject.put(ConfigConstants.NET_RADIO_CATEGORY, netRadioInfo.getCategory());
            jsonObject.put(ConfigConstants.NET_RADIO_TRACK_COUNT, netRadioInfo.getTrackCount());
            jsonObject.put(ConfigConstants.NET_RADIO_PLAY_COUNT, netRadioInfo.getPlayCount());
            radioCollectionJsonArray.add(jsonObject);
        }
        config.put(ConfigConstants.RADIO_COLLECTION, radioCollectionJsonArray);

        // 存入收藏 MV 列表
        JSONArray mvCollectionJsonArray = new JSONArray();
        for (int i = 0, len = mvCollectionModel.getSize(); i < len; i++) {
            NetMvInfo netMvInfo = (NetMvInfo) mvCollectionModel.get(i);

            JSONObject jsonObject = new JSONObject();
            jsonObject.put(ConfigConstants.NET_MV_SOURCE, netMvInfo.getSource());
            jsonObject.put(ConfigConstants.NET_MV_TYPE, netMvInfo.getType());
            jsonObject.put(ConfigConstants.NET_MV_FORMAT, netMvInfo.getFormat());
            jsonObject.put(ConfigConstants.NET_MV_ID, netMvInfo.getId());
            jsonObject.put(ConfigConstants.NET_MV_BVID, netMvInfo.getBvid());
            jsonObject.put(ConfigConstants.NET_MV_NAME, netMvInfo.getName());
            jsonObject.put(ConfigConstants.NET_MV_ARTIST, netMvInfo.getArtist());
            jsonObject.put(ConfigConstants.NET_MV_CREATOR_ID, netMvInfo.getCreatorId());
            if (netMvInfo.hasDuration()) jsonObject.put(ConfigConstants.NET_MV_DURATION, netMvInfo.getDuration());
            jsonObject.put(ConfigConstants.NET_MV_PUB_TIME, netMvInfo.getPubTime());
            jsonObject.put(ConfigConstants.NET_MV_COVER_IMG_URL, netMvInfo.getCoverImgUrl());
            jsonObject.put(ConfigConstants.NET_MV_PLAY_COUNT, netMvInfo.getPlayCount());
            mvCollectionJsonArray.add(jsonObject);
        }
        config.put(ConfigConstants.MV_COLLECTION, mvCollectionJsonArray);

        // 存入收藏榜单列表
        JSONArray rankingCollectionJsonArray = new JSONArray();
        for (int i = 0, len = rankingCollectionModel.getSize(); i < len; i++) {
            NetRankingInfo netRankingInfo = (NetRankingInfo) rankingCollectionModel.get(i);

            JSONObject jsonObject = new JSONObject();
            jsonObject.put(ConfigConstants.NET_RANKING_SOURCE, netRankingInfo.getSource());
            jsonObject.put(ConfigConstants.NET_RANKING_ID, netRankingInfo.getId());
            jsonObject.put(ConfigConstants.NET_RANKING_NAME, netRankingInfo.getName());
            jsonObject.put(ConfigConstants.NET_RANKING_DESCRIPTION, netRankingInfo.getDescription());
            jsonObject.put(ConfigConstants.NET_RANKING_PLAY_COUNT, netRankingInfo.getPlayCount());
            jsonObject.put(ConfigConstants.NET_RANKING_UPDATE_FRE, netRankingInfo.getUpdateFre());
            jsonObject.put(ConfigConstants.NET_RANKING_UPDATE_TIME, netRankingInfo.getUpdateTime());
            jsonObject.put(ConfigConstants.NET_RANKING_COVER_IMG_URL, netRankingInfo.getCoverImgUrl());
            rankingCollectionJsonArray.add(jsonObject);
        }
        config.put(ConfigConstants.RANKING_COLLECTION, rankingCollectionJsonArray);

        // 存入收藏用户列表
        JSONArray userCollectionJsonArray = new JSONArray();
        for (int i = 0, len = userCollectionModel.getSize(); i < len; i++) {
            NetUserInfo netUserInfo = (NetUserInfo) userCollectionModel.get(i);

            JSONObject jsonObject = new JSONObject();
            jsonObject.put(ConfigConstants.NET_USER_SOURCE, netUserInfo.getSource());
            jsonObject.put(ConfigConstants.NET_USER_ID, netUserInfo.getId());
            jsonObject.put(ConfigConstants.NET_USER_NAME, netUserInfo.getName());
            jsonObject.put(ConfigConstants.NET_USER_GENDER, netUserInfo.getGender());
            jsonObject.put(ConfigConstants.NET_USER_AVATAR_URL, netUserInfo.getAvatarUrl());
            jsonObject.put(ConfigConstants.NET_USER_AVATAR_THUMB_URL, netUserInfo.getAvatarThumbUrl());
            jsonObject.put(ConfigConstants.NET_USER_FOLLOW, netUserInfo.getFollow());
            jsonObject.put(ConfigConstants.NET_USER_FOLLOWED, netUserInfo.getFollowed());
            jsonObject.put(ConfigConstants.NET_USER_PLAYLIST_COUNT, netUserInfo.getPlaylistCount());
            jsonObject.put(ConfigConstants.NET_USER_RADIO_COUNT, netUserInfo.getRadioCount());
            jsonObject.put(ConfigConstants.NET_USER_PROGRAM_COUNT, netUserInfo.getProgramCount());
            userCollectionJsonArray.add(jsonObject);
        }
        config.put(ConfigConstants.USER_COLLECTION, userCollectionJsonArray);
    }

    // 检查更新
    private void checkUpdate(boolean mute) {
        globalExecutor.submit(() -> {
            TipDialog td = null;
            if (!mute) td = new TipDialog(THIS, UPDATE_CHECKING_MSG, 0);
            try {
                if (!mute) td.showDialog();
                String body = HttpRequest.get(SoftInfo.UPDATE).execute().body();
                if (!mute) td.close();
                Document doc = Jsoup.parse(body);
                String latest = doc.select("h1.d-inline.mr-3").first().text().split(" ")[1];
                String now = SoftInfo.EDITION;
                if (latest.compareTo(now) > 0) {
                    ConfirmDialog d = new ConfirmDialog(THIS, String.format(UPDATE_MSG, latest, now), "是", "否");
                    d.showDialog();
                    int response = d.getResponse();
                    if (response == JOptionPane.YES_OPTION) {
                        releaseMenuItem.doClick();
                    }
                } else {
                    if (!mute) new TipDialog(THIS, LATEST_MSG).showDialog();
                }
            } catch (Exception ex) {
                if (!mute) new TipDialog(THIS, UPDATE_CHECK_FAIL_MSG).showDialog();
            } finally {
                if (!mute) td.close();
            }
        });
    }

    // 初始化托盘
    private void trayInit() throws AWTException {
        SystemTray systemTray = SystemTray.getSystemTray();
        // 显示图片必须设置
        trayIconImg.setImageAutoSize(true);
        openMainFrameMenuItem.addActionListener(e -> {
            if (videoDialog != null || miniDialog != null) return;
            // 从托盘还原窗口
            setExtendedState(NORMAL);
            if (showSpectrum) openSpectrum();
            setVisible(true);
        });
        exitMenuItem.addActionListener(e -> {
            // 移除托盘图标、保存数据并退出
            exit();
        });
        trayPopupMenu.add(openMainFrameMenuItem);
        trayPopupMenu.addSeparator();
        trayPopupMenu.add(exitMenuItem);
        searchButton.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                trayPopupMenu.setVisible(false);
            }
        });
        trayIconImg.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                int btn = e.getButton();
                if (btn == MouseEvent.BUTTON1) {
                    if (videoDialog != null || miniDialog != null) return;
                    // 从托盘还原窗口
                    setExtendedState(NORMAL);
                    if (showSpectrum) openSpectrum();
                    setVisible(true);
                }
                // 右键弹出菜单
                else if (btn == MouseEvent.BUTTON3) {
                    if (!e.isPopupTrigger()) return;
                    int h = trayPopupMenu.getHeight();
                    trayPopupMenu.setLocation(e.getX(), e.getY() - (h == 0 ? 89 : h));
                    trayPopupMenu.setInvoker(trayPopupMenu);
                    trayPopupMenu.setVisible(true);
                    searchButton.requestFocus();
                }
            }
        });
        systemTray.add(trayIconImg);
    }

    // 初始主化菜单
    private void mainMenuInit() {
        openFileInit();
        openDirInit();
        closeSongInit();
        clearCacheInit();
        individuationMenuInit();

        settingMenuItem.addActionListener(e -> new SettingDialog(THIS).showDialog());
        donateMenuItem.addActionListener(e -> new DonateDialog(THIS).showDialog());
        releaseMenuItem.addActionListener(e -> {
            Desktop desktop = Desktop.getDesktop();
            if (Desktop.isDesktopSupported() && desktop.isSupported(Desktop.Action.BROWSE)) {
                try {
                    URI uri = new URI(SoftInfo.WEBSITE);
                    desktop.browse(uri);
                } catch (IOException | URISyntaxException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });
        updateMenuItem.addActionListener(e -> checkUpdate(false));
        helpMenuItem.addActionListener(e -> new ConfirmDialog(THIS, HELP_MSG, "确定").showDialog());
        aboutMenuItem.addActionListener(e -> new AboutDialog(THIS).showDialog());

        mainMenu.add(closeSong);
        mainMenu.add(clearCache);
        mainMenu.addSeparator();
        mainMenu.add(settingMenuItem);
        mainMenu.addSeparator();
        mainMenu.add(donateMenuItem);
        mainMenu.add(releaseMenuItem);
        mainMenu.add(updateMenuItem);
        mainMenu.add(helpMenuItem);
        mainMenu.add(aboutMenuItem);
    }

    // 打开文件
    private void openFileInit() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("选择歌曲文件");
        ObservableList<FileChooser.ExtensionFilter> filters = fileChooser.getExtensionFilters();
        String allSuffix = "";
        for (String suffix : Format.AUDIO_TYPE_SUPPORTED) {
            filters.add(new FileChooser.ExtensionFilter(suffix.toUpperCase(), "*." + suffix));
            allSuffix += "*." + suffix + ";";
        }
        filters.add(0, new FileChooser.ExtensionFilter("音频文件", allSuffix));
        // 添加歌曲菜单项也是同一个监听器
        addFileMenuItem.addActionListener(e -> {
            Platform.runLater(() -> {
                List<File> files = fileChooser.showOpenMultipleDialog(null);
                if (files != null) {
                    // 添加选中的多个不重复的文件
                    int audioFileCount = 0;
                    for (File file : files) {
                        if (file.exists()) {
                            AudioFile audioFile = new AudioFile(file);
                            globalExecutor.submit(() -> {
                                MusicUtils.fillAudioFileInfo(audioFile);
                                musicList.repaint();
                            });
                            musicListModel.addElement(audioFile);
                            audioFileCount++;
                        }
                    }
                    boolean f = musicList.getModel() == filterModel;
                    filterPersonalMusic();
                    if (!f) {
                        musicList.setModel(musicListModel);
                        countLabel.setText(String.format("共 %s 首", musicList.getModel().getSize()));
                    }
                    String msg = "成功添加 " + audioFileCount + " 首歌曲";
                    new TipDialog(THIS, msg).showDialog();
                }
            });
        });
    }

    // 打开歌曲文件夹
    void openDirInit() {
        DirectoryChooser dirChooser = new DirectoryChooser();
        dirChooser.setTitle("选择歌曲文件夹");
        // 添加歌曲文件夹菜单项也是同一个监听器
        addDirMenuItem.addActionListener(e -> {
            Platform.runLater(() -> {
                File dir = dirChooser.showDialog(null);
                if (dir != null) {
                    // 文件夹不存在直接跳出
                    if (!dir.exists()) return;
                    // 播放列表不为空时，询问是否保留原播放列表
                    ListModel model = musicList.getModel();
                    if (musicListModel.getSize() != 0) {
                        ConfirmDialog confirmDialog = new ConfirmDialog(THIS,
                                ASK_RETAIN_MUSIC_LIST_MSG, "是", "否", "取消");
                        confirmDialog.showDialog();
                        int response = confirmDialog.getResponse();
                        if (response == JOptionPane.NO_OPTION) {
                            musicList.setModel(emptyListModel);
                            musicListModel.clear();
                        } else if (response == JOptionPane.CANCEL_OPTION) return;
                    }
                    // 添加到歌曲目录
                    if (ListUtils.search(catalogs, dir) < 0) catalogs.add(dir);

                    File[] files = dir.listFiles();
                    int audioFileCount = 0;
                    for (File file : files) {
                        // 支持这种文件格式才添加
                        if (player.support(FileUtils.getSuffix(file))) {
                            audioFileCount++;
                            AudioFile audioFile = new AudioFile(file);
                            globalExecutor.submit(() -> {
                                MusicUtils.fillAudioFileInfo(audioFile);
                                musicList.repaint();
                            });
                            musicListModel.addElement(audioFile);
                        }
                    }
                    musicList.setModel(model);
                    boolean f = musicList.getModel() == filterModel;
                    filterPersonalMusic();
                    if (!f) {
                        musicList.setModel(musicListModel);
                        countLabel.setText(String.format("共 %s 首", musicList.getModel().getSize()));
                    }
                    String msg = "成功添加 " + audioFileCount + " 首歌曲";
                    new TipDialog(THIS, msg).showDialog();
                }
            });
        });
    }

    // 初始化关闭歌曲文件
    void closeSongInit() {
        closeSong.setEnabled(false);
        closeSong.addActionListener(e -> unload());
    }

    // 初始化清空缓存
    void clearCacheInit() {
        clearCache.addActionListener(e -> {
            ConfirmDialog confirmDialog = new ConfirmDialog(THIS,
                    String.format(ASK_CLEAR_CACHE_MSG, FileUtils.getUnitString(FileUtils.getDirOrFileSize(new File(SimplePath.CACHE_PATH)))), "是", "否");
            confirmDialog.showDialog();
            int response = confirmDialog.getResponse();
            if (response == JOptionPane.YES_OPTION) {
                clearCache();
                new TipDialog(THIS, CLEAR_CACHE_SUCCESS_MSG).showDialog();
            }
        });
    }

    // 初始化个性化菜单
    void individuationMenuInit() {
        // 自定义风格
        styleCustomMenuItem.addActionListener(e -> {
            customStyle();
        });
        manageStyleMenuItem.addActionListener(e -> {
            ManageCustomStyleDialog dialog = new ManageCustomStyleDialog(THIS, true);
            try {
                dialog.showDialog();
            } catch (ClassNotFoundException classNotFoundException) {
                classNotFoundException.printStackTrace();
            } catch (UnsupportedLookAndFeelException unsupportedLookAndFeelException) {
                unsupportedLookAndFeelException.printStackTrace();
            } catch (InstantiationException instantiationException) {
                instantiationException.printStackTrace();
            } catch (IllegalAccessException illegalAccessException) {
                illegalAccessException.printStackTrace();
            } catch (InvocationTargetException invocationTargetException) {
                invocationTargetException.printStackTrace();
            }
        });
    }

    // 初始化标签页
    private void tabbedPaneInit() {
        // 组装标签面板
        int gap = 10;
        personalMusicLabel.setIconTextGap(gap);
        personalMusicLabel.setVerticalAlignment(SwingConstants.CENTER);
        personalMusicPanel.add(personalMusicLabel);

        netMusicLabel.setIconTextGap(gap);
        netMusicLabel.setVerticalAlignment(SwingConstants.CENTER);
        netMusicPanel.add(netMusicLabel);

        netPlaylistLabel.setIconTextGap(gap);
        netPlaylistLabel.setVerticalAlignment(SwingConstants.CENTER);
        netPlaylistPanel.add(netPlaylistLabel);

        netAlbumLabel.setIconTextGap(gap);
        netAlbumLabel.setVerticalAlignment(SwingConstants.CENTER);
        netAlbumPanel.add(netAlbumLabel);

        netArtistLabel.setIconTextGap(gap);
        netArtistLabel.setVerticalAlignment(SwingConstants.CENTER);
        netArtistPanel.add(netArtistLabel);

        netRadioLabel.setIconTextGap(gap);
        netRadioLabel.setVerticalAlignment(SwingConstants.CENTER);
        netRadioPanel.add(netRadioLabel);

        netMvLabel.setIconTextGap(gap);
        netMvLabel.setVerticalAlignment(SwingConstants.CENTER);
        netMvPanel.add(netMvLabel);

        netRankingLabel.setIconTextGap(gap);
        netRankingLabel.setVerticalAlignment(SwingConstants.CENTER);
        netRankingPanel.add(netRankingLabel);

        netUserLabel.setIconTextGap(gap);
        netUserLabel.setVerticalAlignment(SwingConstants.CENTER);
        netUserPanel.add(netUserLabel);

        recommendLabel.setIconTextGap(gap);
        recommendLabel.setVerticalAlignment(SwingConstants.CENTER);
        recommendPanel.add(recommendLabel);

        downloadManagementLabel.setIconTextGap(gap);
        downloadManagementLabel.setVerticalAlignment(SwingConstants.CENTER);
        downloadManagementPanel.add(downloadManagementLabel);

        playQueueLabel.setIconTextGap(gap);
        playQueueLabel.setVerticalAlignment(SwingConstants.CENTER);
        playQueuePanel.add(playQueueLabel);

        // 标签大小统一
        Dimension d = new Dimension(130, 42);
        personalMusicPanel.setPreferredSize(d);
        netMusicPanel.setPreferredSize(d);
        netPlaylistPanel.setPreferredSize(d);
        netAlbumPanel.setPreferredSize(d);
        netArtistPanel.setPreferredSize(d);
        netRadioPanel.setPreferredSize(d);
        netMvPanel.setPreferredSize(d);
        netRankingPanel.setPreferredSize(d);
        netUserPanel.setPreferredSize(d);
        recommendPanel.setPreferredSize(d);
        downloadManagementPanel.setPreferredSize(d);
        playQueuePanel.setPreferredSize(d);

        // 标签布局
        FlowLayout fl = new FlowLayout(FlowLayout.LEFT);
        personalMusicPanel.setLayout(fl);
        netMusicPanel.setLayout(fl);
        netPlaylistPanel.setLayout(fl);
        netAlbumPanel.setLayout(fl);
        netArtistPanel.setLayout(fl);
        netRadioPanel.setLayout(fl);
        netMvPanel.setLayout(fl);
        netRankingPanel.setLayout(fl);
        netUserPanel.setLayout(fl);
        recommendPanel.setLayout(fl);
        downloadManagementPanel.setLayout(fl);
        playQueuePanel.setLayout(fl);

        // 添加标签对应的内容
        tabbedPane.addTab(null, null, leftBox);
        tabbedPane.addTab(null, null, recommendLeftBox);
        tabbedPane.addTab(null, null, netRankingLeftBox);
        tabbedPane.addTab(null, null, netLeftBox);
        tabbedPane.addTab(null, null, netPlaylistLeftBox);
        tabbedPane.addTab(null, null, netAlbumLeftBox);
        tabbedPane.addTab(null, null, netArtistLeftBox);
        tabbedPane.addTab(null, null, netRadioLeftBox);
        tabbedPane.addTab(null, null, netMvLeftBox);
        tabbedPane.addTab(null, null, netUserLeftBox);
        tabbedPane.addTab(null, null, downloadLeftBox);
        tabbedPane.addTab(null, null, playQueueLeftBox);
        // 自定义标签面板
        tabbedPane.setTabComponentAt(TabIndex.PERSONAL, personalMusicPanel);
        tabbedPane.setTabComponentAt(TabIndex.RECOMMEND, recommendPanel);
        tabbedPane.setTabComponentAt(TabIndex.NET_RANKING, netRankingPanel);
        tabbedPane.setTabComponentAt(TabIndex.NET_MUSIC, netMusicPanel);
        tabbedPane.setTabComponentAt(TabIndex.NET_PLAYLIST, netPlaylistPanel);
        tabbedPane.setTabComponentAt(TabIndex.NET_ALBUM, netAlbumPanel);
        tabbedPane.setTabComponentAt(TabIndex.NET_ARTIST, netArtistPanel);
        tabbedPane.setTabComponentAt(TabIndex.NET_RADIO, netRadioPanel);
        tabbedPane.setTabComponentAt(TabIndex.NET_MV, netMvPanel);
        tabbedPane.setTabComponentAt(TabIndex.NET_USER, netUserPanel);
        tabbedPane.setTabComponentAt(TabIndex.DOWNLOAD_MANAGEMENT, downloadManagementPanel);
        tabbedPane.setTabComponentAt(TabIndex.PLAY_QUEUE, playQueuePanel);

        tabbedPane.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                updateTabUI(tabbedPane, currUIStyle, e.getPoint());
            }
        });
        tabbedPane.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                updateTabUI(tabbedPane, currUIStyle);
            }
        });
        // 改变播放列表状态
        tabbedPane.addChangeListener(e -> {
            int selectedIndex = tabbedPane.getSelectedIndex();
            // 根据选项卡选择的情况设置选项卡文字 + 图标颜色
            updateTabUI(tabbedPane, currUIStyle);
            // 个人音乐
            if (selectedIndex == TabIndex.PERSONAL) {
                int index = collectionTabbedPane.getSelectedIndex();

                DefaultListModel model = null;
                if (currPersonalMusicTab == PersonalMusicTabIndex.LOCAL_MUSIC) model = musicListModel;
                else if (currPersonalMusicTab == PersonalMusicTabIndex.HISTORY) model = historyModel;
                else if (currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION) {
                    if (index == CollectionTabIndex.MUSIC) model = collectionModel;
                    else if (index == CollectionTabIndex.PLAYLIST) model = playlistCollectionModel;
                    else if (index == CollectionTabIndex.ALBUM) model = albumCollectionModel;
                    else if (index == CollectionTabIndex.ARTIST) model = artistCollectionModel;
                    else if (index == CollectionTabIndex.RADIO) model = radioCollectionModel;
                    else if (index == CollectionTabIndex.MV) model = mvCollectionModel;
                    else if (index == CollectionTabIndex.RANKING) model = rankingCollectionModel;
                    else if (index == CollectionTabIndex.USER) model = userCollectionModel;
                }
                boolean modelEmpty = model.isEmpty();

                if (currPersonalMusicTab != PersonalMusicTabIndex.COLLECTION || index == CollectionTabIndex.MUSIC) {
                    if (currPersonalMusicTab != PersonalMusicTabIndex.COLLECTION) {
                        if (modelEmpty) {
                            leftBox.remove(musicScrollPane);
                            leftBox.add(emptyHintPanel);
                        } else {
                            musicList.setModel(model);
                            leftBox.remove(emptyHintPanel);
                            leftBox.add(musicScrollPane);
                        }
                    } else {
                        if (modelEmpty) {
                            musicCollectionLeftBox.remove(musicScrollPane);
                            musicCollectionLeftBox.add(emptyHintPanel);
                        } else {
                            musicCollectionLeftBox.remove(emptyHintPanel);
                            musicCollectionLeftBox.add(musicScrollPane);
                        }
                    }
                } else {
                    Box box = null;
                    if (index == CollectionTabIndex.PLAYLIST) box = playlistCollectionLeftBox;
                    else if (index == CollectionTabIndex.ALBUM) box = albumCollectionLeftBox;
                    else if (index == CollectionTabIndex.ARTIST) box = artistCollectionLeftBox;
                    else if (index == CollectionTabIndex.RADIO) box = radioCollectionLeftBox;
                    else if (index == CollectionTabIndex.MV) box = mvCollectionLeftBox;
                    else if (index == CollectionTabIndex.RANKING) box = rankingCollectionLeftBox;
                    else if (index == CollectionTabIndex.USER) box = userCollectionLeftBox;
                    if (modelEmpty) {
                        box.remove(collectionScrollPane);
                        box.add(emptyHintPanel);
                    } else {
                        collectionList.setModel(model);
                        box.remove(emptyHintPanel);
                        box.add(collectionScrollPane);
                    }
                }

                if (filterTextField.isOccupied()) filterPersonalMusic();

                if (collectionBackwardButton.isShowing()) {
                    if (index == CollectionTabIndex.PLAYLIST) {
                        // 显示收藏歌单的歌曲列表
                        netMusicList.setModel(netMusicListForPlaylistCollectionModel);
                    } else if (index == CollectionTabIndex.ALBUM) {
                        // 显示收藏专辑的歌曲列表
                        netMusicList.setModel(netMusicListForAlbumCollectionModel);
                    } else if (index == CollectionTabIndex.ARTIST) {
                        // 显示收藏歌手的歌曲列表
                        netMusicList.setModel(netMusicListForArtistCollectionModel);
                    } else if (index == CollectionTabIndex.RADIO) {
                        // 显示收藏电台的歌曲列表
                        netMusicList.setModel(netMusicListForRadioCollectionModel);
                    } else if (index == CollectionTabIndex.RANKING) {
                        // 显示收藏榜单的歌曲列表
                        netMusicList.setModel(netMusicListForRankingCollectionModel);
                    } else if (index == CollectionTabIndex.USER) {
                        // 显示收藏用户的歌曲列表
                        netMusicList.setModel(netMusicListForUserCollectionModel);
                    }
                    collectionItemListCountBox.add(netMusicScrollPane);
                    collectionItemListBox.add(collectionItemListCountBox);
                    collectionLeftBox.add(collectionItemListBox);
                }
            }
            // 在线音乐
            else if (selectedIndex == TabIndex.NET_MUSIC) {
                updateRenderer(netMusicList);
                netMusicList.setModel(netMusicListModel);
                // 首次切到在线音乐标签页时加载热搜
                if (netMusicListModel.isEmpty() && netMusicHotSearchInnerPanel2.getComponentCount() == 0) {
                    netLeftBox.remove(netMusicScrollPane);
                    netLeftBox.add(netMusicKeywordsPanelScrollPane);
                    globalExecutor.submit(() -> {
                        updateHotSearch();
                        // 更新 LAF，防止组件样式不正确
                        SwingUtilities.updateComponentTreeUI(netMusicRefreshHotSearchButton);
                    });
                } else if (netMusicHotSearchInnerPanel2.getComponentCount() == 0) {
                    globalExecutor.submit(() -> {
                        updateHotSearch();
                        // 更新 LAF，防止组件样式不正确
                        SwingUtilities.updateComponentTreeUI(netMusicRefreshHotSearchButton);
                    });
                } else if (!netMusicListModel.isEmpty()) {
                    netLeftBox.remove(netMusicKeywordsPanelScrollPane);
                    netLeftBox.add(netMusicScrollPane);
                }
            }
            // 在线歌单音乐
            else if (selectedIndex == TabIndex.NET_PLAYLIST) {
                // 显示歌单的歌曲列表
                if (netPlaylistLeftBox.getComponent(netPlaylistLeftBox.getComponentCount() - 1) == playlistListBox) {
                    updateRenderer(netMusicList);
                    netMusicList.setModel(netMusicListForPlaylistModel);
                    if (netMusicListForPlaylistModel.isEmpty()) playlistListCountBox.add(emptyHintPanel);
                    else playlistListCountBox.add(netMusicScrollPane);
                    playlistListBox.add(playlistListCountBox);
                    netPlaylistLeftBox.add(playlistListBox);
                }
                // 显示歌单列表
                else if (netPlaylistBackwardButton.isEnabled()) {
                    netPlaylistLeftBox.remove(playlistListBox);
                    if (netPlaylistListModel.isEmpty()) netPlaylistLeftBox.add(emptyHintPanel);
                    else netPlaylistLeftBox.add(netPlaylistScrollPane);
                }
                // 显示关键词面板
                else {
                    netPlaylistLeftBox.remove(netPlaylistScrollPane);
                    netPlaylistLeftBox.add(netPlaylistKeywordsPanelScrollPane);
                }
            }
            // 在线专辑音乐
            else if (selectedIndex == TabIndex.NET_ALBUM) {
                // 显示专辑的歌曲列表
                if (netAlbumLeftBox.getComponent(netAlbumLeftBox.getComponentCount() - 1) == albumListBox) {
                    updateRenderer(netMusicList);
                    netMusicList.setModel(netMusicListForAlbumModel);
                    if (netMusicListForAlbumModel.isEmpty()) albumListCountBox.add(emptyHintPanel);
                    else albumListCountBox.add(netMusicScrollPane);
                    albumListBox.add(albumListCountBox);
                    netAlbumLeftBox.add(albumListBox);
                }
                // 显示专辑列表
                else if (netAlbumBackwardButton.isEnabled()) {
                    netAlbumLeftBox.remove(albumListBox);
                    if (netAlbumListModel.isEmpty()) netAlbumLeftBox.add(emptyHintPanel);
                    else netAlbumLeftBox.add(netAlbumScrollPane);
                }
                // 显示关键词面板
                else {
                    netAlbumLeftBox.remove(netAlbumScrollPane);
                    netAlbumLeftBox.add(netAlbumKeywordsPanelScrollPane);
                }
            }
            // 歌手音乐
            else if (selectedIndex == TabIndex.NET_ARTIST) {
                // 显示歌手的歌曲列表
                if (netArtistLeftBox.getComponent(netArtistLeftBox.getComponentCount() - 1) == artistListBox) {
                    updateRenderer(netMusicList);
                    netMusicList.setModel(netMusicListForArtistModel);
                    if (netMusicListForArtistModel.isEmpty()) artistListCountBox.add(emptyHintPanel);
                    else artistListCountBox.add(netMusicScrollPane);
                    artistListBox.add(artistListCountBox);
                    netArtistLeftBox.add(artistListBox);
                }
                // 显示歌手列表
                else if (netArtistBackwardButton.isEnabled()) {
                    netArtistLeftBox.remove(artistListBox);
                    if (netArtistListModel.isEmpty()) netArtistLeftBox.add(emptyHintPanel);
                    else netArtistLeftBox.add(netArtistScrollPane);
                }
                // 显示关键词面板
                else {
                    netArtistLeftBox.remove(netArtistScrollPane);
                    netArtistLeftBox.add(netArtistKeywordsPanelScrollPane);
                }
            }
            // 电台音乐
            else if (selectedIndex == TabIndex.NET_RADIO) {
                // 显示电台的歌曲列表
                if (netRadioLeftBox.getComponent(netRadioLeftBox.getComponentCount() - 1) == radioListBox) {
                    updateRenderer(netMusicList);
                    netMusicList.setModel(netMusicListForRadioModel);
                    if (netMusicListForRadioModel.isEmpty()) radioListCountBox.add(emptyHintPanel);
                    else radioListCountBox.add(netMusicScrollPane);
                    radioListBox.add(radioListCountBox);
                    netRadioLeftBox.add(radioListBox);
                }
                // 显示电台列表
                else if (netRadioBackwardButton.isEnabled()) {
                    netRadioLeftBox.remove(radioListBox);
                    if (netRadioListModel.isEmpty()) netRadioLeftBox.add(emptyHintPanel);
                    else netRadioLeftBox.add(netRadioScrollPane);
                }
                // 显示关键词面板
                else {
                    netRadioLeftBox.remove(netRadioScrollPane);
                    netRadioLeftBox.add(netRadioKeywordsPanelScrollPane);
                }
            }
            // MV
            else if (selectedIndex == TabIndex.NET_MV) {
                if (netMvBackwardButton.isEnabled()) {
                    if (netMvListModel.isEmpty()) netMvLeftBox.add(emptyHintPanel);
                    else netMvLeftBox.add(netMvScrollPane);
                } else {
                    netMvLeftBox.remove(netMvScrollPane);
                    netMvLeftBox.add(netMvKeywordsPanelScrollPane);
                }
            }
            // 榜单音乐
            else if (selectedIndex == TabIndex.NET_RANKING) {
                if (netRankingListModel.isEmpty()) {
                    getRankingAction.run();
                    return;
                }
                // 显示电台的歌曲列表
                if (netRankingLeftBox.getComponent(netRankingLeftBox.getComponentCount() - 1) == rankingListBox) {
                    netMusicList.setModel(netMusicListForRankingModel);
                    if (netMusicListForRankingModel.isEmpty()) rankingListCountBox.add(emptyHintPanel);
                    else rankingListCountBox.add(netMusicScrollPane);
                    rankingListBox.add(rankingListCountBox);
                    netRankingLeftBox.add(rankingListBox);
                }
                // 显示电台列表
                else {
                    netRankingLeftBox.remove(rankingListBox);
                    if (netRankingListModel.isEmpty()) netRankingLeftBox.add(emptyHintPanel);
                    else netRankingLeftBox.add(netRankingScrollPane);
                }
            }
            // 用户音乐
            else if (selectedIndex == TabIndex.NET_USER) {
                // 显示用户的歌曲列表
                if (netUserLeftBox.getComponent(netUserLeftBox.getComponentCount() - 1) == userListBox) {
                    updateRenderer(netMusicList);
                    netMusicList.setModel(netMusicListForUserModel);
                    if (netMusicListForUserModel.isEmpty()) userListCountBox.add(emptyHintPanel);
                    else userListCountBox.add(netMusicScrollPane);
                    userListBox.add(userListCountBox);
                    netUserLeftBox.add(userListBox);
                }
                // 显示用户列表
                else if (netUserBackwardButton.isEnabled()) {
                    netUserLeftBox.remove(userListBox);
                    if (netUserListModel.isEmpty()) netUserLeftBox.add(emptyHintPanel);
                    else netUserLeftBox.add(netUserScrollPane);
                }
                // 显示关键词面板
                else {
                    netUserLeftBox.remove(netUserScrollPane);
                    netUserLeftBox.add(netUserKeywordsPanelScrollPane);
                }
            }
            // 推荐
            else if (selectedIndex == TabIndex.RECOMMEND) {
                if (currRecommendTab == -1) {
                    playlistRecommendButton.doClick();
                    return;
                }
                // 加载推荐歌单/专辑/歌手/电台
                if (currRecommendTab != RecommendTabIndex.NEW_MUSIC_RECOMMEND
                        && currRecommendTab != RecommendTabIndex.HOT_MUSIC_RECOMMEND
                        && currRecommendTab != RecommendTabIndex.PROGRAM_RECOMMEND) {
                    if (recommendBackwardButton.isEnabled()) {
                        // 显示歌单的歌曲列表
                        if (currRecommendTab == RecommendTabIndex.PLAYLIST_RECOMMEND
                                || currRecommendTab == RecommendTabIndex.HIGH_QUALITY_PLAYLIST_RECOMMEND) {
                            netMusicList.setModel(netMusicListForPlaylistRecommendModel);
                        }
                        // 显示专辑的歌曲列表
                        else if (currRecommendTab == RecommendTabIndex.NEW_ALBUM_RECOMMEND) {
                            netMusicList.setModel(netMusicListForAlbumRecommendModel);
                        }
                        // 显示歌手的歌曲列表
                        else if (currRecommendTab == RecommendTabIndex.ARTIST_LIST_RECOMMEND) {
                            netMusicList.setModel(netMusicListForArtistRecommendModel);
                        }
                        // 显示电台的歌曲列表
                        else if (currRecommendTab == RecommendTabIndex.HOT_RADIO_RECOMMEND
                                || currRecommendTab == RecommendTabIndex.NEW_RADIO_RECOMMEND) {
                            netMusicList.setModel(netMusicListForRadioRecommendModel);
                        }
                        if (netMusicList.getModel().getSize() == 0) recommendItemListCountBox.add(emptyHintPanel);
                        else recommendItemListCountBox.add(netMusicScrollPane);
                        recommendItemListBox.add(recommendItemListCountBox);
                        recommendLeftBox.add(recommendItemListBox);
                    } else {
                        if (itemRecommendList.getModel().getSize() == 0) recommendLeftBox.add(emptyHintPanel);
                        else recommendLeftBox.add(itemRecommendScrollPane);
                    }
                }
                // 加载推荐音乐/节目
                else {
                    netMusicList.setModel(netMusicRecommendListModel);
                    if (netMusicRecommendListModel.isEmpty()) recommendLeftBox.add(emptyHintPanel);
                    else recommendLeftBox.add(netMusicScrollPane);
                }
            }
            // 下载管理
            else if (selectedIndex == TabIndex.DOWNLOAD_MANAGEMENT) {
                if (downloadListModel.isEmpty()) {
                    downloadLeftBox.remove(downloadListScrollPane);
                    downloadLeftBox.add(emptyHintPanel);
                }
            }
            // 播放队列
            else if (selectedIndex == TabIndex.PLAY_QUEUE) {
                if (playQueueModel.isEmpty()) {
                    playQueueLeftBox.remove(playQueueScrollPane);
                    playQueueLeftBox.add(emptyHintPanel);
                }
            }
            playQueue.setCellRenderer(selectedIndex == TabIndex.PLAY_QUEUE ? playQueueRenderer : null);
        });

        globalPanel.add(tabbedPane, BorderLayout.CENTER);
    }

    // 初始化收藏标签页
    private void collectionTabbedPaneInit() {
        // 组装标签面板
        int gap = 10;
        musicCollectionLabel.setIconTextGap(gap);
        musicCollectionPanel.add(musicCollectionLabel);

        playlistCollectionLabel.setIconTextGap(gap);
        playlistCollectionPanel.add(playlistCollectionLabel);

        albumCollectionLabel.setIconTextGap(gap);
        albumCollectionPanel.add(albumCollectionLabel);

        artistCollectionLabel.setIconTextGap(gap);
        artistCollectionPanel.add(artistCollectionLabel);

        radioCollectionLabel.setIconTextGap(gap);
        radioCollectionPanel.add(radioCollectionLabel);

        mvCollectionLabel.setIconTextGap(gap);
        mvCollectionPanel.add(mvCollectionLabel);

        rankingCollectionLabel.setIconTextGap(gap);
        rankingCollectionPanel.add(rankingCollectionLabel);

        userCollectionLabel.setIconTextGap(gap);
        userCollectionPanel.add(userCollectionLabel);

        // 添加标签对应的内容
        collectionTabbedPane.addTab(null, null, musicCollectionLeftBox);
        collectionTabbedPane.addTab(null, null, playlistCollectionLeftBox);
        collectionTabbedPane.addTab(null, null, rankingCollectionLeftBox);
        collectionTabbedPane.addTab(null, null, albumCollectionLeftBox);
        collectionTabbedPane.addTab(null, null, artistCollectionLeftBox);
        collectionTabbedPane.addTab(null, null, radioCollectionLeftBox);
        collectionTabbedPane.addTab(null, null, mvCollectionLeftBox);
        collectionTabbedPane.addTab(null, null, userCollectionLeftBox);

        // 自定义标签面板
        collectionTabbedPane.setTabComponentAt(CollectionTabIndex.MUSIC, musicCollectionPanel);
        collectionTabbedPane.setTabComponentAt(CollectionTabIndex.PLAYLIST, playlistCollectionPanel);
        collectionTabbedPane.setTabComponentAt(CollectionTabIndex.RANKING, rankingCollectionPanel);
        collectionTabbedPane.setTabComponentAt(CollectionTabIndex.ALBUM, albumCollectionPanel);
        collectionTabbedPane.setTabComponentAt(CollectionTabIndex.ARTIST, artistCollectionPanel);
        collectionTabbedPane.setTabComponentAt(CollectionTabIndex.RADIO, radioCollectionPanel);
        collectionTabbedPane.setTabComponentAt(CollectionTabIndex.MV, mvCollectionPanel);
        collectionTabbedPane.setTabComponentAt(CollectionTabIndex.USER, userCollectionPanel);

        collectionTabbedPane.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                updateTabUI(collectionTabbedPane, currUIStyle, e.getPoint());
            }
        });
        collectionTabbedPane.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                updateTabUI(collectionTabbedPane, currUIStyle);
            }
        });
        // 改变收藏列表状态
        collectionTabbedPane.addChangeListener(e -> {
            int selectedIndex = collectionTabbedPane.getSelectedIndex();
            // 根据选项卡选择的情况设置选项卡文字 + 图标颜色
            updateTabUI(collectionTabbedPane, currUIStyle);
            if (selectedIndex == CollectionTabIndex.MUSIC) {
                musicList.setModel(collectionModel);
                int size = collectionModel.size();
                if (size > 0) {
                    musicCollectionLeftBox.remove(emptyHintPanel);
                    musicCollectionLeftBox.add(musicScrollPane);
                } else {
                    musicCollectionLeftBox.remove(musicScrollPane);
                    musicCollectionLeftBox.add(emptyHintPanel);
                }
                countLabel.setText(String.format("共 %s 首", collectionModel.size()));
            } else if (selectedIndex == CollectionTabIndex.PLAYLIST) {
                collectionList.setModel(playlistCollectionModel);
                int size = playlistCollectionModel.size();
                if (size > 0) {
                    playlistCollectionLeftBox.remove(emptyHintPanel);
                    playlistCollectionLeftBox.add(collectionScrollPane);
                } else {
                    playlistCollectionLeftBox.remove(collectionScrollPane);
                    playlistCollectionLeftBox.add(emptyHintPanel);
                }
                countLabel.setText(String.format("共 %s 项", size));

                for (int i = 0, s = playlistCollectionModel.size(); i < s; i++) {
                    int finalI = i;
                    globalExecutor.submit(() -> {
                        NetPlaylistInfo playlistInfo = (NetPlaylistInfo) playlistCollectionModel.get(finalI);
                        if (playlistInfo.isIntegrated()) return;
                        playlistInfo.setInvokeLater(() -> updateRenderer(collectionList));
                        MusicServerUtils.preloadPlaylistInfo(playlistInfo);
                    });
                }
            } else if (selectedIndex == CollectionTabIndex.ALBUM) {
                collectionList.setModel(albumCollectionModel);
                int size = albumCollectionModel.size();
                if (size > 0) {
                    albumCollectionLeftBox.remove(emptyHintPanel);
                    albumCollectionLeftBox.add(collectionScrollPane);
                } else {
                    albumCollectionLeftBox.remove(collectionScrollPane);
                    albumCollectionLeftBox.add(emptyHintPanel);
                }
                countLabel.setText(String.format("共 %s 项", size));

                for (int i = 0, s = albumCollectionModel.size(); i < s; i++) {
                    int finalI = i;
                    globalExecutor.submit(() -> {
                        NetAlbumInfo albumInfo = (NetAlbumInfo) albumCollectionModel.get(finalI);
                        if (albumInfo.isIntegrated()) return;
                        albumInfo.setInvokeLater(() -> updateRenderer(collectionList));
                        MusicServerUtils.preloadAlbumInfo(albumInfo);
                    });
                }
            } else if (selectedIndex == CollectionTabIndex.ARTIST) {
                collectionList.setModel(artistCollectionModel);
                int size = artistCollectionModel.size();
                if (size > 0) {
                    artistCollectionLeftBox.remove(emptyHintPanel);
                    artistCollectionLeftBox.add(collectionScrollPane);
                } else {
                    artistCollectionLeftBox.remove(collectionScrollPane);
                    artistCollectionLeftBox.add(emptyHintPanel);
                }
                countLabel.setText(String.format("共 %s 项", size));

                for (int i = 0, s = artistCollectionModel.size(); i < s; i++) {
                    int finalI = i;
                    globalExecutor.submit(() -> {
                        NetArtistInfo artistInfo = (NetArtistInfo) artistCollectionModel.get(finalI);
                        if (artistInfo.isIntegrated()) return;
                        artistInfo.setInvokeLater(() -> updateRenderer(collectionList));
                        MusicServerUtils.preloadArtistInfo(artistInfo);
                    });
                }
            } else if (selectedIndex == CollectionTabIndex.RADIO) {
                collectionList.setModel(radioCollectionModel);
                int size = radioCollectionModel.size();
                if (size > 0) {
                    radioCollectionLeftBox.remove(emptyHintPanel);
                    radioCollectionLeftBox.add(collectionScrollPane);
                } else {
                    radioCollectionLeftBox.remove(collectionScrollPane);
                    radioCollectionLeftBox.add(emptyHintPanel);
                }
                countLabel.setText(String.format("共 %s 项", size));

                for (int i = 0, s = radioCollectionModel.size(); i < s; i++) {
                    int finalI = i;
                    globalExecutor.submit(() -> {
                        NetRadioInfo radioInfo = (NetRadioInfo) radioCollectionModel.get(finalI);
                        if (radioInfo.isIntegrated()) return;
                        radioInfo.setInvokeLater(() -> updateRenderer(collectionList));
                        MusicServerUtils.preloadRadioInfo(radioInfo);
                    });
                }
            } else if (selectedIndex == CollectionTabIndex.MV) {
                collectionList.setModel(mvCollectionModel);
                int size = mvCollectionModel.size();
                if (size > 0) {
                    mvCollectionLeftBox.remove(emptyHintPanel);
                    mvCollectionLeftBox.add(collectionScrollPane);
                } else {
                    mvCollectionLeftBox.remove(collectionScrollPane);
                    mvCollectionLeftBox.add(emptyHintPanel);
                }
                countLabel.setText(String.format("共 %s 项", size));

                for (int i = 0, s = mvCollectionModel.size(); i < s; i++) {
                    int finalI = i;
                    globalExecutor.submit(() -> {
                        NetMvInfo mvInfo = (NetMvInfo) mvCollectionModel.get(finalI);
                        if (mvInfo.isIntegrated()) return;
                        mvInfo.setInvokeLater(() -> updateRenderer(collectionList));
                        MusicServerUtils.preloadMvInfo(mvInfo);
                    });
                }
            } else if (selectedIndex == CollectionTabIndex.RANKING) {
                collectionList.setModel(rankingCollectionModel);
                int size = rankingCollectionModel.size();
                if (size > 0) {
                    rankingCollectionLeftBox.remove(emptyHintPanel);
                    rankingCollectionLeftBox.add(collectionScrollPane);
                } else {
                    rankingCollectionLeftBox.remove(collectionScrollPane);
                    rankingCollectionLeftBox.add(emptyHintPanel);
                }
                countLabel.setText(String.format("共 %s 项", size));

                for (int i = 0, s = rankingCollectionModel.size(); i < s; i++) {
                    int finalI = i;
                    globalExecutor.submit(() -> {
                        NetRankingInfo rankingInfo = (NetRankingInfo) rankingCollectionModel.get(finalI);
                        if (rankingInfo.isIntegrated()) return;
                        rankingInfo.setInvokeLater(() -> updateRenderer(collectionList));
                        MusicServerUtils.preloadRankingInfo(rankingInfo);
                    });
                }
            } else if (selectedIndex == CollectionTabIndex.USER) {
                collectionList.setModel(userCollectionModel);
                int size = userCollectionModel.size();
                if (size > 0) {
                    userCollectionLeftBox.remove(emptyHintPanel);
                    userCollectionLeftBox.add(collectionScrollPane);
                } else {
                    userCollectionLeftBox.remove(collectionScrollPane);
                    userCollectionLeftBox.add(emptyHintPanel);
                }
                countLabel.setText(String.format("共 %s 项", size));

                for (int i = 0, s = userCollectionModel.size(); i < s; i++) {
                    int finalI = i;
                    globalExecutor.submit(() -> {
                        NetUserInfo userInfo = (NetUserInfo) userCollectionModel.get(finalI);
                        if (userInfo.isIntegrated()) return;
                        userInfo.setInvokeLater(() -> updateRenderer(collectionList));
                        MusicServerUtils.preloadUserInfo(userInfo);
                    });
                }
            }
            // 切换收藏标签页后筛选
            if (filterTextField.isOccupied()) filterPersonalMusic();
        });
    }

    // 初始化收藏工具条
    private void collectionToolBarInit() {
//        collectionPageTextField.addFocusListener(
//                new JTextFieldHintListener(collectionPageTextField, "", currUIStyle.getForeColor()));
        // 只能输入数字
        collectionPageTextField.setDocument(new SafeDocument(0, Integer.MAX_VALUE));
        // 收藏后退按钮事件
        collectionBackwardButton.addActionListener(e -> {
            // 返回到歌单/专辑/歌手/电台
            // 先清空在线音乐列表
            ((DefaultListModel) netMusicList.getModel()).clear();
            tabbedPane.setComponentAt(TabIndex.PERSONAL, leftBox);
            collectionRecordTypeComboBox.setVisible(false);
            leftBox.repaint();
        });
        // 收藏模块跳页事件，可复用
        Runnable collectionGoPageAction = () -> {
            // 搜索收藏歌单/专辑/歌手/电台里的歌
            if (collectionBackwardButton.isEnabled()) {
                loadingAndRun(() -> {
                    // 搜索歌曲并显示在在线播放列表
                    try {
                        Object o = collectionList.getSelectedValue();
                        // 这是歌单里的歌
                        if (o instanceof NetPlaylistInfo) {
                            NetPlaylistInfo playlistInfo = (NetPlaylistInfo) o;
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInPlaylist(
                                    playlistInfo.getId(), playlistInfo.getSource(), limit, netMusicInCollectionCurrPage);
                            List<NetMusicInfo> musicInfos = result.data;
                            int total = result.total;
                            netMusicInCollectionMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            collectionCountLabel.setText(String.format(PAGINATION_MSG, netMusicInCollectionCurrPage, netMusicInCollectionMaxPage));
                            // 解决数量标签文字显示不全问题
                            collectionCountPanel.add(collectionCountLabel, collectionCountPanel.getComponentIndex(collectionCountLabel));
                            // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForPlaylistCollectionModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForPlaylistCollectionModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForPlaylistCollectionModel);
                            collectionLeftBox.repaint();
                        }
                        // 这是专辑里的歌
                        else if (o instanceof NetAlbumInfo) {
                            NetAlbumInfo albumInfo = (NetAlbumInfo) o;
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInAlbum(
                                    albumInfo.getId(), albumInfo.getSource(), limit, netMusicInCollectionCurrPage);
                            List<NetMusicInfo> musicInfos = result.data;
                            int total = result.total;
                            netMusicInCollectionMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            collectionCountLabel.setText(String.format(PAGINATION_MSG, netMusicInCollectionCurrPage, netMusicInCollectionMaxPage));
                            // 解决数量标签文字显示不全问题
                            collectionCountPanel.add(collectionCountLabel, collectionCountPanel.getComponentIndex(collectionCountLabel));
                            // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForAlbumCollectionModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForAlbumCollectionModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForAlbumCollectionModel);
                            collectionLeftBox.repaint();
                        }
                        // 这是歌手里的歌
                        else if (o instanceof NetArtistInfo) {
                            NetArtistInfo artistInfo = (NetArtistInfo) o;
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInArtist(
                                    artistInfo.getId(), artistInfo.getSource(), limit, netMusicInCollectionCurrPage);
                            List<NetMusicInfo> musicInfos = result.data;
                            int total = result.total;
                            netMusicInCollectionMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            collectionCountLabel.setText(String.format(PAGINATION_MSG, netMusicInCollectionCurrPage, netMusicInCollectionMaxPage));
                            // 解决数量标签文字显示不全问题
                            collectionCountPanel.add(collectionCountLabel, collectionCountPanel.getComponentIndex(collectionCountLabel));
                            // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForArtistCollectionModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForArtistCollectionModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForArtistCollectionModel);
                            collectionLeftBox.repaint();
                        }
                        // 这是电台里的歌
                        else if (o instanceof NetRadioInfo) {
                            NetRadioInfo radioInfo = (NetRadioInfo) o;
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInRadio(radioInfo, limit, netMusicInCollectionCurrPage);
                            List<NetMusicInfo> musicInfos = result.data;
                            Integer total = result.total;
                            netMusicInCollectionMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            collectionCountLabel.setText(String.format(PAGINATION_MSG, netMusicInCollectionCurrPage, netMusicInCollectionMaxPage));
                            // 解决数量标签文字显示不全问题
                            collectionCountPanel.add(collectionCountLabel, collectionCountPanel.getComponentIndex(collectionCountLabel));
                            // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForRadioCollectionModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForRadioCollectionModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForRadioCollectionModel);
                            collectionLeftBox.repaint();
                        }
                        // 这是榜单里的歌
                        else if (o instanceof NetRankingInfo) {
                            NetRankingInfo RankingInfo = (NetRankingInfo) o;
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInRanking(
                                    RankingInfo.getId(), RankingInfo.getSource(), limit, netMusicInCollectionCurrPage);
                            List<NetMusicInfo> musicInfos = result.data;
                            Integer total = result.total;
                            netMusicInCollectionMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            collectionCountLabel.setText(String.format(PAGINATION_MSG, netMusicInCollectionCurrPage, netMusicInCollectionMaxPage));
                            // 解决数量标签文字显示不全问题
                            collectionCountPanel.add(collectionCountLabel, collectionCountPanel.getComponentIndex(collectionCountLabel));
                            // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForRankingCollectionModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForRankingCollectionModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForRankingCollectionModel);
                            collectionLeftBox.repaint();
                        }
                        // 这是用户里的歌
                        else if (o instanceof NetUserInfo) {
                            NetUserInfo userInfo = (NetUserInfo) o;
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInUser(
                                    collectionRecordTypeComboBox.getSelectedIndex(), userInfo, limit, netMusicInCollectionCurrPage);
                            List<NetMusicInfo> musicInfos = result.data;
                            Integer total = result.total;
                            netMusicInCollectionMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            collectionCountLabel.setText(String.format(PAGINATION_MSG, netMusicInCollectionCurrPage, netMusicInCollectionMaxPage));
                            // 解决数量标签文字显示不全问题
                            collectionCountPanel.add(collectionCountLabel, collectionCountPanel.getComponentIndex(collectionCountLabel));
                            // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForUserCollectionModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForUserCollectionModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForUserCollectionModel);
                            if (netMusicListForUserCollectionModel.isEmpty()) {
                                collectionItemListCountBox.remove(netMusicScrollPane);
                                collectionItemListCountBox.add(emptyHintPanel);
                            } else {
                                collectionItemListCountBox.remove(emptyHintPanel);
                                collectionItemListCountBox.add(netMusicScrollPane);
                            }
                            collectionLeftBox.repaint();
                        }
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        };
        collectionRecordTypeComboBoxModel.addElement("最近一周");
        collectionRecordTypeComboBoxModel.addElement("所有时间");
        collectionOrderComboBoxModel.addElement("最新发布");
        collectionOrderComboBoxModel.addElement("最多播放");
        collectionRecordTypeComboBox.setModel(collectionRecordTypeComboBoxModel);
        // 用户听歌记录类型
        collectionRecordTypeComboBox.addItemListener(e -> {
            // 避免事件被处理 2 次！
            if (collectionRecordTypeComboBox.getItemCount() <= 1
                    || collectionRecordTypeComboBox.getSelectedItem() == null
                    || e.getStateChange() != ItemEvent.SELECTED) return;
            netMusicInCollectionCurrPage = 1;
            collectionGoPageAction.run();
        });
        // 播放全部
        collectionPlayAllButton.addActionListener(e -> {
            Object o = collectionList.getSelectedValue();
            if (o instanceof NetPlaylistInfo) netPlaylistPlayAllButton.doClick();
            else if (o instanceof NetAlbumInfo) netAlbumPlayAllButton.doClick();
            else if (o instanceof NetArtistInfo) netArtistPlayAllButton.doClick();
            else if (o instanceof NetRadioInfo) netRadioPlayAllButton.doClick();
            else if (o instanceof NetRankingInfo) netRankingPlayAllButton.doClick();
            else if (o instanceof NetUserInfo) netUserPlayAllButton.doClick();
        });
        // 刷新按钮事件
        collectionRefreshButton.addActionListener(e -> {
            collectionGoPageAction.run();
        });
        // 第一页按钮事件
        collectionStartPageButton.addActionListener(e -> {
            if (netMusicInCollectionCurrPage == 1) {
                new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                return;
            }
            netMusicInCollectionCurrPage = 1;
            collectionGoPageAction.run();
        });
        // 上一页按钮事件
        collectionLastPageButton.addActionListener(e -> {
            if (netMusicInCollectionCurrPage == 1) {
                new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                return;
            }
            netMusicInCollectionCurrPage--;
            collectionGoPageAction.run();
        });
        // 下一页按钮事件
        collectionNextPageButton.addActionListener(e -> {
            if (netMusicInCollectionCurrPage == netMusicInCollectionMaxPage) {
                new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                return;
            }
            netMusicInCollectionCurrPage++;
            collectionGoPageAction.run();
        });
        // 最后一页按钮事件
        collectionEndPageButton.addActionListener(e -> {
            if (netMusicInCollectionCurrPage == netMusicInCollectionMaxPage) {
                new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                return;
            }
            netMusicInCollectionCurrPage = netMusicInCollectionMaxPage;
            collectionGoPageAction.run();
        });
        // 跳页按钮事件
        collectionGoButton.addActionListener(e -> {
            String text = collectionPageTextField.getText();
            collectionPageTextField.setText("");
            if ("".equals(text)) return;
            int destPage = Integer.parseInt(text);
            if (destPage < 1 || destPage > netMusicInCollectionMaxPage) {
                new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                return;
            }
            netMusicInCollectionCurrPage = destPage;
            collectionGoPageAction.run();
        });
        collectionRecordTypeComboBox.setVisible(false);
        // 控制按钮大小
        Dimension dimension = new Dimension(20, 20);
        collectionRefreshButton.setPreferredSize(dimension);
        collectionStartPageButton.setPreferredSize(dimension);
        collectionLastPageButton.setPreferredSize(dimension);
        collectionGoButton.setPreferredSize(dimension);
        collectionNextPageButton.setPreferredSize(dimension);
        collectionEndPageButton.setPreferredSize(dimension);
        // 按钮悬浮与点击效果
        collectionBackwardButton.addMouseListener(new ButtonMouseListener(collectionBackwardButton, THIS));
        collectionPlayAllButton.addMouseListener(new ButtonMouseListener(collectionPlayAllButton, THIS));
        collectionRefreshButton.addMouseListener(new ButtonMouseListener(collectionRefreshButton, THIS));
        collectionStartPageButton.addMouseListener(new ButtonMouseListener(collectionStartPageButton, THIS));
        collectionLastPageButton.addMouseListener(new ButtonMouseListener(collectionLastPageButton, THIS));
        collectionGoButton.addMouseListener(new ButtonMouseListener(collectionGoButton, THIS));
        collectionNextPageButton.addMouseListener(new ButtonMouseListener(collectionNextPageButton, THIS));
        collectionEndPageButton.addMouseListener(new ButtonMouseListener(collectionEndPageButton, THIS));
        // 提示语
        collectionBackwardButton.setToolTipText(BACKWARD_TIP);
        collectionPlayAllButton.setToolTipText(PLAY_ALL_TIP);
        collectionRefreshButton.setToolTipText(REFRESH_TIP);
        collectionStartPageButton.setToolTipText(START_PAGE_TIP);
        collectionLastPageButton.setToolTipText(LAST_PAGE_TIP);
        collectionGoButton.setToolTipText(GO_TIP);
        collectionNextPageButton.setToolTipText(NEXT_PAGE_TIP);
        collectionEndPageButton.setToolTipText(END_PAGE_TIP);

        // 收藏歌单/专辑/歌手/电台/榜单中歌曲的工具栏，暂时不放入
        musicCollectionToolBar.add(collectionBackwardButton);
        musicCollectionToolBar.add(Box.createHorizontalGlue());

        // 数量标签
        collectionCountPanel.add(collectionRecordTypeComboBox);
        collectionCountPanel.add(collectionPlayAllButton);
        collectionCountPanel.add(collectionStartPageButton);
        collectionCountPanel.add(collectionLastPageButton);
        collectionCountPanel.add(collectionCountLabel);
        collectionCountPanel.add(collectionNextPageButton);
        collectionCountPanel.add(collectionEndPageButton);
        collectionCountPanel.add(collectionRefreshButton);
        collectionCountPanel.add(collectionPageTextField);
        collectionCountPanel.add(collectionGoButton);
        collectionCountPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        collectionLeftBox.add(collectionCountPanel);
    }

    // 初始化收藏列表
    private void collectionListInit() {
        collectionList.setModel(playlistCollectionModel);
        collectionList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    openCollectionItemAction.run();
                }
            }
        });
        collectionList.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int index = collectionList.locationToIndex(e.getPoint());
                Rectangle bounds = collectionList.getCellBounds(index, index);
                if (bounds == null) return;
                setHoverIndex(bounds.contains(e.getPoint()) ? index : -1);
            }

            private void setHoverIndex(int index) {
                TranslucentItemRecommendListRenderer renderer = (TranslucentItemRecommendListRenderer) collectionList.getCellRenderer();
                if (renderer == null) return;
                int hoverIndex = renderer.getHoverIndex();
                if (hoverIndex == index) return;
                renderer.setHoverIndex(index);
                collectionList.repaint();
            }
        });
        collectionList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                TranslucentItemRecommendListRenderer renderer = (TranslucentItemRecommendListRenderer) collectionList.getCellRenderer();
                if (renderer == null) return;
                renderer.setHoverIndex(-1);
                collectionList.repaint();
            }
        });
        openCollectionItemAction = () -> {
            Object o = collectionList.getSelectedValue();
            // 打开的是 MV
            if (o instanceof NetMvInfo) {
                playMv(MvType.COLLECTION);
                return;
            }
            loadingAndRun(() -> {
                LinkedList<Future<?>> taskList = new LinkedList<>();
                // 打开的是歌单
                if (o instanceof NetPlaylistInfo) {
                    NetPlaylistInfo playlistInfo = (NetPlaylistInfo) o;
                    // 加载封面图片和描述
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        BufferedImage coverImg = ImageUtils.borderShadow(ImageUtils.dye(loadingImage, currUIStyle.getLabelColor()));
                        collectionItemCoverAndNameLabel.setIcon(new ImageIcon(coverImg));
                        collectionItemCoverAndNameLabel.setText(LOADING_MSG);
                        collectionItemTagLabel.setText(LOADING_MSG);
                        collectionItemTagLabel.setVisible(true);
                        collectionItemDescriptionLabel.setText(LOADING_MSG);
                        collectionItemDescriptionLabel.setIcon(null);
                        GlobalExecutors.imageExecutor.execute(() -> {
                            try {
                                MusicServerUtils.fillPlaylistInfo(playlistInfo);
                                collectionItemCoverAndNameLabel.setText(StringUtils.textToHtml(playlistInfo.getName()));
                                if (playlistInfo.getTag() != null)
                                    collectionItemTagLabel.setText(StringUtils.textToHtml("".equals(playlistInfo.getTag()) ? "" : "标签：" + playlistInfo.getTag()));
                                if (playlistInfo.getDescription() != null)
                                    collectionItemDescriptionLabel.setText(StringUtils.textToHtml(playlistInfo.getDescription()));
                                if (playlistInfo.hasCoverImg()) {
                                    collectionItemCoverAndNameLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(playlistInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                } else {
                                    playlistInfo.setInvokeLater(() -> {
                                        collectionItemCoverAndNameLabel.setIcon(new ImageIcon(
                                                ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(playlistInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                        ));
                                        collectionList.repaint();
                                    });
                                }
                            } catch (HttpException e) {
                                collectionItemCoverAndNameLabel.setText(LOAD_FAILED);
                                collectionItemTagLabel.setText(LOAD_FAILED);
                                collectionItemDescriptionLabel.setText(LOAD_FAILED);
                            }
                        });
                    }));

                    // 得到歌单的音乐信息
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        try {
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInPlaylist(
                                    playlistInfo.getId(), playlistInfo.getSource(), limit, netMusicInCollectionCurrPage = 1);
                            List<NetMusicInfo> musicInfos = result.data;
                            int total = result.total;
                            netMusicInCollectionMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            // 更新歌单歌曲数量显示
//                                currcollectionLabel.setText(StringUtils.textToHtml(playlistInfo.getName()));
                            collectionCountLabel.setText(String.format(PAGINATION_MSG, netMusicInCollectionCurrPage, netMusicInCollectionMaxPage));
                            collectionItemListCountBox.add(collectionCountPanel);
                            javax.swing.plaf.ComboBoxUI ui = collectionRecordTypeComboBox.getUI();
                            SwingUtilities.updateComponentTreeUI(collectionCountPanel);
                            collectionItemListCountBox.add(netMusicScrollPane);
                            collectionItemListBox.add(collectionItemListCountBox);
                            // 歌单列表切换到在线音乐列表
                            netMusicList.setModel(netMusicListForPlaylistCollectionModel);
                            collectionLeftBox.add(collectionItemListBox);
                            // 收藏工具栏添加，需要更新 LAF
                            collectionLeftBox.add(musicCollectionToolBar, 0);
                            SwingUtilities.updateComponentTreeUI(musicCollectionToolBar);
                            collectionRecordTypeComboBox.setUI(ui);
                            // 添加数据建议弄到更新数量显示之后，不然可能会不显示！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForPlaylistCollectionModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForPlaylistCollectionModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForPlaylistCollectionModel);
                            collectionItemDescriptionScrollPane.getVerticalScrollBar().setValue(0);
                            netMusicScrollPane.getVerticalScrollBar().setValue(0);
                            if (netMusicListForPlaylistCollectionModel.isEmpty()) {
                                collectionItemListCountBox.remove(netMusicScrollPane);
                                collectionItemListCountBox.add(emptyHintPanel);
                            } else {
                                collectionItemListCountBox.remove(emptyHintPanel);
                                collectionItemListCountBox.add(netMusicScrollPane);
                            }
                            tabbedPane.setComponentAt(TabIndex.PERSONAL, collectionLeftBox);

                            // 切换后一定要刷新！
                            collectionLeftBox.repaint();
                        } catch (IORuntimeException runtimeException) {
                            // 无网络连接
                            new TipDialog(THIS, NO_NET_MSG).showDialog();
                        } catch (HttpException httpException) {
                            // 请求超时
                            new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                        } catch (JSONException jsonException) {
                            // 接口问题
                            new TipDialog(THIS, API_ERROR_MSG).showDialog();
                        }
                    }));
                }
                // 打开的是专辑
                else if (o instanceof NetAlbumInfo) {
                    NetAlbumInfo albumInfo = (NetAlbumInfo) o;
                    // 加载封面图片和描述
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        BufferedImage coverImg = ImageUtils.borderShadow(ImageUtils.dye(loadingImage, currUIStyle.getLabelColor()));
                        collectionItemCoverAndNameLabel.setIcon(new ImageIcon(coverImg));
                        collectionItemCoverAndNameLabel.setText(LOADING_MSG);
                        collectionItemTagLabel.setText("");
                        collectionItemTagLabel.setVisible(false);
                        collectionItemDescriptionLabel.setText(LOADING_MSG);
                        collectionItemDescriptionLabel.setIcon(null);
                        GlobalExecutors.imageExecutor.execute(() -> {
                            try {
                                MusicServerUtils.fillAlbumInfo(albumInfo);
                                collectionItemCoverAndNameLabel.setText(StringUtils.textToHtml(albumInfo.getName()));
                                if (albumInfo.getDescription() != null)
                                    collectionItemDescriptionLabel.setText(StringUtils.textToHtml(albumInfo.getDescription()));
                                if (albumInfo.hasCoverImg()) {
                                    collectionItemCoverAndNameLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(albumInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                } else {
                                    albumInfo.setInvokeLater(() -> {
                                        collectionItemCoverAndNameLabel.setIcon(new ImageIcon(
                                                ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(albumInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                        ));
                                        collectionList.repaint();
                                    });
                                }
                            } catch (HttpException e) {
                                collectionItemCoverAndNameLabel.setText(LOAD_FAILED);
                                collectionItemDescriptionLabel.setText(LOAD_FAILED);
                            }
                        });
                    }));

                    // 得到专辑的音乐信息
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        try {
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInAlbum(
                                    albumInfo.getId(), albumInfo.getSource(), limit, netMusicInCollectionCurrPage = 1);
                            List<NetMusicInfo> musicInfos = result.data;
                            int total = result.total;
                            netMusicInCollectionMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            // 更新专辑歌曲数量显示
//                                currcollectionLabel.setText(StringUtils.textToHtml(albumInfo.getName()));
                            collectionCountLabel.setText(String.format(PAGINATION_MSG, netMusicInCollectionCurrPage, netMusicInCollectionMaxPage));
                            collectionItemListCountBox.add(collectionCountPanel);
                            javax.swing.plaf.ComboBoxUI ui = collectionRecordTypeComboBox.getUI();
                            SwingUtilities.updateComponentTreeUI(collectionCountPanel);
                            collectionItemListCountBox.add(netMusicScrollPane);
                            collectionItemListBox.add(collectionItemListCountBox);
                            // 专辑列表切换到在线音乐列表
                            netMusicList.setModel(netMusicListForAlbumCollectionModel);
                            collectionLeftBox.add(collectionItemListBox);
                            // 收藏工具栏添加，需要更新 LAF
                            collectionLeftBox.add(musicCollectionToolBar, 0);
                            SwingUtilities.updateComponentTreeUI(musicCollectionToolBar);
                            collectionRecordTypeComboBox.setUI(ui);
                            // 添加数据建议弄到更新数量显示之后，不然可能会不显示！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForAlbumCollectionModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForAlbumCollectionModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForAlbumCollectionModel);
                            collectionItemDescriptionScrollPane.getVerticalScrollBar().setValue(0);
                            netMusicScrollPane.getVerticalScrollBar().setValue(0);
                            if (netMusicListForAlbumCollectionModel.isEmpty()) {
                                collectionItemListCountBox.remove(netMusicScrollPane);
                                collectionItemListCountBox.add(emptyHintPanel);
                            } else {
                                collectionItemListCountBox.remove(emptyHintPanel);
                                collectionItemListCountBox.add(netMusicScrollPane);
                            }
                            tabbedPane.setComponentAt(TabIndex.PERSONAL, collectionLeftBox);

                            // 切换后一定要刷新！
                            collectionLeftBox.repaint();
                        } catch (IORuntimeException runtimeException) {
                            // 无网络连接
                            new TipDialog(THIS, NO_NET_MSG).showDialog();
                        } catch (HttpException httpException) {
                            // 请求超时
                            new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                        } catch (JSONException jsonException) {
                            // 接口问题
                            new TipDialog(THIS, API_ERROR_MSG).showDialog();
                        }
                    }));
                }
                // 打开的是歌手
                else if (o instanceof NetArtistInfo) {
                    NetArtistInfo artistInfo = (NetArtistInfo) o;
                    // 加载封面图片和描述
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        BufferedImage coverImg = ImageUtils.borderShadow(ImageUtils.dye(loadingImage, currUIStyle.getLabelColor()));
                        collectionItemCoverAndNameLabel.setIcon(new ImageIcon(coverImg));
                        collectionItemCoverAndNameLabel.setText(LOADING_MSG);
                        collectionItemTagLabel.setText(LOADING_MSG);
                        collectionItemTagLabel.setVisible(true);
                        collectionItemDescriptionLabel.setText(LOADING_MSG);
                        collectionItemDescriptionLabel.setIcon(null);
                        GlobalExecutors.imageExecutor.execute(() -> {
                            try {
                                MusicServerUtils.fillArtistInfo(artistInfo);
                                collectionItemCoverAndNameLabel.setText(StringUtils.textToHtml(artistInfo.getName()));
                                if (artistInfo.getTag() != null)
                                    collectionItemTagLabel.setText(StringUtils.textToHtml("".equals(artistInfo.getTag()) ? "" : artistInfo.getTag()));
                                if (artistInfo.getDescription() != null)
                                    collectionItemDescriptionLabel.setText(StringUtils.textToHtml(artistInfo.getDescription()));
                                if (artistInfo.hasCoverImg()) {
                                    collectionItemCoverAndNameLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(artistInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                } else {
                                    artistInfo.setInvokeLater(() -> {
                                        collectionItemCoverAndNameLabel.setIcon(new ImageIcon(
                                                ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(artistInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                        ));
                                        collectionList.repaint();
                                    });
                                }
                            } catch (HttpException e) {
                                collectionItemCoverAndNameLabel.setText(LOAD_FAILED);
                                collectionItemTagLabel.setText(LOAD_FAILED);
                                collectionItemDescriptionLabel.setText(LOAD_FAILED);
                            }
                        });
                    }));

                    // 得到歌手的音乐信息
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        try {
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInArtist(
                                    artistInfo.getId(), artistInfo.getSource(), limit, netMusicInCollectionCurrPage = 1);
                            List<NetMusicInfo> musicInfos = result.data;
                            int total = result.total;
                            netMusicInCollectionMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            // 更新歌手歌曲数量显示
//                                currcollectionLabel.setText(StringUtils.textToHtml(artistInfo.getName()));
                            collectionCountLabel.setText(String.format(PAGINATION_MSG, netMusicInCollectionCurrPage, netMusicInCollectionMaxPage));
                            collectionItemListCountBox.add(collectionCountPanel);
                            javax.swing.plaf.ComboBoxUI ui = collectionRecordTypeComboBox.getUI();
                            SwingUtilities.updateComponentTreeUI(collectionCountPanel);
                            collectionItemListCountBox.add(netMusicScrollPane);
                            collectionItemListBox.add(collectionItemListCountBox);
                            // 歌手列表切换到在线音乐列表
                            netMusicList.setModel(netMusicListForArtistCollectionModel);
                            collectionLeftBox.add(collectionItemListBox);
                            // 收藏工具栏添加，需要更新 LAF
                            collectionLeftBox.add(musicCollectionToolBar, 0);
                            SwingUtilities.updateComponentTreeUI(musicCollectionToolBar);
                            collectionRecordTypeComboBox.setUI(ui);
                            // 添加数据建议弄到更新数量显示之后，不然可能会不显示！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForArtistCollectionModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForArtistCollectionModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForArtistCollectionModel);
                            collectionItemDescriptionScrollPane.getVerticalScrollBar().setValue(0);
                            netMusicScrollPane.getVerticalScrollBar().setValue(0);
                            if (netMusicListForArtistCollectionModel.isEmpty()) {
                                collectionItemListCountBox.remove(netMusicScrollPane);
                                collectionItemListCountBox.add(emptyHintPanel);
                            } else {
                                collectionItemListCountBox.remove(emptyHintPanel);
                                collectionItemListCountBox.add(netMusicScrollPane);
                            }
                            tabbedPane.setComponentAt(TabIndex.PERSONAL, collectionLeftBox);

                            // 切换后一定要刷新！
                            collectionLeftBox.repaint();
                        } catch (IORuntimeException runtimeException) {
                            // 无网络连接
                            new TipDialog(THIS, NO_NET_MSG).showDialog();
                        } catch (HttpException httpException) {
                            // 请求超时
                            new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                        } catch (JSONException jsonException) {
                            // 接口问题
                            new TipDialog(THIS, API_ERROR_MSG).showDialog();
                        }
                    }));
                }
                // 打开的是电台
                else if (o instanceof NetRadioInfo) {
                    NetRadioInfo radioInfo = (NetRadioInfo) o;
                    // 加载封面图片和描述
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        BufferedImage coverImg = ImageUtils.borderShadow(ImageUtils.dye(loadingImage, currUIStyle.getLabelColor()));
                        collectionItemCoverAndNameLabel.setIcon(new ImageIcon(coverImg));
                        collectionItemCoverAndNameLabel.setText(LOADING_MSG);
                        collectionItemTagLabel.setText(LOADING_MSG);
                        collectionItemTagLabel.setVisible(true);
                        collectionItemDescriptionLabel.setText(LOADING_MSG);
                        collectionItemDescriptionLabel.setIcon(null);
                        GlobalExecutors.imageExecutor.execute(() -> {
                            try {
                                MusicServerUtils.fillRadioInfo(radioInfo);
                                collectionItemCoverAndNameLabel.setText(StringUtils.textToHtml(radioInfo.getName()));
                                if (radioInfo.getTag() != null)
                                    collectionItemTagLabel.setText(StringUtils.textToHtml("".equals(radioInfo.getTag()) ? "" : "标签：" + radioInfo.getTag()));
                                if (radioInfo.getDescription() != null)
                                    collectionItemDescriptionLabel.setText(StringUtils.textToHtml(radioInfo.getDescription()));
                                if (radioInfo.hasCoverImg()) {
                                    collectionItemCoverAndNameLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(radioInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                } else {
                                    radioInfo.setInvokeLater(() -> {
                                        collectionItemCoverAndNameLabel.setIcon(new ImageIcon(
                                                ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(radioInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                        ));
                                        collectionList.repaint();
                                    });
                                }
                            } catch (HttpException e) {
                                collectionItemCoverAndNameLabel.setText(LOAD_FAILED);
                                collectionItemTagLabel.setText(LOAD_FAILED);
                                collectionItemDescriptionLabel.setText(LOAD_FAILED);
                            }
                        });
                    }));

                    // 得到电台的音乐信息
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        try {
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInRadio(radioInfo, limit, netMusicInCollectionCurrPage = 1);
                            List<NetMusicInfo> musicInfos = result.data;
                            int total = result.total;
                            netMusicInCollectionMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            // 更新电台歌曲数量显示
//                                currcollectionLabel.setText(StringUtils.textToHtml(radioInfo.getName()));
                            collectionCountLabel.setText(String.format(PAGINATION_MSG, netMusicInCollectionCurrPage, netMusicInCollectionMaxPage));
                            collectionItemListCountBox.add(collectionCountPanel);
                            javax.swing.plaf.ComboBoxUI ui = collectionRecordTypeComboBox.getUI();
                            SwingUtilities.updateComponentTreeUI(collectionCountPanel);
                            collectionItemListCountBox.add(netMusicScrollPane);
                            collectionItemListBox.add(collectionItemListCountBox);
                            // 电台列表切换到在线音乐列表
                            netMusicList.setModel(netMusicListForRadioCollectionModel);
                            collectionLeftBox.add(collectionItemListBox);
                            // 收藏工具栏添加，需要更新 LAF
                            collectionLeftBox.add(musicCollectionToolBar, 0);
                            SwingUtilities.updateComponentTreeUI(musicCollectionToolBar);
                            collectionRecordTypeComboBox.setUI(ui);
                            // 添加数据建议弄到更新数量显示之后，不然可能会不显示！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForRadioCollectionModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForRadioCollectionModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForRadioCollectionModel);
                            collectionItemDescriptionScrollPane.getVerticalScrollBar().setValue(0);
                            netMusicScrollPane.getVerticalScrollBar().setValue(0);
                            if (netMusicListForRadioCollectionModel.isEmpty()) {
                                collectionItemListCountBox.remove(netMusicScrollPane);
                                collectionItemListCountBox.add(emptyHintPanel);
                            } else {
                                collectionItemListCountBox.remove(emptyHintPanel);
                                collectionItemListCountBox.add(netMusicScrollPane);
                            }
                            tabbedPane.setComponentAt(TabIndex.PERSONAL, collectionLeftBox);

                            // 切换后一定要刷新！
                            collectionLeftBox.repaint();
                        } catch (IORuntimeException runtimeException) {
                            // 无网络连接
                            new TipDialog(THIS, NO_NET_MSG).showDialog();
                        } catch (HttpException httpException) {
                            // 请求超时
                            new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                        } catch (JSONException jsonException) {
                            // 接口问题
                            new TipDialog(THIS, API_ERROR_MSG).showDialog();
                        }
                    }));
                }
                // 打开的是榜单
                else if (o instanceof NetRankingInfo) {
                    NetRankingInfo rankingInfo = (NetRankingInfo) o;
                    // 加载封面图片和描述
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        BufferedImage coverImg = ImageUtils.borderShadow(ImageUtils.dye(loadingImage, currUIStyle.getLabelColor()));
                        collectionItemCoverAndNameLabel.setIcon(new ImageIcon(coverImg));
                        collectionItemCoverAndNameLabel.setText(LOADING_MSG);
                        collectionItemTagLabel.setText("");
                        collectionItemTagLabel.setVisible(false);
                        collectionItemDescriptionLabel.setText(LOADING_MSG);
                        collectionItemDescriptionLabel.setIcon(null);
                        GlobalExecutors.imageExecutor.execute(() -> {
                            try {
                                MusicServerUtils.fillRankingInfo(rankingInfo);
                                collectionItemCoverAndNameLabel.setText(StringUtils.textToHtml(rankingInfo.getName()));
                                if (rankingInfo.getDescription() != null)
                                    collectionItemDescriptionLabel.setText(StringUtils.textToHtml(rankingInfo.getDescription()));
                                if (rankingInfo.hasCoverImg()) {
                                    collectionItemCoverAndNameLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(rankingInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                } else {
                                    rankingInfo.setInvokeLater(() -> {
                                        collectionItemCoverAndNameLabel.setIcon(new ImageIcon(
                                                ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(rankingInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                        ));
                                        collectionList.repaint();
                                    });
                                }
                            } catch (HttpException e) {
                                collectionItemCoverAndNameLabel.setText(LOAD_FAILED);
                                collectionItemDescriptionLabel.setText(LOAD_FAILED);
                            }
                        });
                    }));

                    // 得到榜单的音乐信息
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        try {
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInRanking(
                                    rankingInfo.getId(), rankingInfo.getSource(), limit, netMusicInCollectionCurrPage = 1);
                            List<NetMusicInfo> musicInfos = result.data;
                            int total = result.total;
                            netMusicInCollectionMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            // 更新榜单歌曲数量显示
                            collectionCountLabel.setText(String.format(PAGINATION_MSG, netMusicInCollectionCurrPage, netMusicInCollectionMaxPage));
                            collectionItemListCountBox.add(collectionCountPanel);
                            javax.swing.plaf.ComboBoxUI ui = collectionRecordTypeComboBox.getUI();
                            SwingUtilities.updateComponentTreeUI(collectionCountPanel);
                            collectionItemListCountBox.add(netMusicScrollPane);
                            collectionItemListBox.add(collectionItemListCountBox);
                            // 榜单列表切换到在线音乐列表
                            netMusicList.setModel(netMusicListForRankingCollectionModel);
                            collectionLeftBox.add(collectionItemListBox);
                            // 收藏工具栏添加，需要更新 LAF
                            collectionLeftBox.add(musicCollectionToolBar, 0);
                            SwingUtilities.updateComponentTreeUI(musicCollectionToolBar);
                            collectionRecordTypeComboBox.setUI(ui);
                            // 添加数据建议弄到更新数量显示之后，不然可能会不显示！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForRankingCollectionModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForRankingCollectionModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForRankingCollectionModel);
                            collectionItemDescriptionScrollPane.getVerticalScrollBar().setValue(0);
                            netMusicScrollPane.getVerticalScrollBar().setValue(0);
                            if (netMusicListForRankingCollectionModel.isEmpty()) {
                                collectionItemListCountBox.remove(netMusicScrollPane);
                                collectionItemListCountBox.add(emptyHintPanel);
                            } else {
                                collectionItemListCountBox.remove(emptyHintPanel);
                                collectionItemListCountBox.add(netMusicScrollPane);
                            }
                            tabbedPane.setComponentAt(TabIndex.PERSONAL, collectionLeftBox);

                            // 切换后一定要刷新！
                            collectionLeftBox.repaint();
                        } catch (IORuntimeException runtimeException) {
                            // 无网络连接
                            new TipDialog(THIS, NO_NET_MSG).showDialog();
                        } catch (HttpException httpException) {
                            // 请求超时
                            new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                        } catch (JSONException jsonException) {
                            // 接口问题
                            new TipDialog(THIS, API_ERROR_MSG).showDialog();
                        }
                    }));
                }
                // 打开的是用户
                else if (o instanceof NetUserInfo) {
                    NetUserInfo userInfo = (NetUserInfo) o;
                    // 加载封面图片和描述
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        BufferedImage coverImg = ImageUtils.borderShadow(ImageUtils.dye(loadingImage, currUIStyle.getLabelColor()));
                        ImageIcon icon = new ImageIcon(coverImg);
                        collectionItemCoverAndNameLabel.setIcon(icon);
                        collectionItemCoverAndNameLabel.setText(LOADING_MSG);
                        collectionItemTagLabel.setText("");
                        collectionItemTagLabel.setVisible(true);
                        collectionItemDescriptionLabel.setText(LOADING_MSG);
                        collectionItemDescriptionLabel.setIcon(icon);
                        GlobalExecutors.imageExecutor.execute(() -> {
                            try {
                                MusicServerUtils.fillUserInfo(userInfo);
                                collectionItemCoverAndNameLabel.setText(StringUtils.textToHtml(userInfo.getName()));
                                collectionItemTagLabel.setText(StringUtils.textToHtml(userInfo.getTag()));
                                if (userInfo.getSign() != null)
                                    collectionItemDescriptionLabel.setText(StringUtils.textToHtml(userInfo.getSign()));
                                if (userInfo.hasAvatar()) {
                                    collectionItemCoverAndNameLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(userInfo.getAvatar(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                } else {
                                    userInfo.setInvokeLater(() -> {
                                        collectionItemCoverAndNameLabel.setIcon(new ImageIcon(
                                                ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(userInfo.getAvatar(), coverImageWidth), MIDDLE_ARC))
                                        ));
                                        collectionList.repaint();
                                    });
                                }
                                if (userInfo.hasBgImg()) {
                                    collectionItemDescriptionLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(userInfo.getBgImg(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                } else {
                                    userInfo.setInvokeLater2(() -> {
                                        collectionItemDescriptionLabel.setIcon(new ImageIcon(
                                                ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(userInfo.getBgImg(), coverImageWidth), MIDDLE_ARC))
                                        ));
                                        collectionList.repaint();
                                    });
                                }
                            } catch (HttpException e) {
                                collectionItemCoverAndNameLabel.setText(LOAD_FAILED);
                                collectionItemDescriptionLabel.setText(LOAD_FAILED);
                            }
                        });
                    }));

                    // 得到用户的音乐信息
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        try {
                            // 网易云/猫耳用户才显示下拉框
                            if (userInfo.fromNetCloud())
                                collectionRecordTypeComboBox.setModel(collectionRecordTypeComboBoxModel);
                            else if (userInfo.fromME() || userInfo.fromBI())
                                collectionRecordTypeComboBox.setModel(collectionOrderComboBoxModel);

                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInUser(
                                    collectionRecordTypeComboBox.getSelectedIndex(), userInfo, limit, netMusicInCollectionCurrPage = 1);
                            List<NetMusicInfo> musicInfos = result.data;
                            int total = result.total;
                            netMusicInCollectionMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            // 更新用户歌曲数量显示
                            collectionCountLabel.setText(String.format(PAGINATION_MSG, netMusicInCollectionCurrPage, netMusicInCollectionMaxPage));
                            collectionItemListCountBox.add(collectionCountPanel);
                            javax.swing.plaf.ComboBoxUI ui = collectionRecordTypeComboBox.getUI();
                            SwingUtilities.updateComponentTreeUI(collectionCountPanel);
                            collectionItemListCountBox.add(netMusicScrollPane);
                            collectionItemListBox.add(collectionItemListCountBox);
                            // 用户列表切换到在线音乐列表
                            netMusicList.setModel(netMusicListForUserCollectionModel);
                            collectionLeftBox.add(collectionItemListBox);
                            // 收藏工具栏添加，需要更新 LAF
                            collectionLeftBox.add(musicCollectionToolBar, 0);
                            SwingUtilities.updateComponentTreeUI(musicCollectionToolBar);
                            collectionRecordTypeComboBox.setUI(ui);
                            collectionRecordTypeComboBox.setVisible(userInfo.fromNetCloud() || userInfo.fromME() || userInfo.fromBI());
                            // 添加数据建议弄到更新数量显示之后，不然可能会不显示！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForUserCollectionModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForUserCollectionModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForUserCollectionModel);
                            collectionItemDescriptionScrollPane.getVerticalScrollBar().setValue(0);
                            netMusicScrollPane.getVerticalScrollBar().setValue(0);
                            if (netMusicListForUserCollectionModel.isEmpty()) {
                                collectionItemListCountBox.remove(netMusicScrollPane);
                                collectionItemListCountBox.add(emptyHintPanel);
                            } else {
                                collectionItemListCountBox.remove(emptyHintPanel);
                                collectionItemListCountBox.add(netMusicScrollPane);
                            }
                            tabbedPane.setComponentAt(TabIndex.PERSONAL, collectionLeftBox);

                            // 切换后一定要刷新！
                            collectionLeftBox.repaint();
                        } catch (IORuntimeException runtimeException) {
                            // 无网络连接
                            new TipDialog(THIS, NO_NET_MSG).showDialog();
                        } catch (HttpException httpException) {
                            // 请求超时
                            new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                        } catch (JSONException jsonException) {
                            // 接口问题
                            new TipDialog(THIS, API_ERROR_MSG).showDialog();
                        }
                    }));
                }

                taskList.forEach(task -> {
                    try {
                        task.get();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    } catch (ExecutionException e) {
                        e.printStackTrace();
                    }
                });
            });
        };
        collectionList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                // 鼠标左键双击打开歌单/专辑/歌手/电台/MV
                if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    openCollectionItemAction.run();
                }

                // 右键收藏列表
                else if (e.getButton() == MouseEvent.BUTTON3) {
                    if (collectionList.getModel().getSize() != 0) {
                        // 得到鼠标光标所在的选项并选中
                        int index = collectionList.locationToIndex(e.getPoint());
                        if (index != -1 && !collectionList.isSelectedIndex(index)
                                || collectionList.isSelectedIndex(index) && collectionList.getSelectedIndices().length == 1) {
                            collectionList.setSelectedIndex(index);
                        }
                        int selectedIndex = collectionTabbedPane.getSelectedIndex();
                        if (selectedIndex == CollectionTabIndex.PLAYLIST) {
                            netPlaylistCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                            netPlaylistCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);

//                            SwingUtilities.updateComponentTreeUI(netPlaylistPopupMenu);
                            netPlaylistPopupMenu.show(collectionList, e.getX(), e.getY());
                        } else if (selectedIndex == CollectionTabIndex.ALBUM) {
                            netAlbumCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                            netAlbumCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);

//                            SwingUtilities.updateComponentTreeUI(netAlbumPopupMenu);
                            netAlbumPopupMenu.show(collectionList, e.getX(), e.getY());
                        } else if (selectedIndex == CollectionTabIndex.ARTIST) {
                            netArtistCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                            netArtistCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);

//                            SwingUtilities.updateComponentTreeUI(netArtistPopupMenu);
                            netArtistPopupMenu.show(collectionList, e.getX(), e.getY());
                        } else if (selectedIndex == CollectionTabIndex.RADIO) {
                            netRadioCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                            netRadioCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);

//                            SwingUtilities.updateComponentTreeUI(netRadioPopupMenu);
                            netRadioPopupMenu.show(collectionList, e.getX(), e.getY());
                        } else if (selectedIndex == CollectionTabIndex.MV) {
                            netMvCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                            netMvCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);

//                            SwingUtilities.updateComponentTreeUI(netMvPopupMenu);
                            netMvPopupMenu.show(collectionList, e.getX(), e.getY());
                        } else if (selectedIndex == CollectionTabIndex.RANKING) {
                            netRankingCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                            netRankingCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);

//                            SwingUtilities.updateComponentTreeUI(netRankingPopupMenu);
                            netRankingPopupMenu.show(collectionList, e.getX(), e.getY());
                        } else if (selectedIndex == CollectionTabIndex.USER) {
                            netUserCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                            netUserCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);

//                            SwingUtilities.updateComponentTreeUI(netUserPopupMenu);
                            netUserPopupMenu.show(collectionList, e.getX(), e.getY());
                        }
                    }
                }
            }
        });
        // 最佳大小
        collectionScrollPane.setPreferredSize(new Dimension(200, 600));
        playlistCollectionLeftBox.add(collectionScrollPane);
    }

    // 初始化标签
    private void labelInit() {
        // 居中图片
        albumImageLabel.setHorizontalAlignment(SwingConstants.CENTER);
        // 导出专辑图片事件
        saveAlbumImageMenuItem.addActionListener(e -> {
            saveImg(player.getMusicInfo().getAlbumImage());
        });
        albumImagePopupMenu.add(saveAlbumImageMenuItem);
        albumImageLabel.setComponentPopupMenu(albumImagePopupMenu);
        albumImageLabel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON3 && player.getMusicInfo().hasAlbumImage()) {
                    albumImagePopupMenu.show(albumImageLabel, e.getX(), e.getY());
                }
            }
        });

        songNamePopupMenu.add(copySongNameMenuItem);
        artistPopupMenu.add(copyArtistMenuItem);
        albumPopupMenu.add(copyAlbumMenuItem);
        songNameLabel.setComponentPopupMenu(songNamePopupMenu);
        artistLabel.setComponentPopupMenu(artistPopupMenu);
        albumLabel.setComponentPopupMenu(albumPopupMenu);
        copySongNameMenuItem.addActionListener(e -> {
            StringSelection stringSelection
                    = new StringSelection(StringUtils.removeHTMLLabel(songNameLabel.getText().replaceFirst(SONG_NAME_LABEL, "")));
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });
        copyArtistMenuItem.addActionListener(e -> {
            StringSelection stringSelection
                    = new StringSelection(StringUtils.removeHTMLLabel(artistLabel.getText().replaceFirst(ARTIST_LABEL, "")));
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });
        copyAlbumMenuItem.addActionListener(e -> {
            StringSelection stringSelection
                    = new StringSelection(StringUtils.removeHTMLLabel(albumLabel.getText().replaceFirst(ALBUM_NAME_LABEL, "")));
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });

        // 添加左下的标签
        leftBottomBox.add(Box.createVerticalGlue());
        leftBottomBox.add(songNameLabel);
        leftBottomBox.add(Box.createVerticalGlue());
        leftBottomBox.add(artistLabel);
        leftBottomBox.add(Box.createVerticalGlue());
        leftBottomBox.add(albumLabel);
        leftBottomBox.add(Box.createVerticalGlue());
        // 专辑图片和下边所有标签整体
        leftInfoBox.add(Box.createVerticalGlue());        // 创建胶水使其填充位置(居中的方法)
        leftInfoBox.add(albumImageLabel);
        leftInfoBox.add(Box.createVerticalGlue());
        leftInfoBox.add(leftBottomBox);
        leftInfoBox.add(Box.createVerticalGlue());
        leftInfoBox.setBorder(BorderFactory.createEmptyBorder(0, 30, 0, 0));
        infoAndLrcBox.add(leftInfoBox);

        // 列表为空提示
        emptyHintPanel.setLayout(new GridLayout(1, 1));
        emptyHintPanel.add(emptyHintLabel);
        emptyHintPanel.setPreferredSize(new Dimension(260, 1000));
    }

    // 初始化个人音乐工具栏
    private void personalMusicToolBarInit() {
        // 离线音乐事件
        localMusicButton.addActionListener(e -> {
            currPersonalMusicTab = PersonalMusicTabIndex.LOCAL_MUSIC;
            updateTabButtonStyle();
            leftBox.remove(collectionTabbedPane);
            if (musicListModel.isEmpty()) {
                leftBox.remove(musicScrollPane);
                leftBox.add(emptyHintPanel);
            } else {
                leftBox.remove(emptyHintPanel);
                leftBox.add(musicScrollPane);
            }
            musicToolBar.add(addToolButton, 0);
            musicToolBar.add(reimportToolButton, 1);
            leftBox.repaint();
            // 筛选框活跃状态时进行筛选
            if (filterTextField.isOccupied()) filterPersonalMusic();
            else musicList.setModel(musicListModel);
            musicScrollPane.getVerticalScrollBar().setValue(0);
            countLabel.setText(String.format("共 %s 首", musicList.getModel().getSize()));
        });
        // 播放历史事件
        historyButton.addActionListener(e -> {
            currPersonalMusicTab = PersonalMusicTabIndex.HISTORY;
            updateTabButtonStyle();
            leftBox.remove(collectionTabbedPane);
            if (historyModel.isEmpty()) {
                leftBox.remove(musicScrollPane);
                leftBox.add(emptyHintPanel);
            } else {
                leftBox.remove(emptyHintPanel);
                leftBox.add(musicScrollPane);
            }
            musicToolBar.remove(addToolButton);
            musicToolBar.remove(reimportToolButton);
            leftBox.repaint();
            // 筛选框活跃状态时进行筛选
            if (filterTextField.isOccupied()) filterPersonalMusic();
            else musicList.setModel(historyModel);
            musicScrollPane.getVerticalScrollBar().setValue(0);
            countLabel.setText(String.format("共 %s 首", musicList.getModel().getSize()));
        });
        // 收藏事件
        collectionButton.addActionListener(e -> {
            currPersonalMusicTab = PersonalMusicTabIndex.COLLECTION;
            updateTabButtonStyle();

            // 收藏标签页
            leftBox.remove(emptyHintPanel);
            leftBox.remove(musicScrollPane);

            int index = collectionTabbedPane.getSelectedIndex();
            Box box = null;
            DefaultListModel model = null;
            if (index == CollectionTabIndex.MUSIC) {
                box = musicCollectionLeftBox;
                model = collectionModel;
            } else if (index == CollectionTabIndex.PLAYLIST) {
                box = playlistCollectionLeftBox;
                model = playlistCollectionModel;
            } else if (index == CollectionTabIndex.ALBUM) {
                box = albumCollectionLeftBox;
                model = albumCollectionModel;
            } else if (index == CollectionTabIndex.ARTIST) {
                box = artistCollectionLeftBox;
                model = artistCollectionModel;
            } else if (index == CollectionTabIndex.RADIO) {
                box = radioCollectionLeftBox;
                model = radioCollectionModel;
            } else if (index == CollectionTabIndex.MV) {
                box = mvCollectionLeftBox;
                model = mvCollectionModel;
            } else if (index == CollectionTabIndex.RANKING) {
                box = rankingCollectionLeftBox;
                model = rankingCollectionModel;
            } else if (index == CollectionTabIndex.USER) {
                box = userCollectionLeftBox;
                model = userCollectionModel;
            }
            if (model.isEmpty()) {
                box.remove(index == CollectionTabIndex.MUSIC ? musicScrollPane : collectionScrollPane);
                box.add(emptyHintPanel);
            } else {
                box.remove(emptyHintPanel);
                box.add(index == CollectionTabIndex.MUSIC ? musicScrollPane : collectionScrollPane);
            }
            leftBox.add(collectionTabbedPane);

            musicToolBar.remove(addToolButton);
            musicToolBar.remove(reimportToolButton);
            leftBox.repaint();

            int selectedIndex = collectionTabbedPane.getSelectedIndex();
            // 筛选框活跃状态时进行筛选
            if (filterTextField.isOccupied()) filterPersonalMusic();
            else musicList.setModel(collectionModel);
            musicScrollPane.getVerticalScrollBar().setValue(0);

            if (selectedIndex == CollectionTabIndex.MUSIC)
                countLabel.setText(String.format("共 %s 首", musicList.getModel().getSize()));
            else countLabel.setText(String.format("共 %s 项", collectionList.getModel().getSize()));
        });
        // 按钮悬浮和点击效果
        localMusicButton.addMouseListener(new ButtonMouseListener(localMusicButton, THIS));
        historyButton.addMouseListener(new ButtonMouseListener(historyButton, THIS));
        collectionButton.addMouseListener(new ButtonMouseListener(collectionButton, THIS));
        // 按钮文字
        localMusicButton.setText(LOCAL_MUSIC_TIP);
        historyButton.setText(HISTORY_TIP);
        collectionButton.setText(COLLECTION_TIP);
        // 按钮文字与图标的位置
        int gap = 15;
        localMusicButton.setHorizontalTextPosition(SwingConstants.RIGHT);
        localMusicButton.setIconTextGap(gap);
        historyButton.setHorizontalTextPosition(SwingConstants.RIGHT);
        historyButton.setIconTextGap(gap);
        collectionButton.setHorizontalTextPosition(SwingConstants.RIGHT);
        collectionButton.setIconTextGap(gap);

        // 推荐工具栏网格布局
        personalMusicToolBar.setLayout(new GridLayout(1, 3));
        personalMusicToolBar.add(localMusicButton);
        personalMusicToolBar.add(historyButton);
        personalMusicToolBar.add(collectionButton);
        leftBox.add(personalMusicToolBar);
    }

    // 初始化离线音乐工具栏
    private void musicToolBarInit() {
        // 按钮悬浮和点击效果
        addToolButton.addMouseListener(new ButtonMouseListener(addToolButton, THIS));
        reimportToolButton.addMouseListener(new ButtonMouseListener(reimportToolButton, THIS));
        manageCatalogToolButton.addMouseListener(new ButtonMouseListener(manageCatalogToolButton, THIS));
        removeToolButton.addMouseListener(new ButtonMouseListener(removeToolButton, THIS));
        clearToolButton.addMouseListener(new ButtonMouseListener(clearToolButton, THIS));
        duplicateToolButton.addMouseListener(new ButtonMouseListener(duplicateToolButton, THIS));
        reverseToolButton.addMouseListener(new ButtonMouseListener(reverseToolButton, THIS));
        sortToolButton.addMouseListener(new ButtonMouseListener(sortToolButton, THIS));
        moveUpToolButton.addMouseListener(new ButtonMouseListener(moveUpToolButton, THIS));
        moveDownToolButton.addMouseListener(new ButtonMouseListener(moveDownToolButton, THIS));
        clearInputToolButton.addMouseListener(new ButtonMouseListener(clearInputToolButton, THIS));
        // 标签左间距
        countLabel.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));

        addPopupMenu.add(addFileMenuItem);
        addPopupMenu.add(addDirMenuItem);
        // 按钮绑定右键菜单，不过右键也会弹出
        addToolButton.setComponentPopupMenu(addPopupMenu);
        // 点击添加按钮事件
        addToolButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1) {
                    addPopupMenu.show(addToolButton, e.getX(), e.getY());
                }
            }
        });
        // 点击重新导入按钮事件
        reimportToolButton.addActionListener(e -> {
            ConfirmDialog confirmDialog = new ConfirmDialog(THIS, ASK_REIMPORT_MSG, "是", "否");
            confirmDialog.showDialog();
            int response = confirmDialog.getResponse();
            if (response == JOptionPane.YES_OPTION) {
                if (catalogs.isEmpty()) {
                    new TipDialog(THIS, NO_CATALOG_MSG).showDialog();
                    return;
                }
                ListModel model = musicList.getModel();
                musicList.setModel(emptyListModel);
                musicListModel.clear();
                int audioFileCount = 0;
                for (File dir : catalogs) {
                    // 文件夹不存在，跳过
                    if (!dir.exists()) continue;

                    File[] files = dir.listFiles();
                    for (File file : files) {
                        // 支持这种文件格式才添加
                        if (player.support(FileUtils.getSuffix(file))) {
                            audioFileCount++;
                            AudioFile audioFile = new AudioFile(file);
                            globalExecutor.submit(() -> {
                                MusicUtils.fillAudioFileInfo(audioFile);
                                musicList.repaint();
                            });
                            musicListModel.addElement(audioFile);
                        }
                    }
                }
                musicList.setModel(model);
                boolean f = musicList.getModel() == filterModel;
                filterPersonalMusic();
                if (!f) {
                    musicList.setModel(musicListModel);
                    countLabel.setText(String.format("共 %s 首", musicList.getModel().getSize()));
                }
                String msg = "成功添加 " + audioFileCount + " 首歌曲";
                new TipDialog(THIS, msg).showDialog();
            }
        });
        // 点击管理歌曲目录按钮事件
        manageCatalogToolButton.addActionListener(e -> {
            ManageCatalogDialog dialog = new ManageCatalogDialog(THIS, true);
            dialog.showDialog();
        });
        // 点击删除按钮事件
        removeToolButton.addActionListener(e -> {
            int selectedIndex = collectionTabbedPane.getSelectedIndex();
            if (currPersonalMusicTab != PersonalMusicTabIndex.COLLECTION
                    || selectedIndex == CollectionTabIndex.MUSIC) {
                List selectedValues = musicList.getSelectedValuesList();
                if (selectedValues.size() != 0) {
                    ConfirmDialog confirmDialog = new ConfirmDialog(THIS, ASK_REMOVE_ITEMS_MSG, "是", "否");
                    confirmDialog.showDialog();
                    int response = confirmDialog.getResponse();
                    // 删除选中的文件
                    if (response == JOptionPane.YES_OPTION) {
                        DefaultListModel<Object> model = (DefaultListModel<Object>) musicList.getModel();
                        // 解决删除元素带来的性能问题
                        ListCellRenderer r = musicList.getCellRenderer();
                        musicList.setCellRenderer(null);
                        for (Object o : selectedValues) {
                            // 改变取消收藏状态
                            if (currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION && player.isPlayingObject(o) && hasBeenCollected(o))
                                collectButton.setIcon(ImageUtils.dye(collectIcon, currUIStyle.getButtonColor()));
                            model.removeElement(o);
                            if (model == filterModel) {
                                if (currPersonalMusicTab == PersonalMusicTabIndex.LOCAL_MUSIC)
                                    musicListModel.removeElement(o);
                                else if (currPersonalMusicTab == PersonalMusicTabIndex.HISTORY)
                                    historyModel.removeElement(o);
                                else if (currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION)
                                    collectionModel.removeElement(o);
                            }
                        }
                        musicList.setCellRenderer(r);
                        new TipDialog(THIS, REMOVE_SUCCESS_MSG).showDialog();
                    }
                }
            } else {
                List selectedValues = collectionList.getSelectedValuesList();
                if (selectedValues.size() != 0) {
                    ConfirmDialog confirmDialog = new ConfirmDialog(THIS,
                            ASK_REMOVE_ITEMS_MSG, "是", "否");
                    confirmDialog.showDialog();
                    int response = confirmDialog.getResponse();
                    // 删除选中的项目
                    if (response == JOptionPane.YES_OPTION) {
                        for (Object o : selectedValues) {
                            DefaultListModel<Object> model = (DefaultListModel<Object>) collectionList.getModel();
                            model.removeElement(o);
                            if (model == filterModel) {
                                if (selectedIndex == CollectionTabIndex.PLAYLIST)
                                    playlistCollectionModel.removeElement(o);
                                else if (selectedIndex == CollectionTabIndex.ALBUM)
                                    albumCollectionModel.removeElement(o);
                                else if (selectedIndex == CollectionTabIndex.ARTIST)
                                    artistCollectionModel.removeElement(o);
                                else if (selectedIndex == CollectionTabIndex.RADIO)
                                    radioCollectionModel.removeElement(o);
                                else if (selectedIndex == CollectionTabIndex.MV) mvCollectionModel.removeElement(o);
                                else if (selectedIndex == CollectionTabIndex.RANKING)
                                    rankingCollectionModel.removeElement(o);
                                else if (selectedIndex == CollectionTabIndex.USER)
                                    userCollectionModel.removeElement(o);
                            }
                        }
                        new TipDialog(THIS, REMOVE_SUCCESS_MSG).showDialog();
                    }
                }
            }
        });
        // 点击清空按钮事件
        clearToolButton.addActionListener(e -> {
            ConfirmDialog confirmDialog = new ConfirmDialog(THIS, ASK_CLEAR_LIST_MSG, "是", "否");
            confirmDialog.showDialog();
            int response = confirmDialog.getResponse();
            // 清空列表
            if (response == JOptionPane.YES_OPTION) {
                int selectedIndex = collectionTabbedPane.getSelectedIndex();
                if (currPersonalMusicTab != PersonalMusicTabIndex.COLLECTION
                        || selectedIndex == CollectionTabIndex.MUSIC) {
                    DefaultListModel<Object> model = (DefaultListModel<Object>) musicList.getModel();
                    musicList.setModel(emptyListModel);
                    model.clear();
                    if (model == filterModel) {
                        if (currPersonalMusicTab == PersonalMusicTabIndex.LOCAL_MUSIC)
                            musicListModel.clear();
                        else if (currPersonalMusicTab == PersonalMusicTabIndex.HISTORY)
                            historyModel.clear();
                        else if (currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION) {
                            collectionModel.clear();
                            collectButton.setIcon(ImageUtils.dye(collectIcon, currUIStyle.getButtonColor()));
                        }
                    } else if (model == collectionModel) {
                        collectButton.setIcon(ImageUtils.dye(collectIcon, currUIStyle.getButtonColor()));
                    }
                } else {
                    DefaultListModel<Object> model = (DefaultListModel<Object>) collectionList.getModel();
                    collectionList.setModel(emptyListModel);
                    model.clear();
                    if (model == filterModel) {
                        if (selectedIndex == CollectionTabIndex.PLAYLIST) playlistCollectionModel.clear();
                        else if (selectedIndex == CollectionTabIndex.ALBUM) albumCollectionModel.clear();
                        else if (selectedIndex == CollectionTabIndex.ARTIST) artistCollectionModel.clear();
                        else if (selectedIndex == CollectionTabIndex.RADIO) radioCollectionModel.clear();
                        else if (selectedIndex == CollectionTabIndex.MV) mvCollectionModel.clear();
                        else if (selectedIndex == CollectionTabIndex.RANKING) rankingCollectionModel.clear();
                        else if (selectedIndex == CollectionTabIndex.USER) userCollectionModel.clear();
                    }
                }
                new TipDialog(THIS, CLEAR_SUCCESS_MSG).showDialog();
            }
        });
        // 去重事件
        duplicateToolButton.addActionListener(e -> {
            ConfirmDialog confirmDialog = new ConfirmDialog(THIS, ASK_DUPLICATE_MSG, "是", "否");
            confirmDialog.showDialog();
            int response = confirmDialog.getResponse();
            if (response == JOptionPane.YES_OPTION) {
                Set<Object> set = new HashSet<>();
                DefaultListModel<Object> model = null;
                if (currPersonalMusicTab == PersonalMusicTabIndex.LOCAL_MUSIC) model = musicListModel;
                else if (currPersonalMusicTab == PersonalMusicTabIndex.HISTORY) model = historyModel;
                else if (currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION) {
                    int selectedIndex = collectionTabbedPane.getSelectedIndex();
                    if (selectedIndex == CollectionTabIndex.MUSIC) model = collectionModel;
                    else if (selectedIndex == CollectionTabIndex.PLAYLIST) model = playlistCollectionModel;
                    else if (selectedIndex == CollectionTabIndex.ALBUM) model = albumCollectionModel;
                    else if (selectedIndex == CollectionTabIndex.ARTIST) model = artistCollectionModel;
                    else if (selectedIndex == CollectionTabIndex.RADIO) model = radioCollectionModel;
                    else if (selectedIndex == CollectionTabIndex.MV) model = mvCollectionModel;
                    else if (selectedIndex == CollectionTabIndex.RANKING) model = rankingCollectionModel;
                    else if (selectedIndex == CollectionTabIndex.USER) model = userCollectionModel;
                }
                for (int i = 0; i < model.getSize(); i++) {
                    Object elem = model.get(i);
                    if (!set.contains(elem)) set.add(elem);
                    else model.remove(i--);
                }
                set.clear();
                for (int i = 0; i < filterModel.getSize(); i++) {
                    Object elem = filterModel.get(i);
                    if (!set.contains(elem)) set.add(elem);
                    else filterModel.remove(i--);
                }
                new TipDialog(THIS, DUPLICATE_SUCCESS_MSG).showDialog();
            }
        });
        // 倒序事件
        reverseToolButton.addActionListener(e -> {
            ConfirmDialog confirmDialog = new ConfirmDialog(THIS, ASK_REVERSE_MSG, "是", "否");
            confirmDialog.showDialog();
            int response = confirmDialog.getResponse();
            if (response == JOptionPane.YES_OPTION) {
                DefaultListModel<Object> model = null;
                if (currPersonalMusicTab == PersonalMusicTabIndex.LOCAL_MUSIC) model = musicListModel;
                else if (currPersonalMusicTab == PersonalMusicTabIndex.HISTORY) model = historyModel;
                else if (currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION) {
                    int selectedIndex = collectionTabbedPane.getSelectedIndex();
                    if (selectedIndex == CollectionTabIndex.MUSIC) model = collectionModel;
                    else if (selectedIndex == CollectionTabIndex.PLAYLIST) model = playlistCollectionModel;
                    else if (selectedIndex == CollectionTabIndex.ALBUM) model = albumCollectionModel;
                    else if (selectedIndex == CollectionTabIndex.ARTIST) model = artistCollectionModel;
                    else if (selectedIndex == CollectionTabIndex.RADIO) model = radioCollectionModel;
                    else if (selectedIndex == CollectionTabIndex.MV) model = mvCollectionModel;
                    else if (selectedIndex == CollectionTabIndex.RANKING) model = rankingCollectionModel;
                    else if (selectedIndex == CollectionTabIndex.USER) model = userCollectionModel;
                }
                for (int i = 0, s = model.size(), half = s / 2; i < half; i++) {
                    Object t = model.get(i);
                    model.set(i, model.get(s - 1 - i));
                    model.set(s - 1 - i, t);
                }
                new TipDialog(THIS, REVERSE_SUCCESS_MSG).showDialog();
            }
        });
        // 升序
        ascendingMenuItem.addActionListener(e -> {
            updateMenuItemIcon(sortPopupMenu);
            sortFiles(currSortMethod, currSortOrder = SortMethod.ASCENDING);
        });
        // 降序
        descendingMenuItem.addActionListener(e -> {
            updateMenuItemIcon(sortPopupMenu);
            sortFiles(currSortMethod, currSortOrder = SortMethod.DESCENDING);
        });
        // 按曲名/文件名混合排序
        sortBySongNameAndFileNameMenuItem.addActionListener(e -> {
            updateMenuItemIcon(sortPopupMenu);
            sortFiles(currSortMethod = SortMethod.BY_SONG_AND_FILE_NAME, currSortOrder);
        });
        // 按曲名排序
        sortBySongNameMenuItem.addActionListener(e -> {
            updateMenuItemIcon(sortPopupMenu);
            sortFiles(currSortMethod = SortMethod.BY_SONG_NAME, currSortOrder);
        });
        // 按艺术家排序
        sortByArtistNameMenuItem.addActionListener(e -> {
            updateMenuItemIcon(sortPopupMenu);
            sortFiles(currSortMethod = SortMethod.BY_ARTIST_NAME, currSortOrder);
        });
        // 按专辑排序
        sortByAlbumNameMenuItem.addActionListener(e -> {
            updateMenuItemIcon(sortPopupMenu);
            sortFiles(currSortMethod = SortMethod.BY_ALBUM_NAME, currSortOrder);
        });
        // 按文件名排序
        sortByFileNameMenuItem.addActionListener(e -> {
            updateMenuItemIcon(sortPopupMenu);
            sortFiles(currSortMethod = SortMethod.BY_FILE_NAME, currSortOrder);
        });
        // 按时长排序
        sortByTimeMenuItem.addActionListener(e -> {
            updateMenuItemIcon(sortPopupMenu);
            sortFiles(currSortMethod = SortMethod.BY_TIME, currSortOrder);
        });
        // 按创建时间排序
        sortByCreationTimeMenuItem.addActionListener(e -> {
            updateMenuItemIcon(sortPopupMenu);
            sortFiles(currSortMethod = SortMethod.BY_CREATION_TIME, currSortOrder);
        });
        // 按修改时间排序
        sortByLastModifiedTimeMenuItem.addActionListener(e -> {
            updateMenuItemIcon(sortPopupMenu);
            sortFiles(currSortMethod = SortMethod.BY_LAST_MODIFIED_TIME, currSortOrder);
        });
        // 按访问时间排序
        sortByLastAccessTimeMenuItem.addActionListener(e -> {
            updateMenuItemIcon(sortPopupMenu);
            sortFiles(currSortMethod = SortMethod.BY_LAST_ACCESS_TIME, currSortOrder);
        });
        // 按大小排序
        sortBySizeMenuItem.addActionListener(e -> {
            updateMenuItemIcon(sortPopupMenu);
            sortFiles(currSortMethod = SortMethod.BY_SIZE, currSortOrder);
        });
        sortOrderButtonGroup.add(ascendingMenuItem);
        sortOrderButtonGroup.add(descendingMenuItem);

        sortMethodButtonGroup.add(sortBySongNameAndFileNameMenuItem);
        sortMethodButtonGroup.add(sortBySongNameMenuItem);
        sortMethodButtonGroup.add(sortByArtistNameMenuItem);
        sortMethodButtonGroup.add(sortByAlbumNameMenuItem);
        sortMethodButtonGroup.add(sortByFileNameMenuItem);
        sortMethodButtonGroup.add(sortByTimeMenuItem);
        sortMethodButtonGroup.add(sortByCreationTimeMenuItem);
        sortMethodButtonGroup.add(sortByLastModifiedTimeMenuItem);
        sortMethodButtonGroup.add(sortByLastAccessTimeMenuItem);
        sortMethodButtonGroup.add(sortBySizeMenuItem);

        sortPopupMenu.add(ascendingMenuItem);
        sortPopupMenu.add(descendingMenuItem);
        sortPopupMenu.addSeparator();
        sortPopupMenu.add(sortBySongNameAndFileNameMenuItem);
        sortPopupMenu.add(sortBySongNameMenuItem);
        sortPopupMenu.add(sortByArtistNameMenuItem);
        sortPopupMenu.add(sortByAlbumNameMenuItem);
        sortPopupMenu.add(sortByFileNameMenuItem);
        sortPopupMenu.add(sortByTimeMenuItem);
        sortPopupMenu.add(sortByCreationTimeMenuItem);
        sortPopupMenu.add(sortByLastModifiedTimeMenuItem);
        sortPopupMenu.add(sortByLastAccessTimeMenuItem);
        sortPopupMenu.add(sortBySizeMenuItem);
        // 按钮绑定右键菜单，不过右键也会弹出
        sortToolButton.setComponentPopupMenu(sortPopupMenu);
        // 点击排序按钮事件
        sortToolButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1) {
                    // 注意：弹出坐标必须相对于按钮！
//                    SwingUtilities.updateComponentTreeUI(sortPopupMenu);
                    sortPopupMenu.show(sortToolButton, e.getX(), e.getY());
                }
            }
        });
        // 点击上下移按钮事件
        moveUpToolButton.addActionListener(e -> {
            int index = collectionTabbedPane.getSelectedIndex();
            CustomList list;
            if (currPersonalMusicTab != PersonalMusicTabIndex.COLLECTION
                    || index == CollectionTabIndex.MUSIC) {
                list = musicList;
            } else list = collectionList;
            int selectedIndex = list.getSelectedIndex();
            if (selectedIndex != -1 && selectedIndex != 0) {
                DefaultListModel model = (DefaultListModel) list.getModel();
                Object o1 = model.get(selectedIndex - 1);
                Object o2 = model.get(selectedIndex);
                model.set(selectedIndex - 1, o2);
                model.set(selectedIndex, o1);
                list.setSelectedIndex(selectedIndex - 1);
            }
        });
        moveDownToolButton.addActionListener(e -> {
            int index = collectionTabbedPane.getSelectedIndex();
            CustomList list;
            if (currPersonalMusicTab != PersonalMusicTabIndex.COLLECTION
                    || index == CollectionTabIndex.MUSIC) {
                list = musicList;
            } else list = collectionList;
            int selectedIndex = list.getSelectedIndex();
            DefaultListModel model = (DefaultListModel) list.getModel();
            if (selectedIndex != -1 && selectedIndex != model.getSize() - 1) {
                Object o1 = model.get(selectedIndex);
                Object o2 = model.get(selectedIndex + 1);
                model.set(selectedIndex, o2);
                model.set(selectedIndex + 1, o1);
                list.setSelectedIndex(selectedIndex + 1);
            }
        });
        // 清除输入事件
        clearInputToolButton.addActionListener(e -> {
            filterTextField.requestFocus();
            filterTextField.setText("");
            removeToolButton.requestFocus();
        });
        // 添加换肤弹出菜单项
//        for (int i = 0, length = stylePopupMenuItems.size(); i < length; i++) {
//            int finalI = i;
//            stylePopupMenuItems.get(i).addActionListener(e -> {
//                try {
//                    changeUIStyle(styles.get(finalI));
//                } catch (IOException ioException) {
//                    ioException.printStackTrace();
//                } catch (IllegalAccessException illegalAccessException) {
//                    illegalAccessException.printStackTrace();
//                } catch (InstantiationException instantiationException) {
//                    instantiationException.printStackTrace();
//                } catch (UnsupportedLookAndFeelException unsupportedLookAndFeelException) {
//                    unsupportedLookAndFeelException.printStackTrace();
//                } catch (ClassNotFoundException classNotFoundException) {
//                    classNotFoundException.printStackTrace();
//                } catch (AWTException awtException) {
//                    awtException.printStackTrace();
//                }
//            });
//            stylePopupMenuButtonGroup.add(stylePopupMenuItems.get(i));
//            stylePopupMenu.add(stylePopupMenuItems.get(i));
//        }
//        stylePopupMenu.addSeparator();
        stylePopupMenu.add(manageStyleMenuItem);
        stylePopupMenu.add(styleCustomMenuItem);
        // 个人音乐筛选框
        filterTextField.addFocusListener(new TextFieldHintListener(filterTextField, "关键字筛选", currUIStyle.getForeColor()));
        filterTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                if (filterTextField.isOccupied()) {
                    clearInputToolButton.setVisible(true);
                    filterPersonalMusic();
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if (filterTextField.getText().equals("")) clearInputToolButton.setVisible(false);
                filterPersonalMusic();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });
        // 帮助提示
        addToolButton.setToolTipText(ADD_TIP);
        reimportToolButton.setToolTipText(REIMPORT_TIP);
        manageCatalogToolButton.setToolTipText(MANAGE_CATALOG_TIP);
        removeToolButton.setToolTipText(REMOVE_TIP);
        clearToolButton.setToolTipText(CLEAR_TIP);
        duplicateToolButton.setToolTipText(DUPLICATE_TIP);
        reverseToolButton.setToolTipText(REVERSE_TIP);
        sortToolButton.setToolTipText(SORT_TIP);
        moveUpToolButton.setToolTipText(MOVE_UP_TIP);
        moveDownToolButton.setToolTipText(MOVE_DOWN_TIP);
        clearInputToolButton.setToolTipText(CLEAR_INPUT_TIP);
        // 清除输入按钮初始不可见
        clearInputToolButton.setVisible(false);

        musicToolBar.add(addToolButton);
        musicToolBar.add(reimportToolButton);
        musicToolBar.add(manageCatalogToolButton);
        musicToolBar.add(removeToolButton);
        musicToolBar.add(clearToolButton);
        musicToolBar.add(duplicateToolButton);
        musicToolBar.add(reverseToolButton);
        musicToolBar.add(sortToolButton);
        musicToolBar.add(moveUpToolButton);
        musicToolBar.add(moveDownToolButton);
        musicToolBar.add(filterTextField);
        musicToolBar.add(clearInputToolButton);
        musicToolBar.add(countLabel);
        // 加胶水让工具栏左对齐
        musicToolBar.add(Box.createHorizontalGlue());
//        // 换肤按钮在最右边
//        musicToolBar.add(styleToolButton);
        leftBox.add(musicToolBar);
    }

    // 初始化个人音乐列表
    private void musicListInit() {
        ListDataListener countListener = new ListDataListener() {
            @Override
            public void intervalAdded(ListDataEvent e) {
                DefaultListModel model = (DefaultListModel) e.getSource();
                int size = model.getSize();
                int selectedIndex = collectionTabbedPane.getSelectedIndex();
                if (currPersonalMusicTab == PersonalMusicTabIndex.LOCAL_MUSIC && (model == musicListModel || model == filterModel)
                        || currPersonalMusicTab == PersonalMusicTabIndex.HISTORY && (model == historyModel || model == filterModel)) {
                    countLabel.setText(String.format("共 %s 首", size));
                    leftBox.remove(emptyHintPanel);
                    leftBox.add(musicScrollPane);
                    leftBox.repaint();
                } else if (currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION && selectedIndex == CollectionTabIndex.MUSIC
                        && (model == collectionModel || model == filterModel)) {
                    countLabel.setText(String.format("共 %s 首", size));
                    musicList.setModel(model);
                    musicCollectionLeftBox.remove(emptyHintPanel);
                    musicCollectionLeftBox.add(musicScrollPane);
                    musicCollectionLeftBox.repaint();
                } else if (currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION && selectedIndex != CollectionTabIndex.MUSIC) {
                    if (selectedIndex == CollectionTabIndex.PLAYLIST && (model == playlistCollectionModel || model == filterModel)) {
                        collectionList.setModel(model);
                        countLabel.setText(String.format("共 %s 项", size));
                    } else if (selectedIndex == CollectionTabIndex.ALBUM && (model == albumCollectionModel || model == filterModel)) {
                        collectionList.setModel(model);
                        countLabel.setText(String.format("共 %s 项", size));
                    } else if (selectedIndex == CollectionTabIndex.ARTIST && (model == artistCollectionModel || model == filterModel)) {
                        collectionList.setModel(model);
                        countLabel.setText(String.format("共 %s 项", size));
                    } else if (selectedIndex == CollectionTabIndex.RADIO && (model == radioCollectionModel || model == filterModel)) {
                        collectionList.setModel(model);
                        countLabel.setText(String.format("共 %s 项", size));
                    } else if (selectedIndex == CollectionTabIndex.MV && (model == mvCollectionModel || model == filterModel)) {
                        collectionList.setModel(model);
                        countLabel.setText(String.format("共 %s 项", size));
                    } else if (selectedIndex == CollectionTabIndex.RANKING && (model == rankingCollectionModel || model == filterModel)) {
                        collectionList.setModel(model);
                        countLabel.setText(String.format("共 %s 项", size));
                    } else if (selectedIndex == CollectionTabIndex.USER && (model == userCollectionModel || model == filterModel)) {
                        collectionList.setModel(model);
                        countLabel.setText(String.format("共 %s 项", size));
                    }

                    Box box = null;
                    if (selectedIndex == CollectionTabIndex.PLAYLIST) box = playlistCollectionLeftBox;
                    else if (selectedIndex == CollectionTabIndex.ALBUM) box = albumCollectionLeftBox;
                    else if (selectedIndex == CollectionTabIndex.ARTIST) box = artistCollectionLeftBox;
                    else if (selectedIndex == CollectionTabIndex.RADIO) box = radioCollectionLeftBox;
                    else if (selectedIndex == CollectionTabIndex.MV) box = mvCollectionLeftBox;
                    else if (selectedIndex == CollectionTabIndex.RANKING) box = rankingCollectionLeftBox;
                    else if (selectedIndex == CollectionTabIndex.USER) box = userCollectionLeftBox;
                    box.remove(emptyHintPanel);
                    box.add(collectionScrollPane);
                    box.repaint();
                }
            }

            @Override
            public void intervalRemoved(ListDataEvent e) {
                DefaultListModel model = (DefaultListModel) e.getSource();
                int size = model.getSize();
                int selectedIndex = collectionTabbedPane.getSelectedIndex();
                if (currPersonalMusicTab == PersonalMusicTabIndex.LOCAL_MUSIC && (model == musicListModel || model == filterModel)
                        || currPersonalMusicTab == PersonalMusicTabIndex.HISTORY && (model == historyModel || model == filterModel)) {
                    countLabel.setText(String.format("共 %s 首", size));
                    if (size == 0) {
                        leftBox.add(emptyHintPanel);
                        leftBox.remove(musicScrollPane);
                        leftBox.repaint();
                    }
                } else if (currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION && selectedIndex == CollectionTabIndex.MUSIC
                        && (model == collectionModel || model == filterModel)) {
                    countLabel.setText(String.format("共 %s 首", size));
                    if (size == 0) {
                        musicCollectionLeftBox.remove(musicScrollPane);
                        musicCollectionLeftBox.add(emptyHintPanel);
                        musicCollectionLeftBox.repaint();
                    }
                } else if (currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION) {
                    if (selectedIndex == CollectionTabIndex.PLAYLIST && (model == playlistCollectionModel || model == filterModel)) {
                        countLabel.setText(String.format("共 %s 项", size));
                    } else if (selectedIndex == CollectionTabIndex.ALBUM && (model == albumCollectionModel || model == filterModel)) {
                        countLabel.setText(String.format("共 %s 项", size));
                    } else if (selectedIndex == CollectionTabIndex.ARTIST && (model == artistCollectionModel || model == filterModel)) {
                        countLabel.setText(String.format("共 %s 项", size));
                    } else if (selectedIndex == CollectionTabIndex.RADIO && (model == radioCollectionModel || model == filterModel)) {
                        countLabel.setText(String.format("共 %s 项", size));
                    } else if (selectedIndex == CollectionTabIndex.MV && (model == mvCollectionModel || model == filterModel)) {
                        countLabel.setText(String.format("共 %s 项", size));
                    } else if (selectedIndex == CollectionTabIndex.RANKING && (model == rankingCollectionModel || model == filterModel)) {
                        countLabel.setText(String.format("共 %s 项", size));
                    } else if (selectedIndex == CollectionTabIndex.USER && (model == userCollectionModel || model == filterModel)) {
                        countLabel.setText(String.format("共 %s 项", size));
                    }
                    if (size == 0) {
                        Box box = null;
                        if (selectedIndex == CollectionTabIndex.PLAYLIST) box = playlistCollectionLeftBox;
                        else if (selectedIndex == CollectionTabIndex.ALBUM) box = albumCollectionLeftBox;
                        else if (selectedIndex == CollectionTabIndex.ARTIST) box = artistCollectionLeftBox;
                        else if (selectedIndex == CollectionTabIndex.RADIO) box = radioCollectionLeftBox;
                        else if (selectedIndex == CollectionTabIndex.MV) box = mvCollectionLeftBox;
                        else if (selectedIndex == CollectionTabIndex.RANKING) box = rankingCollectionLeftBox;
                        else if (selectedIndex == CollectionTabIndex.USER) box = userCollectionLeftBox;
                        box.remove(collectionScrollPane);
                        box.add(emptyHintPanel);
                        box.repaint();
                    }
                }
            }

            @Override
            public void contentsChanged(ListDataEvent e) {

            }
        };
        musicListModel.addListDataListener(countListener);
        historyModel.addListDataListener(countListener);
        collectionModel.addListDataListener(countListener);
        playlistCollectionModel.addListDataListener(countListener);
        albumCollectionModel.addListDataListener(countListener);
        artistCollectionModel.addListDataListener(countListener);
        radioCollectionModel.addListDataListener(countListener);
        mvCollectionModel.addListDataListener(countListener);
        rankingCollectionModel.addListDataListener(countListener);
        userCollectionModel.addListDataListener(countListener);
        filterModel.addListDataListener(countListener);
        musicList.setModel(musicListModel);
        musicList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    playExecutor.submit(() -> playSelected(musicList, false));
                }
            }
        });
        musicList.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int index = musicList.locationToIndex(e.getPoint());
                Rectangle bounds = musicList.getCellBounds(index, index);
                if (bounds == null) return;
                setHoverIndex(bounds.contains(e.getPoint()) ? index : -1);
            }

            private void setHoverIndex(int index) {
                TranslucentMusicListRenderer renderer = (TranslucentMusicListRenderer) musicList.getCellRenderer();
                if (renderer == null) return;
                int hoverIndex = renderer.getHoverIndex();
                if (hoverIndex == index) return;
                renderer.setHoverIndex(index);
                musicList.repaint();
            }
        });
        musicList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                TranslucentMusicListRenderer renderer = (TranslucentMusicListRenderer) musicList.getCellRenderer();
                if (renderer == null) return;
                renderer.setHoverIndex(-1);
                musicList.repaint();
            }
        });
        musicList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                // 鼠标左键双击播放
                if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    playExecutor.submit(() -> playSelected(musicList, false));
//                    if (musicList.getSelectedValue() instanceof File) playSelected(musicList, false);
//                    else loadingAndRun(() -> playSelected(musicList, false));
                }
                // 鼠标右键弹出菜单
                else if (e.getButton() == MouseEvent.BUTTON3) {
                    if (musicList.getModel().getSize() != 0) {
                        // 得到鼠标光标所在的选项并选中
                        int index = musicList.locationToIndex(e.getPoint());
                        if (index != -1 && !musicList.isSelectedIndex(index)
                                || musicList.isSelectedIndex(index) && musicList.getSelectedIndices().length == 1) {
                            musicList.setSelectedIndex(index);
                            Object o = musicList.getSelectedValue();
                            boolean ins = o instanceof NetMusicInfo;
                            downloadMenuItem.setEnabled(ins);
                            commentMenuItem.setEnabled(ins);
                            sheetMenuItem.setEnabled(ins);
                            similarSongMenuItem.setEnabled(ins);
                            relatedPlaylistMenuItem.setEnabled(ins);
                            authorMenuItem.setEnabled(ins);
                            albumMenuItem.setEnabled(ins);
                            recRadioMenuItem.setEnabled(ins);
                            relatedMvMenuItem.setEnabled(ins);
                            playMvMenuItem.setEnabled(ins && ((NetMusicInfo) o).hasMv());
                            if (hasBeenCollected(o)) {
                                collectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                                collectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);
                            } else {
                                collectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, currUIStyle.getButtonColor()));
                                collectMenuItem.setText(COLLECT_MENU_ITEM_TEXT);
                            }
                            locateFileMenuItem.setEnabled(!ins);
                            editInfoMenuItem.setEnabled(!ins);
                        } else {
                            List list = musicList.getSelectedValuesList();
                            for (Object o : list) {
                                downloadMenuItem.setEnabled(o instanceof NetMusicInfo);
                                if (downloadMenuItem.isEnabled()) break;
                            }
                            Object first = list.get(0);
                            boolean ins = first instanceof NetMusicInfo;
                            commentMenuItem.setEnabled(ins);
                            sheetMenuItem.setEnabled(ins);
                            similarSongMenuItem.setEnabled(ins);
                            relatedPlaylistMenuItem.setEnabled(ins);
                            authorMenuItem.setEnabled(ins);
                            albumMenuItem.setEnabled(ins);
                            recRadioMenuItem.setEnabled(ins);
                            relatedMvMenuItem.setEnabled(ins);
                            playMvMenuItem.setEnabled(ins);
                            if (hasBeenCollected(first)) {
                                collectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                                collectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);
                            } else {
                                collectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, currUIStyle.getButtonColor()));
                                collectMenuItem.setText(COLLECT_MENU_ITEM_TEXT);
                            }
                            locateFileMenuItem.setEnabled(!ins);
                            editInfoMenuItem.setEnabled(!ins);
                        }

                        musicPopupMenu.show(musicList, e.getX(), e.getY());
                    }
                }
            }
        });
        // 右键菜单播放
        playMenuItem.addActionListener(e -> {
            playExecutor.submit(() -> playSelected(musicList, false));
//            if (musicList.getSelectedValue() instanceof File) playSelected(musicList, false);
//            else loadingAndRun(() -> playSelected(musicList, false));
        });
        // 下一首播放
        nextPlayMenuItem.addActionListener(e -> nextPlay(musicList));
        // 右键菜单打开文件所在位置
        locateFileMenuItem.addActionListener(e -> {
            Object o = musicList.getSelectedValue();
            if (o instanceof AudioFile) {
                File file = ((AudioFile) o);
                TerminateUtils.explorer(file.exists() ? file.getAbsolutePath() : file.getParent());
            }
        });
        // 右键菜单编辑歌曲信息
        editInfoMenuItem.addActionListener(e -> {
            Object o = musicList.getSelectedValue();
            if (o instanceof AudioFile) {
                AudioFile file = ((AudioFile) o);
                if (file.exists()) editInfo(file);
                else new TipDialog(THIS, FILE_NOT_FOUND_MSG).showDialog();
            }
        });
        // 右键菜单删除
        removeMenuItem.addActionListener(e -> {
            removeToolButton.doClick();
        });
        // 右键菜单收藏/取消收藏
        collectMenuItem.addActionListener(e -> {
            ListModel model = musicList.getModel();
            boolean needRefresh = model == collectionModel;
            if (collectMenuItem.getText().equals(COLLECT_MENU_ITEM_TEXT)) {
                List values = musicList.getSelectedValuesList();
                if (needRefresh) musicList.setModel(emptyListModel);
                for (int i = values.size() - 1; i >= 0; i--) {
                    Object o = values.get(i);
                    if (hasBeenCollected(o)) continue;
                    collectionModel.add(0, o);
                    if (player.isPlayingObject(o))
                        collectButton.setIcon(ImageUtils.dye(hasCollectedIcon, currUIStyle.getButtonColor()));
                }
                if (needRefresh) musicList.setModel(model);
                new TipDialog(THIS, COLLECT_SUCCESS_MSG).showDialog();
            } else {
                List values = musicList.getSelectedValuesList();
                if (needRefresh) musicList.setModel(emptyListModel);
                values.forEach(o -> {
                    if (hasBeenCollected(o)) {
                        collectionModel.removeElement(o);
                        if (player.isPlayingObject(o))
                            collectButton.setIcon(ImageUtils.dye(collectIcon, currUIStyle.getButtonColor()));
                    }
                });
                if (needRefresh) musicList.setModel(model);
                new TipDialog(THIS, CANCEL_COLLECTION_SUCCESS_MSG).showDialog();
            }
        });
        // 右键菜单播放 MV
        playMvMenuItem.addActionListener(e -> {
            playMv(MvType.MUSIC_LIST);
        });
        // 右键菜单下载
        downloadMenuItem.addActionListener(e -> {
            List values = musicList.getSelectedValuesList();
            multiDownload(values);
        });
        // 右键菜单查看评论
        commentMenuItem.addActionListener(e -> {
            Object o = musicList.getSelectedValue();
            if (o instanceof NetMusicInfo) {
                getComments(o, true);
            }
        });
        // 右键菜单查看乐谱
        sheetMenuItem.addActionListener(e -> {
            Object o = musicList.getSelectedValue();
            if (o instanceof NetMusicInfo) {
                getSheets((NetMusicInfo) o, true);
            }
        });
        // 右键菜单搜索这首歌曲
        searchSongMenuItem.addActionListener(e -> {
            Object o = musicList.getSelectedValue();
            tabbedPane.setSelectedIndex(TabIndex.NET_MUSIC);
            if (currMusicMusicInfo != null) netMusicBackwardButton.doClick();
            searchTextField.requestFocus();
            if (o instanceof NetMusicInfo) {
                searchTextField.setText(((NetMusicInfo) o).toAvailableString());
            } else searchTextField.setText(o.toString());
            netMusicClearInputButton.setVisible(true);
            searchButton.doClick();
        });
        // 右键菜单查看相似歌曲
        similarSongMenuItem.addActionListener(e -> netMusicSimilarSongMenuItem.doClick());
        // 右键菜单查看相关歌单
        relatedPlaylistMenuItem.addActionListener(e -> netMusicRelatedPlaylistMenuItem.doClick());
        // 查看歌手/作者
        authorMenuItem.addActionListener(e -> netMusicAuthorMenuItem.doClick());
        // 查看专辑/电台
        albumMenuItem.addActionListener(e -> netMusicAlbumMenuItem.doClick());
        // 查看推荐电台
        recRadioMenuItem.addActionListener(e -> netMusicRecRadioMenuItem.doClick());
        // 右键菜单查看相关 MV
        relatedMvMenuItem.addActionListener(e -> netMusicRelatedMvMenuItem.doClick());
        // 右键菜单复制名称
        copyNameMenuItem.addActionListener(e -> {
            Object o = musicList.getSelectedValue();
            String s = null;
            if (o instanceof AudioFile) s = o.toString();
            else if (o instanceof NetMusicInfo) s = ((NetMusicInfo) o).toSimpleString();
            StringSelection stringSelection = new StringSelection(s);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });

        musicPopupMenu.add(playMenuItem);
        musicPopupMenu.add(nextPlayMenuItem);
        musicPopupMenu.add(playMvMenuItem);
        musicPopupMenu.add(collectMenuItem);
        musicPopupMenu.add(downloadMenuItem);
        musicPopupMenu.add(commentMenuItem);
        musicPopupMenu.add(sheetMenuItem);
        musicPopupMenu.add(searchSongMenuItem);
        musicPopupMenu.add(similarSongMenuItem);
        musicPopupMenu.add(relatedPlaylistMenuItem);
        musicPopupMenu.add(authorMenuItem);
        musicPopupMenu.add(albumMenuItem);
        musicPopupMenu.add(recRadioMenuItem);
        musicPopupMenu.add(relatedMvMenuItem);
        musicPopupMenu.add(copyNameMenuItem);
        musicPopupMenu.add(locateFileMenuItem);
        musicPopupMenu.add(editInfoMenuItem);
        musicPopupMenu.add(removeMenuItem);

        // 最佳大小
        musicScrollPane.setPreferredSize(new Dimension(260, 3000));
        leftBox.add(musicScrollPane);
    }

    // 初始化在线音乐工具栏
    private void netMusicToolBarInit() {
        searchTextField.addFocusListener(new TextFieldHintListener(searchTextField, "单曲/歌手/专辑/歌词/节目", currUIStyle.getForeColor()));
        searchTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                if (searchTextField.isOccupied()) {
                    netMusicClearInputButton.setVisible(true);
                }
                globalExecutor.submit(() -> updateSearchSuggestion());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if (searchTextField.getText().equals("")) netMusicClearInputButton.setVisible(false);
                globalExecutor.submit(() -> updateSearchSuggestion());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });
        // 只能输入数字
        netMusicPageTextField.setDocument(new SafeDocument(0, Integer.MAX_VALUE));
        // 返回关键词面板事件
        netMusicBackwardButton.addActionListener(e -> {
            netMusicListModel.clear();
            netMusicCountPanel.setVisible(false);
            netLeftBox.remove(emptyHintPanel);
            netLeftBox.remove(netMusicScrollPane);
            netLeftBox.add(netMusicKeywordsPanelScrollPane);
            netMusicBackwardButton.setEnabled(false);

            // 添加回工具栏的搜索/标题
            netMusicToolBar.removeAll();
            netMusicToolBar.add(netMusicBackwardButton);
            // 删除标题标签
            netMusicToolBar.add(searchTextField);
            netMusicToolBar.add(netMusicClearInputButton);
            netMusicToolBar.add(searchButton);
            currMusicMusicInfo = null;

            netLeftBox.repaint();
            System.gc();
        });
        // 清除输入事件
        netMusicClearInputButton.addActionListener(e -> {
            searchTextField.requestFocus();
            searchTextField.setText("");
            netMusicBackwardButton.requestFocus();
        });
        // 搜索按钮事件
        searchButton.addActionListener(e -> {
            netMusicCurrKeyword = searchTextField.getText();
            if (!netMusicCurrKeyword.equals("")) {
                // 关键词加入搜索历史
                DialogButton b = new DialogButton(netMusicCurrKeyword);
                b.addActionListener(event -> {
                    searchTextField.requestFocus();
                    searchTextField.setText(b.getText());
                    netMusicClearInputButton.setVisible(true);
                    searchButton.doClick();
                    netLeftBox.remove(netMusicKeywordsPanelScrollPane);
                    netLeftBox.add(netMusicScrollPane);
                });
                // 右击删除历史
                b.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.getButton() == MouseEvent.BUTTON3) {
                            netMusicHistorySearchInnerPanel2.remove(b);
                            netMusicHistorySearchInnerPanel2.repaint();
                            if (netMusicHistorySearchInnerPanel2.getComponentCount() == 0) {
                                netMusicKeywordsPanel.remove(netMusicHistorySearchPanel);
                            }
                        }
                    }
                });
                b.setToolTipText(REMOVE_HISTORY_KEYWORD_TIP);
                b.setForeColor(currUIStyle.getButtonColor());
                // 先删除重复的关键词
                removeKeywordInHistorySearch(netMusicCurrKeyword, HistorySearchType.NET_MUSIC);
                netMusicHistorySearchInnerPanel2.add(b, 0);
                // 删除超出上限的最后一个关键词
                int c = netMusicHistorySearchInnerPanel2.getComponentCount();
                if (c > maxSearchHistoryCount)
                    netMusicHistorySearchInnerPanel2.remove(c - 1);
                // 显示 “搜索历史” 面板
                netMusicKeywordsPanel.add(netMusicHistorySearchPanel);
                // 更新 LAF，防止按钮样式不正确
                SwingUtilities.updateComponentTreeUI(netMusicClearHistorySearchButton);
                netMusicHistorySearchPanel.repaint();

                loadingAndRun(() -> {
                    try {
                        // 显示节目搜索分类标签
                        if (netMusicSearchTypeComboBox.getSelectedIndex() == 2 && Tags.programSearchTag.isEmpty()) {
                            MusicServerUtils.initProgramSearchTag();
                            for (String tag : Tags.programSearchTag.keySet())
                                netMusicSearchSubTypeComboBox.addItem(tag);
                        }

                        // 搜索歌曲并显示在在线播放列表
                        CommonResult<NetMusicInfo> result = MusicServerUtils.searchMusic(netMusicSourceComboBox.getSelectedIndex(),
                                netMusicSearchTypeComboBox.getSelectedIndex(), (String) netMusicSearchSubTypeComboBox.getSelectedItem(), netMusicCurrKeyword, limit, netMusicCurrPage = 1);
                        List<NetMusicInfo> musicInfos = result.data;
                        Integer total = result.total;
                        netMusicMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netMusicCountLabel.setText(String.format(PAGINATION_MSG, netMusicCurrPage, netMusicMaxPage));
                        netMusicCountPanel.add(netMusicCountLabel, netMusicCountPanel.getComponentIndex(netMusicCountLabel));
                        netMusicCountPanel.setVisible(true);
                        netMusicSearchTypeComboBox.setVisible(true);
                        netMusicSearchSubTypeComboBox.setVisible(netMusicSearchTypeComboBox.getSelectedIndex() == 2);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netMusicList.setModel(emptyListModel);
                        netMusicListModel.clear();
                        musicInfos.forEach(musicInfo -> {
                            globalExecutor.submit(() -> updateCollection(musicInfo));
                            netMusicListModel.addElement(musicInfo);
                        });
                        netMusicList.setModel(netMusicListModel);
                        netMusicBackwardButton.setEnabled(true);
                        netLeftBox.remove(netMusicKeywordsPanelScrollPane);
                        if (netMusicListModel.isEmpty()) {
                            netLeftBox.remove(netMusicScrollPane);
                            netLeftBox.add(emptyHintPanel);
                        } else {
                            netLeftBox.remove(emptyHintPanel);
                            netLeftBox.add(netMusicScrollPane);
                        }
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        jsonException.printStackTrace();
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                });
            }
        });
        // 在线音乐跳页事件
        Runnable netMusicGoPageAction = () -> {
            boolean songRequest = currMusicMusicInfo != null;
            if (songRequest || StringUtils.isNotEmpty(netMusicCurrKeyword)) {
                loadingAndRun(() -> {
                    try {
                        // 显示节目搜索分类标签
                        if (netMusicSearchTypeComboBox.getSelectedIndex() == 2 && Tags.programSearchTag.isEmpty()) {
                            MusicServerUtils.initProgramSearchTag();
                            for (String tag : Tags.programSearchTag.keySet())
                                netMusicSearchSubTypeComboBox.addItem(tag);
                        }

                        // 搜索歌曲并显示在在线播放列表
                        CommonResult<NetMusicInfo> result = songRequest ? MusicServerUtils.getSimilarSongs(currMusicMusicInfo)
                                : MusicServerUtils.searchMusic(netMusicSourceComboBox.getSelectedIndex(), netMusicSearchTypeComboBox.getSelectedIndex(),
                                (String) netMusicSearchSubTypeComboBox.getSelectedItem(), netMusicCurrKeyword, limit, netMusicCurrPage);
                        List<NetMusicInfo> musicInfos = result.data;
                        Integer total = result.total;
                        netMusicMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netMusicCountLabel.setText(String.format(PAGINATION_MSG, netMusicCurrPage, netMusicMaxPage));
                        netMusicCountPanel.add(netMusicCountLabel, netMusicCountPanel.getComponentIndex(netMusicCountLabel));
                        netMusicCountPanel.setVisible(true);
                        netMusicSearchSubTypeComboBox.setVisible(netMusicSearchTypeComboBox.getSelectedIndex() == 2);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netMusicList.setModel(emptyListModel);
                        netMusicListModel.clear();
                        musicInfos.forEach(musicInfo -> {
                            globalExecutor.submit(() -> updateCollection(musicInfo));
                            netMusicListModel.addElement(musicInfo);
                        });
                        netMusicList.setModel(netMusicListModel);
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                        if (netMusicListModel.isEmpty()) {
                            netLeftBox.remove(netMusicScrollPane);
                            netLeftBox.add(emptyHintPanel);
                        } else {
                            netLeftBox.remove(emptyHintPanel);
                            netLeftBox.add(netMusicScrollPane);
                        }
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        };
        for (String name : NetMusicSource.names) netMusicSourceComboBox.addItem(name);
        netMusicSourceComboBox.addItemListener(e -> {
            // 避免事件被处理 2 次！
            if (e.getStateChange() != ItemEvent.SELECTED) return;
            netMusicCurrKeyword = searchTextField.getText();
            netMusicCurrPage = 1;
            netMusicRefreshButton.doClick();
        });
        netMusicSearchTypeComboBox.addItem("常规");
        netMusicSearchTypeComboBox.addItem("歌词");
        netMusicSearchTypeComboBox.addItem("节目");
        netMusicSearchTypeComboBox.addItemListener(e -> {
            // 避免事件被处理 2 次！
            if (e.getStateChange() != ItemEvent.SELECTED) return;
            netMusicCurrKeyword = searchTextField.getText();
            netMusicCurrPage = 1;
            netMusicRefreshButton.doClick();
        });
        netMusicSearchSubTypeComboBox.addItemListener(e -> {
            // 避免事件被处理 2 次！
            if (e.getStateChange() != ItemEvent.SELECTED) return;
            netMusicCurrKeyword = searchTextField.getText();
            netMusicCurrPage = 1;
            netMusicRefreshButton.doClick();
        });
        netMusicSearchSubTypeComboBox.setVisible(false);
        // 刷新按钮事件
        netMusicRefreshButton.addActionListener(e -> {
            netMusicGoPageAction.run();
        });
        // 第一页按钮
        netMusicStartPageButton.addActionListener(e -> {
            if (netMusicCurrPage == 1) {
                new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                return;
            }
            netMusicCurrPage = 1;
            netMusicGoPageAction.run();
        });
        // 上一页按钮事件
        netMusicLastPageButton.addActionListener(e -> {
            if (netMusicCurrPage == 1) {
                new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                return;
            }
            netMusicCurrPage--;
            netMusicGoPageAction.run();
        });
        // 下一页按钮事件
        netMusicNextPageButton.addActionListener(e -> {
            if (netMusicCurrPage == netMusicMaxPage) {
                new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                return;
            }
            netMusicCurrPage++;
            netMusicGoPageAction.run();
        });
        // 最后一页按钮
        netMusicEndPageButton.addActionListener(e -> {
            if (netMusicCurrPage == netMusicMaxPage) {
                new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                return;
            }
            netMusicCurrPage = netMusicMaxPage;
            netMusicGoPageAction.run();
        });
        // 跳页按钮事件
        netMusicGoButton.addActionListener(e -> {
            String text = netMusicPageTextField.getText();
            netMusicPageTextField.setText("");
            if ("".equals(text)) return;
            int destPage = Integer.parseInt(text);
            if (destPage < 1 || destPage > netMusicMaxPage) {
                new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                return;
            }
            netMusicCurrPage = destPage;
            netMusicGoPageAction.run();
        });
        // 按钮大小限制
        Dimension dimension = new Dimension(20, 20);
        netMusicRefreshButton.setPreferredSize(dimension);
        netMusicStartPageButton.setPreferredSize(dimension);
        netMusicLastPageButton.setPreferredSize(dimension);
        netMusicGoButton.setPreferredSize(dimension);
        netMusicNextPageButton.setPreferredSize(dimension);
        netMusicEndPageButton.setPreferredSize(dimension);
        // 按钮悬浮与点击效果
        netMusicBackwardButton.addMouseListener(new ButtonMouseListener(netMusicBackwardButton, THIS));
        netMusicClearInputButton.addMouseListener(new ButtonMouseListener(netMusicClearInputButton, THIS));
        searchButton.addMouseListener(new ButtonMouseListener(searchButton, THIS));
        netMusicRefreshButton.addMouseListener(new ButtonMouseListener(netMusicRefreshButton, THIS));
        netMusicStartPageButton.addMouseListener(new ButtonMouseListener(netMusicStartPageButton, THIS));
        netMusicLastPageButton.addMouseListener(new ButtonMouseListener(netMusicLastPageButton, THIS));
        netMusicGoButton.addMouseListener(new ButtonMouseListener(netMusicGoButton, THIS));
        netMusicNextPageButton.addMouseListener(new ButtonMouseListener(netMusicNextPageButton, THIS));
        netMusicEndPageButton.addMouseListener(new ButtonMouseListener(netMusicEndPageButton, THIS));
        // 帮助提示
        netMusicBackwardButton.setToolTipText(SHOW_KEYWORD_PANEL_TIP);
        netMusicClearInputButton.setToolTipText(CLEAR_INPUT_TIP);
        searchButton.setToolTipText(SEARCH_TIP);
        netMusicRefreshButton.setToolTipText(REFRESH_TIP);
        netMusicStartPageButton.setToolTipText(START_PAGE_TIP);
        netMusicLastPageButton.setToolTipText(LAST_PAGE_TIP);
        netMusicGoButton.setToolTipText(GO_TIP);
        netMusicNextPageButton.setToolTipText(NEXT_PAGE_TIP);
        netMusicEndPageButton.setToolTipText(END_PAGE_TIP);

        // 回到关键词面板起始不可用
        netMusicBackwardButton.setEnabled(false);
        // 清除输入按钮初始不可见
        netMusicClearInputButton.setVisible(false);

        netMusicToolBar.add(netMusicBackwardButton);
        netMusicToolBar.add(searchTextField);
        netMusicToolBar.add(netMusicClearInputButton);
        netMusicToolBar.add(searchButton);
        netLeftBox.add(netMusicToolBar);

        // 歌曲数量标签
        netMusicCountPanel.add(netMusicSourceComboBox);
        netMusicCountPanel.add(netMusicSearchTypeComboBox);
        netMusicCountPanel.add(netMusicSearchSubTypeComboBox);
        netMusicCountPanel.add(netMusicStartPageButton);
        netMusicCountPanel.add(netMusicLastPageButton);
        netMusicCountPanel.add(netMusicCountLabel);
        netMusicCountPanel.add(netMusicNextPageButton);
        netMusicCountPanel.add(netMusicEndPageButton);
        netMusicCountPanel.add(netMusicRefreshButton);
        netMusicCountPanel.add(netMusicPageTextField);
        netMusicCountPanel.add(netMusicGoButton);
        netMusicCountPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netMusicCountPanel.setVisible(false);
        netLeftBox.add(netMusicCountPanel);
    }

    // 初始化在线音乐列表
    private void netMusicListInit() {
        netMusicList.setModel(netMusicListModel);
        netMusicList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    playExecutor.submit(() -> playSelected(netMusicList, false));
                }
            }
        });
        netMusicList.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int index = netMusicList.locationToIndex(e.getPoint());
                Rectangle bounds = netMusicList.getCellBounds(index, index);
                if (bounds == null) return;
                setHoverIndex(bounds.contains(e.getPoint()) ? index : -1);
            }

            private void setHoverIndex(int index) {
                TranslucentNetMusicListRenderer renderer = (TranslucentNetMusicListRenderer) netMusicList.getCellRenderer();
                if (renderer == null) return;
                int hoverIndex = renderer.getHoverIndex();
                if (hoverIndex == index) return;
                renderer.setHoverIndex(index);
                netMusicList.repaint();
            }
        });
        netMusicList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                TranslucentNetMusicListRenderer renderer = (TranslucentNetMusicListRenderer) netMusicList.getCellRenderer();
                if (renderer == null) return;
                renderer.setHoverIndex(-1);
                netMusicList.repaint();
            }
        });
        netMusicList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                // 鼠标左键双击播放
                if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    playExecutor.submit(() -> playSelected(netMusicList, false));
//                    loadingAndRun(() -> playSelected(netMusicList, false));
                }
                // 右键弹出菜单
                else if (e.getButton() == MouseEvent.BUTTON3) {
                    if (netMusicList.getModel().getSize() != 0) {
                        // 得到鼠标光标所在的选项并选中
                        int index = netMusicList.locationToIndex(e.getPoint());
                        if (index == -1) return;
                        if (!netMusicList.isSelectedIndex(index)) netMusicList.setSelectedIndex(index);
                        NetMusicInfo musicInfo = netMusicList.getSelectedValue();
                        netMusicPlayMvMenuItem.setEnabled(musicInfo.hasMv());
                        if (hasBeenCollected(musicInfo)) {
                            netMusicCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                            netMusicCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);
                        } else {
                            netMusicCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, currUIStyle.getButtonColor()));
                            netMusicCollectMenuItem.setText(COLLECT_MENU_ITEM_TEXT);
                        }

                        netMusicPopupMenu.show(netMusicList, e.getX(), e.getY());
                    }
                }
            }
        });
        // 播放在线音乐
        netMusicPlayMenuItem.addActionListener(e -> {
            playExecutor.submit(() -> playSelected(netMusicList, false));
//            loadingAndRun(() -> playSelected(netMusicList, false));
        });
        // 下一首播放
        netMusicNextPlayMenuItem.addActionListener(e -> nextPlay(netMusicList));
        // 收藏在线音乐
        netMusicCollectMenuItem.addActionListener(e -> {
            ListModel model = musicList.getModel();
            boolean needRefresh = model == collectionModel;
            if (netMusicCollectMenuItem.getText().equals(COLLECT_MENU_ITEM_TEXT)) {
                List values = netMusicList.getSelectedValuesList();
                if (needRefresh) musicList.setModel(emptyListModel);
                for (int i = values.size() - 1; i >= 0; i--) {
                    Object o = values.get(i);
                    if (hasBeenCollected(o)) continue;
                    collectionModel.add(0, o);
                    if (player.isPlayingObject(o))
                        collectButton.setIcon(ImageUtils.dye(hasCollectedIcon, currUIStyle.getButtonColor()));
                }
                if (needRefresh) musicList.setModel(model);
                new TipDialog(THIS, COLLECT_SUCCESS_MSG).showDialog();
            } else {
                List values = netMusicList.getSelectedValuesList();
                if (needRefresh) musicList.setModel(emptyListModel);
                values.forEach(o -> {
                    if (hasBeenCollected(o)) {
                        collectionModel.removeElement(o);
                        if (player.isPlayingObject(o))
                            collectButton.setIcon(ImageUtils.dye(collectIcon, currUIStyle.getButtonColor()));
                    }
                });
                if (needRefresh) musicList.setModel(model);
                new TipDialog(THIS, CANCEL_COLLECTION_SUCCESS_MSG).showDialog();
            }
        });
        // 播放在线音乐的 MV
        netMusicPlayMvMenuItem.addActionListener(e -> {
            playMv(MvType.NET_MUSIC_LIST);
        });
        // 下载在线音乐
        netMusicDownloadMenuItem.addActionListener(e -> {
            List values = netMusicList.getSelectedValuesList();
            multiDownload(values);
        });
        // 查看评论
        netMusicCommentMenuItem.addActionListener(e -> {
            getComments(netMusicList.getSelectedValue(), true);
        });
        // 查看乐谱
        netMusicSheetMenuItem.addActionListener(e -> {
            getSheets(netMusicList.getSelectedValue(), true);
        });
        // 搜索这首歌曲
        netMusicSearchSongMenuItem.addActionListener(e -> {
            Object o = netMusicList.getSelectedValue();
            tabbedPane.setSelectedIndex(TabIndex.NET_MUSIC);
            if (currMusicMusicInfo != null) netMusicBackwardButton.doClick();
            searchTextField.requestFocus();
            if (o instanceof NetMusicInfo) {
                searchTextField.setText(((NetMusicInfo) o).toAvailableString());
            } else searchTextField.setText(o.toString());
            netMusicClearInputButton.setVisible(true);
            searchButton.doClick();
        });
        // 查看相似歌曲
        netMusicSimilarSongMenuItem.addActionListener(e -> {
            NetMusicInfo netMusicInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.PERSONAL && currPersonalMusicTab != PersonalMusicTabIndex.COLLECTION
                    || selectedIndex == TabIndex.PERSONAL && currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION
                    && collectionTabbedPane.getSelectedIndex() == CollectionTabIndex.MUSIC) {
                netMusicInfo = (NetMusicInfo) musicList.getSelectedValue();
            } else if (selectedIndex == TabIndex.PLAY_QUEUE) netMusicInfo = (NetMusicInfo) playQueue.getSelectedValue();
            else netMusicInfo = netMusicList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    // 获取相似歌曲
                    CommonResult<NetMusicInfo> result = MusicServerUtils.getSimilarSongs(currMusicMusicInfo = netMusicInfo);
                    List<NetMusicInfo> netMusicInfos = result.data;
                    netMusicCurrPage = netMusicMaxPage = 1;
                    // 标题
                    netMusicTitleLabel.setText(netMusicInfo.toSimpleString() + " 的相似歌曲");
                    netMusicToolBar.removeAll();
                    netMusicToolBar.add(netMusicBackwardButton);
                    netMusicToolBar.add(Box.createHorizontalGlue());
                    netMusicToolBar.add(netMusicTitleLabel);
                    netMusicToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netMusicCountLabel.setText(String.format(PAGINATION_MSG, netMusicCurrPage, netMusicMaxPage));
                    netMusicCountPanel.add(netMusicCountLabel, netMusicCountPanel.getComponentIndex(netMusicCountLabel));
                    netLeftBox.add(netMusicCountPanel);
                    netMusicCountPanel.setVisible(true);
                    netMusicSearchTypeComboBox.setVisible(false);
                    netMusicSearchSubTypeComboBox.setVisible(false);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netMusicList.setModel(emptyListModel);
                    netMusicListModel.clear();
                    netMusicInfos.forEach(musicInfo -> {
                        globalExecutor.submit(() -> updateCollection(musicInfo));
                        // 设置图片加载后重绘的事件
                        musicInfo.setInvokeLater(() -> {
                            netMusicList.repaint();
                            collectionList.repaint();
                        });
                        netMusicListModel.addElement(musicInfo);
                    });
                    netMusicList.setModel(netMusicListModel);
                    netMusicBackwardButton.setEnabled(true);
                    tabbedPane.setSelectedIndex(TabIndex.NET_MUSIC);
                    netLeftBox.remove(netMusicKeywordsPanelScrollPane);
                    if (netMusicListModel.isEmpty()) {
                        netLeftBox.remove(netMusicScrollPane);
                        netLeftBox.add(emptyHintPanel);
                    } else {
                        netLeftBox.remove(emptyHintPanel);
                        netLeftBox.add(netMusicScrollPane);
                    }
                    netMusicScrollPane.getVerticalScrollBar().setValue(0);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看相关歌单
        netMusicRelatedPlaylistMenuItem.addActionListener(e -> {
            NetMusicInfo netMusicInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.PERSONAL && currPersonalMusicTab != PersonalMusicTabIndex.COLLECTION
                    || selectedIndex == TabIndex.PERSONAL && currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION
                    && collectionTabbedPane.getSelectedIndex() == CollectionTabIndex.MUSIC) {
                netMusicInfo = (NetMusicInfo) musicList.getSelectedValue();
            } else if (selectedIndex == TabIndex.PLAY_QUEUE) netMusicInfo = (NetMusicInfo) playQueue.getSelectedValue();
            else netMusicInfo = netMusicList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForPlaylist();
                    // 搜索相关歌单
                    CommonResult<NetPlaylistInfo> result = MusicServerUtils.getRelatedPlaylists(currPlaylistMusicInfo = netMusicInfo);
                    List<NetPlaylistInfo> netPlaylistInfos = result.data;
                    netPlaylistCurrPage = netPlaylistMaxPage = 1;
                    // 标题
                    netPlaylistTitleLabel.setText(netMusicInfo.toSimpleString() + " 的相关歌单");
                    netPlaylistToolBar.removeAll();
                    netPlaylistToolBar.add(netPlaylistBackwardButton);
                    netPlaylistToolBar.add(Box.createHorizontalGlue());
                    netPlaylistToolBar.add(netPlaylistTitleLabel);
                    netPlaylistToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netPlaylistCountLabel.setText(String.format(PAGINATION_MSG, netPlaylistCurrPage, netPlaylistMaxPage));
                    netPlaylistCountPanel.add(netPlaylistCountLabel, netPlaylistCountPanel.getComponentIndex(netPlaylistCountLabel));
                    netPlaylistLeftBox.add(netPlaylistCountPanel);
                    netPlaylistSourceComboBox.setVisible(false);
                    netPlaylistPlayAllButton.setVisible(false);
                    netPlaylistCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netPlaylistList.setModel(emptyListModel);
                    netPlaylistListModel.clear();
                    netPlaylistInfos.forEach(playlistInfo -> {
                        globalExecutor.submit(() -> updateCollection(playlistInfo));
                        // 设置图片加载后重绘的事件
                        playlistInfo.setInvokeLater(() -> {
                            netPlaylistList.repaint();
                            collectionList.repaint();
                        });
                        netPlaylistListModel.addElement(playlistInfo);
                    });
                    netPlaylistList.setModel(netPlaylistListModel);
                    netPlaylistBackwardButton.setEnabled(true);
                    netPlaylistLeftBox.remove(netPlaylistKeywordsPanelScrollPane);
                    netPlaylistLeftBox.remove(playlistListBox);
                    if (netPlaylistListModel.isEmpty()) {
                        netPlaylistLeftBox.remove(netPlaylistScrollPane);
                        netPlaylistLeftBox.add(emptyHintPanel);
                    } else {
                        netPlaylistLeftBox.remove(emptyHintPanel);
                        netPlaylistLeftBox.add(netPlaylistScrollPane);
                    }
                    netPlaylistScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_PLAYLIST);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看歌手/作者
        netMusicAuthorMenuItem.addActionListener(e -> {
            NetMusicInfo netMusicInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.PERSONAL && currPersonalMusicTab != PersonalMusicTabIndex.COLLECTION
                    || selectedIndex == TabIndex.PERSONAL && currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION
                    && collectionTabbedPane.getSelectedIndex() == CollectionTabIndex.MUSIC) {
                netMusicInfo = (NetMusicInfo) musicList.getSelectedValue();
            } else if (selectedIndex == TabIndex.PLAY_QUEUE) netMusicInfo = (NetMusicInfo) playQueue.getSelectedValue();
            else netMusicInfo = netMusicList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    if (netMusicInfo.isProgram()) {
                        clearRequestForUser();
                        // 获取作者
                        currAuthorMusicInfo = netMusicInfo;
                        CommonResult<NetUserInfo> result = MusicServerUtils.getUserInfo(netMusicInfo.getArtistId(), netMusicInfo.getSource());
                        List<NetUserInfo> netUserInfos = result.data;
                        netUserCurrPage = netUserMaxPage = 1;
                        // 标题
                        netUserTitleLabel.setText(netMusicInfo.toSimpleString() + " 的作者");
                        netUserToolBar.removeAll();
                        netUserToolBar.add(netUserBackwardButton);
                        netUserToolBar.add(Box.createHorizontalGlue());
                        netUserToolBar.add(netUserTitleLabel);
                        netUserToolBar.add(Box.createHorizontalGlue());
                        // 更新数量显示
                        netUserCountLabel.setText(String.format(PAGINATION_MSG, netUserCurrPage, netUserMaxPage));
                        netUserCountPanel.add(netUserCountLabel, netUserCountPanel.getComponentIndex(netUserCountLabel));
                        netUserLeftBox.add(netUserCountPanel);
                        netUserSourceComboBox.setVisible(false);
                        netUserPlayAllButton.setVisible(false);
                        netUserRecordTypeComboBox.setVisible(false);
                        netUserCountPanel.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netUserList.setModel(emptyListModel);
                        netUserListModel.clear();
                        netUserInfos.forEach(userInfo -> {
                            globalExecutor.submit(() -> updateCollection(userInfo));
                            // 设置图片加载后重绘的事件
                            userInfo.setInvokeLater(() -> {
                                updateRenderer(netUserList);
                                updateRenderer(collectionList);
                                netUserList.repaint();
                                collectionList.repaint();
                            });
                            netUserListModel.addElement(userInfo);
                        });
                        netUserList.setModel(netUserListModel);
                        netUserBackwardButton.setEnabled(true);
                        netUserLeftBox.remove(netUserKeywordsPanelScrollPane);
                        netUserLeftBox.remove(userListBox);
                        if (netUserListModel.isEmpty()) {
                            netUserLeftBox.remove(netUserScrollPane);
                            netUserLeftBox.add(emptyHintPanel);
                        } else {
                            netUserLeftBox.remove(emptyHintPanel);
                            netUserLeftBox.add(netUserScrollPane);
                        }
                        netUserScrollPane.getVerticalScrollBar().setValue(0);
                        tabbedPane.setSelectedIndex(TabIndex.NET_USER);
                    } else {
                        clearRequestForArtist();
                        // 获取歌手
                        currArtistMusicInfo = netMusicInfo;
                        CommonResult<NetArtistInfo> result = MusicServerUtils.getArtistInfo(netMusicInfo.getArtistId(), netMusicInfo.getSource());
                        List<NetArtistInfo> netArtistInfos = result.data;
                        netArtistCurrPage = netArtistMaxPage = 1;
                        // 标题
                        netArtistTitleLabel.setText(currArtistMusicInfo.toSimpleString() + " 的歌手");
                        netArtistToolBar.removeAll();
                        netArtistToolBar.add(netArtistBackwardButton);
                        netArtistToolBar.add(Box.createHorizontalGlue());
                        netArtistToolBar.add(netArtistTitleLabel);
                        netArtistToolBar.add(Box.createHorizontalGlue());
                        // 更新数量显示
                        netArtistCountLabel.setText(String.format(PAGINATION_MSG, netArtistCurrPage, netArtistMaxPage));
                        netArtistCountPanel.add(netArtistCountLabel, netArtistCountPanel.getComponentIndex(netArtistCountLabel));
                        netArtistLeftBox.add(netArtistCountPanel);
                        netArtistSourceComboBox.setVisible(false);
                        netArtistPlayAllButton.setVisible(false);
                        netArtistCountPanel.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netArtistList.setModel(emptyListModel);
                        netArtistListModel.clear();
                        netArtistInfos.forEach(artistInfo -> {
                            globalExecutor.submit(() -> updateCollection(artistInfo));
                            // 设置图片加载后重绘的事件
                            artistInfo.setInvokeLater(() -> {
                                netArtistList.repaint();
                                collectionList.repaint();
                            });
                            netArtistListModel.addElement(artistInfo);
                        });
                        netArtistList.setModel(netArtistListModel);
                        netArtistBackwardButton.setEnabled(true);
                        netArtistLeftBox.remove(netArtistKeywordsPanelScrollPane);
                        netArtistLeftBox.remove(artistListBox);
                        if (netArtistListModel.isEmpty()) {
                            netArtistLeftBox.remove(netArtistScrollPane);
                            netArtistLeftBox.add(emptyHintPanel);
                        } else {
                            netArtistLeftBox.remove(emptyHintPanel);
                            netArtistLeftBox.add(netArtistScrollPane);
                        }
                        netArtistScrollPane.getVerticalScrollBar().setValue(0);
                        tabbedPane.setSelectedIndex(TabIndex.NET_ARTIST);
                    }
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看专辑/电台
        netMusicAlbumMenuItem.addActionListener(e -> {
            NetMusicInfo netMusicInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.PERSONAL && currPersonalMusicTab != PersonalMusicTabIndex.COLLECTION
                    || selectedIndex == TabIndex.PERSONAL && currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION
                    && collectionTabbedPane.getSelectedIndex() == CollectionTabIndex.MUSIC) {
                netMusicInfo = (NetMusicInfo) musicList.getSelectedValue();
            } else if (selectedIndex == TabIndex.PLAY_QUEUE) netMusicInfo = (NetMusicInfo) playQueue.getSelectedValue();
            else netMusicInfo = netMusicList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    if (netMusicInfo.isProgram()) {
                        clearRequestForRadio();
                        // 获取歌曲电台
                        currRadioMusicInfo = netMusicInfo;
                        CommonResult<NetRadioInfo> result = MusicServerUtils.getRadioInfo(netMusicInfo.getAlbumId(), netMusicInfo.getSource());
                        List<NetRadioInfo> netRadioInfos = result.data;
                        int total = result.total;
                        netRadioMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 标题
                        netRadioTitleLabel.setText(netMusicInfo.toSimpleString() + " 的电台");
                        netRadioToolBar.removeAll();
                        netRadioToolBar.add(netRadioBackwardButton);
                        netRadioToolBar.add(Box.createHorizontalGlue());
                        netRadioToolBar.add(netRadioTitleLabel);
                        netRadioToolBar.add(Box.createHorizontalGlue());
                        // 更新数量显示
                        netRadioCountLabel.setText(String.format(PAGINATION_MSG, netRadioCurrPage, netRadioMaxPage));
                        netRadioCountPanel.add(netRadioCountLabel, netRadioCountPanel.getComponentIndex(netRadioCountLabel));
                        netRadioLeftBox.add(netRadioCountPanel);
                        netRadioSourceComboBox.setVisible(false);
                        netRadioPlayAllButton.setVisible(false);
                        netRadioCountPanel.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netRadioList.setModel(emptyListModel);
                        netRadioListModel.clear();
                        netRadioInfos.forEach(radioInfo -> {
                            globalExecutor.submit(() -> updateCollection(radioInfo));
                            // 设置图片加载后重绘的事件
                            radioInfo.setInvokeLater(() -> {
                                updateRenderer(netRadioList);
                                updateRenderer(collectionList);
                                netRadioList.repaint();
                                collectionList.repaint();
                            });
                            netRadioListModel.addElement(radioInfo);
                        });
                        netRadioList.setModel(netRadioListModel);
                        netRadioBackwardButton.setEnabled(true);
                        netRadioLeftBox.remove(netRadioKeywordsPanelScrollPane);
                        netRadioLeftBox.remove(radioListBox);
                        if (netRadioListModel.isEmpty()) {
                            netRadioLeftBox.remove(netRadioScrollPane);
                            netRadioLeftBox.add(emptyHintPanel);
                        } else {
                            netRadioLeftBox.remove(emptyHintPanel);
                            netRadioLeftBox.add(netRadioScrollPane);
                        }
                        netRadioScrollPane.getVerticalScrollBar().setValue(0);
                        tabbedPane.setSelectedIndex(TabIndex.NET_RADIO);
                    } else {
                        clearRequestForAlbum();
                        // 查看歌曲专辑
                        currAlbumMusicInfo = netMusicInfo;
                        CommonResult<NetAlbumInfo> result = MusicServerUtils.getAlbumInfo(netMusicInfo.getAlbumId(), netMusicInfo.getSource());
                        List<NetAlbumInfo> netAlbumInfos = result.data;
                        Integer total = result.total;
                        netAlbumMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 标题
                        netAlbumTitleLabel.setText(netMusicInfo.toSimpleString() + " 的专辑");
                        netAlbumToolBar.removeAll();
                        netAlbumToolBar.add(netAlbumBackwardButton);
                        netAlbumToolBar.add(Box.createHorizontalGlue());
                        netAlbumToolBar.add(netAlbumTitleLabel);
                        netAlbumToolBar.add(Box.createHorizontalGlue());
                        // 更新数量显示
                        netAlbumCountLabel.setText(String.format(PAGINATION_MSG, netAlbumCurrPage, netAlbumMaxPage));
                        netAlbumCountPanel.add(netAlbumCountLabel, netAlbumCountPanel.getComponentIndex(netAlbumCountLabel));
                        netAlbumLeftBox.add(netAlbumCountPanel);
                        netAlbumSourceComboBox.setVisible(false);
                        netAlbumPlayAllButton.setVisible(false);
                        netAlbumCountPanel.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netAlbumList.setModel(emptyListModel);
                        netAlbumListModel.clear();
                        netAlbumInfos.forEach(albumInfo -> {
                            globalExecutor.submit(() -> updateCollection(albumInfo));
                            // 设置图片加载后重绘的事件
                            albumInfo.setInvokeLater(() -> {
                                netAlbumList.repaint();
                                collectionList.repaint();
                            });
                            netAlbumListModel.addElement(albumInfo);
                        });
                        netAlbumList.setModel(netAlbumListModel);
                        netAlbumBackwardButton.setEnabled(true);
                        netAlbumLeftBox.remove(netAlbumKeywordsPanelScrollPane);
                        netAlbumLeftBox.remove(albumListBox);
                        if (netAlbumListModel.isEmpty()) {
                            netAlbumLeftBox.remove(netAlbumScrollPane);
                            netAlbumLeftBox.add(emptyHintPanel);
                        } else {
                            netAlbumLeftBox.remove(emptyHintPanel);
                            netAlbumLeftBox.add(netAlbumScrollPane);
                        }
                        netAlbumScrollPane.getVerticalScrollBar().setValue(0);
                        tabbedPane.setSelectedIndex(TabIndex.NET_ALBUM);
                    }
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看推荐电台
        netMusicRecRadioMenuItem.addActionListener(e -> {
            NetMusicInfo netMusicInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.PERSONAL && currPersonalMusicTab != PersonalMusicTabIndex.COLLECTION
                    || selectedIndex == TabIndex.PERSONAL && currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION
                    && collectionTabbedPane.getSelectedIndex() == CollectionTabIndex.MUSIC) {
                netMusicInfo = (NetMusicInfo) musicList.getSelectedValue();
            } else if (selectedIndex == TabIndex.PLAY_QUEUE) netMusicInfo = (NetMusicInfo) playQueue.getSelectedValue();
            else netMusicInfo = netMusicList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForRadio();
                    // 获取歌曲推荐电台
                    currRecRadioMusicInfo = netMusicInfo;
                    CommonResult<NetRadioInfo> result = MusicServerUtils.getRecRadios(netMusicInfo);
                    List<NetRadioInfo> netRadioInfos = result.data;
                    int total = result.total;
                    netRadioMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netRadioTitleLabel.setText(netMusicInfo.toSimpleString() + " 的推荐电台");
                    netRadioToolBar.removeAll();
                    netRadioToolBar.add(netRadioBackwardButton);
                    netRadioToolBar.add(Box.createHorizontalGlue());
                    netRadioToolBar.add(netRadioTitleLabel);
                    netRadioToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netRadioCountLabel.setText(String.format(PAGINATION_MSG, netRadioCurrPage, netRadioMaxPage));
                    netRadioCountPanel.add(netRadioCountLabel, netRadioCountPanel.getComponentIndex(netRadioCountLabel));
                    netRadioLeftBox.add(netRadioCountPanel);
                    netRadioSourceComboBox.setVisible(false);
                    netRadioPlayAllButton.setVisible(false);
                    netRadioCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netRadioList.setModel(emptyListModel);
                    netRadioListModel.clear();
                    netRadioInfos.forEach(radioInfo -> {
                        globalExecutor.submit(() -> updateCollection(radioInfo));
                        // 设置图片加载后重绘的事件
                        radioInfo.setInvokeLater(() -> {
                            updateRenderer(netRadioList);
                            updateRenderer(collectionList);
                            netRadioList.repaint();
                            collectionList.repaint();
                        });
                        netRadioListModel.addElement(radioInfo);
                    });
                    netRadioList.setModel(netRadioListModel);
                    netRadioBackwardButton.setEnabled(true);
                    netRadioLeftBox.remove(netRadioKeywordsPanelScrollPane);
                    netRadioLeftBox.remove(radioListBox);
                    if (netRadioListModel.isEmpty()) {
                        netRadioLeftBox.remove(netRadioScrollPane);
                        netRadioLeftBox.add(emptyHintPanel);
                    } else {
                        netRadioLeftBox.remove(emptyHintPanel);
                        netRadioLeftBox.add(netRadioScrollPane);
                    }
                    netRadioScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_RADIO);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看相关 MV
        netMusicRelatedMvMenuItem.addActionListener(e -> {
            NetMusicInfo netMusicInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.PERSONAL && currPersonalMusicTab != PersonalMusicTabIndex.COLLECTION
                    || selectedIndex == TabIndex.PERSONAL && currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION
                    && collectionTabbedPane.getSelectedIndex() == CollectionTabIndex.MUSIC) {
                netMusicInfo = (NetMusicInfo) musicList.getSelectedValue();
            } else if (selectedIndex == TabIndex.PLAY_QUEUE) netMusicInfo = (NetMusicInfo) playQueue.getSelectedValue();
            else netMusicInfo = netMusicList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForMv();
                    // 获取相关 MV
                    CommonResult<NetMvInfo> result = MusicServerUtils.getRelatedMvs(currMvMusicInfo = netMusicInfo, limit, netMvCurrPage = 1);
                    List<NetMvInfo> netMvInfos = result.data;
                    Integer total = result.total;
                    netMvMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netMvTitleLabel.setText(netMusicInfo.toSimpleString() + " 的相关 MV");
                    netMvToolBar.removeAll();
                    netMvToolBar.add(netMvBackwardButton);
                    netMvToolBar.add(Box.createHorizontalGlue());
                    netMvToolBar.add(netMvTitleLabel);
                    netMvToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netMvCountLabel.setText(String.format(PAGINATION_MSG, netMvCurrPage, netMvMaxPage));
                    netMvCountPanel.add(netMvCountLabel, netMvCountPanel.getComponentIndex(netMvCountLabel));
                    netMvLeftBox.add(netMvCountPanel);
                    netMvCountPanel.setVisible(true);
                    netMvSortTypeComboBox.setVisible(false);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netMvList.setModel(emptyListModel);
                    netMvListModel.clear();
                    netMvInfos.forEach(mvInfo -> {
                        globalExecutor.submit(() -> updateCollection(mvInfo));
                        // 设置图片加载后重绘的事件
                        mvInfo.setInvokeLater(() -> {
                            updateRenderer(netMvList);
                            updateRenderer(collectionList);
                            netMvList.repaint();
                            collectionList.repaint();
                        });
                        netMvListModel.addElement(mvInfo);
                    });
                    netMvList.setModel(netMvListModel);
                    netMvBackwardButton.setEnabled(true);
                    netMvLeftBox.remove(netMvKeywordsPanelScrollPane);
                    if (netMvListModel.isEmpty()) {
                        netMvLeftBox.remove(netMvScrollPane);
                        netMvLeftBox.add(emptyHintPanel);
                    } else {
                        netMvLeftBox.remove(emptyHintPanel);
                        netMvLeftBox.add(netMvScrollPane);
                    }
                    netMvScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_MV);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 右键菜单复制名称
        netMusicCopyNameMenuItem.addActionListener(e -> {
            Object o = netMusicList.getSelectedValue();
            StringSelection stringSelection = new StringSelection(((NetMusicInfo) o).toSimpleString());
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });

        netMusicPopupMenu.add(netMusicPlayMenuItem);
        netMusicPopupMenu.add(netMusicNextPlayMenuItem);
        netMusicPopupMenu.add(netMusicPlayMvMenuItem);
        netMusicPopupMenu.add(netMusicCollectMenuItem);
        netMusicPopupMenu.add(netMusicDownloadMenuItem);
        netMusicPopupMenu.add(netMusicCommentMenuItem);
        netMusicPopupMenu.add(netMusicSheetMenuItem);
        netMusicPopupMenu.add(netMusicSearchSongMenuItem);
        netMusicPopupMenu.add(netMusicSimilarSongMenuItem);
        netMusicPopupMenu.add(netMusicRelatedPlaylistMenuItem);
        netMusicPopupMenu.add(netMusicAuthorMenuItem);
        netMusicPopupMenu.add(netMusicAlbumMenuItem);
        netMusicPopupMenu.add(netMusicRecRadioMenuItem);
        netMusicPopupMenu.add(netMusicRelatedMvMenuItem);
        netMusicPopupMenu.add(netMusicCopyNameMenuItem);

        // 搜索建议面板
        // 刷新搜索建议按钮
        netMusicRefreshSearchSuggestionButton.addActionListener(e -> globalExecutor.submit(() -> updateSearchSuggestion()));
        netMusicRefreshSearchSuggestionButton.setPreferredSize(new Dimension(20, 20));
        netMusicRefreshSearchSuggestionButton.setToolTipText(REFRESH_TIP);
        netMusicRefreshSearchSuggestionButton.addMouseListener(new ButtonMouseListener(netMusicRefreshSearchSuggestionButton, THIS));

        netMusicSearchSuggestionInnerPanel1.add(netMusicSearchSuggestionLabel);
        netMusicSearchSuggestionInnerPanel1.add(netMusicRefreshSearchSuggestionButton);
        netMusicSearchSuggestionInnerPanel1.setLayout(new FlowLayout(FlowLayout.LEFT));
        netMusicSearchSuggestionInnerPanel1.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        netMusicSearchSuggestionInnerPanel1.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netMusicSearchSuggestionInnerPanel2.setLayout(new FlowLayout(FlowLayout.LEFT));
        netMusicSearchSuggestionInnerPanel2.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        Dimension d = new Dimension(Integer.MAX_VALUE, 500);
        netMusicSearchSuggestionInnerPanel2.setMaximumSize(d);
        netMusicSearchSuggestionInnerPanel2.setPreferredSize(d);
        netMusicSearchSuggestionPanel.setLayout(new BoxLayout(netMusicSearchSuggestionPanel, BoxLayout.Y_AXIS));
        netMusicSearchSuggestionPanel.add(netMusicSearchSuggestionInnerPanel1);
        netMusicSearchSuggestionPanel.add(netMusicSearchSuggestionInnerPanel2);
        // 热搜面板
        // 刷新热门搜索按钮
        netMusicRefreshHotSearchButton.addActionListener(e -> globalExecutor.submit(() -> updateHotSearch()));
        netMusicRefreshHotSearchButton.setPreferredSize(new Dimension(20, 20));
        netMusicRefreshHotSearchButton.setToolTipText(REFRESH_TIP);
        netMusicRefreshHotSearchButton.addMouseListener(new ButtonMouseListener(netMusicRefreshHotSearchButton, THIS));

        netMusicHotSearchInnerPanel1.add(netMusicHotSearchLabel);
        netMusicHotSearchInnerPanel1.add(netMusicRefreshHotSearchButton);
        netMusicHotSearchInnerPanel1.setLayout(new FlowLayout(FlowLayout.LEFT));
        netMusicHotSearchInnerPanel1.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        netMusicHotSearchInnerPanel1.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netMusicHotSearchInnerPanel2.setLayout(new FlowLayout(FlowLayout.LEFT));
        netMusicHotSearchInnerPanel2.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        d = new Dimension(Integer.MAX_VALUE, 500);
        netMusicHotSearchInnerPanel2.setMaximumSize(d);
        netMusicHotSearchInnerPanel2.setPreferredSize(d);
        netMusicHotSearchPanel.setLayout(new BoxLayout(netMusicHotSearchPanel, BoxLayout.Y_AXIS));
        netMusicHotSearchPanel.add(netMusicHotSearchInnerPanel1);
        netMusicHotSearchPanel.add(netMusicHotSearchInnerPanel2);
        // 搜索历史面板
        // 清空搜索历史按钮
        netMusicClearHistorySearchButton.addActionListener(e -> {
            netMusicHistorySearchInnerPanel2.removeAll();
            netMusicKeywordsPanel.remove(netMusicHistorySearchPanel);
            netMusicKeywordsPanel.repaint();
        });
        netMusicClearHistorySearchButton.setPreferredSize(new Dimension(20, 20));
        netMusicClearHistorySearchButton.setToolTipText(CLEAR_HISTORY_SEARCH_TIP);
        netMusicClearHistorySearchButton.addMouseListener(new ButtonMouseListener(netMusicClearHistorySearchButton, THIS));

        netMusicHistorySearchInnerPanel1.add(netMusicHistorySearchLabel);
        netMusicHistorySearchInnerPanel1.add(netMusicClearHistorySearchButton);
        netMusicHistorySearchInnerPanel1.setLayout(new FlowLayout(FlowLayout.LEFT));
        netMusicHistorySearchInnerPanel1.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        netMusicHistorySearchInnerPanel1.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netMusicHistorySearchInnerPanel2.setLayout(new FlowLayout(FlowLayout.LEFT));
        netMusicHistorySearchInnerPanel2.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        netMusicHistorySearchPanel.setLayout(new BoxLayout(netMusicHistorySearchPanel, BoxLayout.Y_AXIS));
        netMusicHistorySearchPanel.add(netMusicHistorySearchInnerPanel1);
        netMusicHistorySearchPanel.add(netMusicHistorySearchInnerPanel2);
        // 关键词面板
        netMusicKeywordsPanel.setLayout(new BoxLayout(netMusicKeywordsPanel, BoxLayout.Y_AXIS));
//        // 滚动条监听器
//        netMusicKeywordsPanelScrollPane.addMouseListener(new ScrollPaneListener(netMusicKeywordsPanelScrollPane, THIS));

        // 同时限制面板与滚动条的大小才能保证按钮不超出窗口！！！
        d = new Dimension(900, 1000);
        netMusicKeywordsPanel.setPreferredSize(d);
        netMusicKeywordsPanelScrollPane.setPreferredSize(d);
        // 滚动条
        netMusicScrollPane.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                // 重新设置 renderer 可以避免 netMusicList 宽度不刷新！
                updateRenderer(netMusicList);
            }
        });
        // 在线歌单最佳大小
        netMusicScrollPane.setPreferredSize(new Dimension(200, 600));
        netLeftBox.add(netMusicScrollPane);
    }

    // 初始化描述盒子
    private void descriptionPanelInit() {
        // 描述标签垂直对齐方式
        playlistTagLabel.setVerticalAlignment(SwingConstants.TOP);
        playlistDescriptionLabel.setVerticalAlignment(SwingConstants.TOP);
        artistTagLabel.setVerticalAlignment(SwingConstants.TOP);
        albumDescriptionLabel.setVerticalAlignment(SwingConstants.TOP);
        artistDescriptionLabel.setVerticalAlignment(SwingConstants.TOP);
        radioTagLabel.setVerticalAlignment(SwingConstants.TOP);
        radioDescriptionLabel.setVerticalAlignment(SwingConstants.TOP);
        rankingDescriptionLabel.setVerticalAlignment(SwingConstants.TOP);
        userTagLabel.setVerticalAlignment(SwingConstants.TOP);
        userDescriptionLabel.setVerticalAlignment(SwingConstants.TOP);
        recommendItemTagLabel.setVerticalAlignment(SwingConstants.TOP);
        recommendItemDescriptionLabel.setVerticalAlignment(SwingConstants.TOP);
        collectionItemTagLabel.setVerticalAlignment(SwingConstants.TOP);
        collectionItemDescriptionLabel.setVerticalAlignment(SwingConstants.TOP);
        // 文字图标相对位置和间距
        playlistCoverAndNameLabel.setVerticalTextPosition(SwingConstants.BOTTOM);
        playlistCoverAndNameLabel.setHorizontalTextPosition(SwingConstants.CENTER);
        albumCoverAndNameLabel.setVerticalTextPosition(SwingConstants.BOTTOM);
        albumCoverAndNameLabel.setHorizontalTextPosition(SwingConstants.CENTER);
        artistCoverAndNameLabel.setVerticalTextPosition(SwingConstants.BOTTOM);
        artistCoverAndNameLabel.setHorizontalTextPosition(SwingConstants.CENTER);
        radioCoverAndNameLabel.setVerticalTextPosition(SwingConstants.BOTTOM);
        radioCoverAndNameLabel.setHorizontalTextPosition(SwingConstants.CENTER);
        rankingCoverAndNameLabel.setVerticalTextPosition(SwingConstants.BOTTOM);
        rankingCoverAndNameLabel.setHorizontalTextPosition(SwingConstants.CENTER);
        userCoverAndNameLabel.setVerticalTextPosition(SwingConstants.BOTTOM);
        userCoverAndNameLabel.setHorizontalTextPosition(SwingConstants.CENTER);
        recommendItemCoverAndNameLabel.setVerticalTextPosition(SwingConstants.BOTTOM);
        recommendItemCoverAndNameLabel.setHorizontalTextPosition(SwingConstants.CENTER);
        collectionItemCoverAndNameLabel.setVerticalTextPosition(SwingConstants.BOTTOM);
        collectionItemCoverAndNameLabel.setHorizontalTextPosition(SwingConstants.CENTER);

        userDescriptionLabel.setVerticalTextPosition(SwingConstants.TOP);
        userDescriptionLabel.setHorizontalTextPosition(SwingConstants.CENTER);
        collectionItemDescriptionLabel.setVerticalTextPosition(SwingConstants.TOP);
        collectionItemDescriptionLabel.setHorizontalTextPosition(SwingConstants.CENTER);

        int gap = 30;
        playlistCoverAndNameLabel.setIconTextGap(gap);
        albumCoverAndNameLabel.setIconTextGap(gap);
        artistCoverAndNameLabel.setIconTextGap(gap);
        radioCoverAndNameLabel.setIconTextGap(gap);
        rankingCoverAndNameLabel.setIconTextGap(gap);
        userCoverAndNameLabel.setIconTextGap(gap);
        userDescriptionLabel.setIconTextGap(gap);
        recommendItemCoverAndNameLabel.setIconTextGap(gap);
        collectionItemCoverAndNameLabel.setIconTextGap(gap);
        collectionItemDescriptionLabel.setIconTextGap(gap);

        // 边框间距
        Border eb = BorderFactory.createEmptyBorder(15, 0, 0, 0);
        playlistTagLabel.setBorder(eb);
        artistTagLabel.setBorder(eb);
        radioTagLabel.setBorder(eb);
        userTagLabel.setBorder(eb);
        recommendItemTagLabel.setBorder(eb);
        collectionItemTagLabel.setBorder(eb);

        eb = BorderFactory.createEmptyBorder(gap, 0, 0, 0);
        playlistDescriptionLabel.setBorder(eb);
        albumDescriptionLabel.setBorder(eb);
        artistDescriptionLabel.setBorder(eb);
        radioDescriptionLabel.setBorder(eb);
        rankingDescriptionLabel.setBorder(eb);
        userDescriptionLabel.setBorder(eb);
        recommendItemDescriptionLabel.setBorder(eb);
        collectionItemDescriptionLabel.setBorder(eb);
        // 控制宽度
        Dimension size = new Dimension(350, Integer.MAX_VALUE);
        playlistCoverAndNameLabel.setMaximumSize(size);
        playlistTagLabel.setMaximumSize(size);
        playlistDescriptionLabel.setMaximumSize(size);
        albumCoverAndNameLabel.setMaximumSize(size);
        albumDescriptionLabel.setMaximumSize(size);
        artistCoverAndNameLabel.setMaximumSize(size);
        artistTagLabel.setMaximumSize(size);
        artistDescriptionLabel.setMaximumSize(size);
        radioCoverAndNameLabel.setMaximumSize(size);
        radioTagLabel.setMaximumSize(size);
        radioDescriptionLabel.setMaximumSize(size);
        rankingCoverAndNameLabel.setMaximumSize(size);
        rankingDescriptionLabel.setMaximumSize(size);
        userCoverAndNameLabel.setMaximumSize(size);
        userTagLabel.setMaximumSize(size);
        userDescriptionLabel.setMaximumSize(size);
        recommendItemCoverAndNameLabel.setMaximumSize(size);
        recommendItemTagLabel.setMaximumSize(size);
        recommendItemDescriptionLabel.setMaximumSize(size);
        collectionItemCoverAndNameLabel.setMaximumSize(size);
        collectionItemTagLabel.setMaximumSize(size);
        collectionItemDescriptionLabel.setMaximumSize(size);
        // 滚动面板宽度
        final int width = 360;
        size = new Dimension(width, Integer.MAX_VALUE);
        albumDescriptionScrollPane.setPreferredSize(size);
        playlistDescriptionScrollPane.setPreferredSize(size);
        artistDescriptionScrollPane.setPreferredSize(size);
        radioDescriptionScrollPane.setPreferredSize(size);
        rankingDescriptionScrollPane.setPreferredSize(size);
        userDescriptionScrollPane.setPreferredSize(size);
        recommendItemDescriptionScrollPane.setPreferredSize(size);
        collectionItemDescriptionScrollPane.setPreferredSize(size);
        // 滚动条最大大小
        size = new Dimension(width, Integer.MAX_VALUE);
        playlistDescriptionScrollPane.setMaximumSize(size);
        albumDescriptionScrollPane.setMaximumSize(size);
        artistDescriptionScrollPane.setMaximumSize(size);
        radioDescriptionScrollPane.setMaximumSize(size);
        rankingDescriptionScrollPane.setMaximumSize(size);
        userDescriptionScrollPane.setMaximumSize(size);
        recommendItemDescriptionScrollPane.setMaximumSize(size);
        collectionItemDescriptionScrollPane.setMaximumSize(size);
        // 滚动条监听器
        playlistDescriptionScrollPane.addMouseListener(new ScrollPaneListener(playlistDescriptionScrollPane, THIS));
        albumDescriptionScrollPane.addMouseListener(new ScrollPaneListener(albumDescriptionScrollPane, THIS));
        artistDescriptionScrollPane.addMouseListener(new ScrollPaneListener(artistDescriptionScrollPane, THIS));
        radioDescriptionScrollPane.addMouseListener(new ScrollPaneListener(radioDescriptionScrollPane, THIS));
        rankingDescriptionScrollPane.addMouseListener(new ScrollPaneListener(rankingDescriptionScrollPane, THIS));
        userDescriptionScrollPane.addMouseListener(new ScrollPaneListener(userDescriptionScrollPane, THIS));
        recommendItemDescriptionScrollPane.addMouseListener(new ScrollPaneListener(recommendItemDescriptionScrollPane, THIS));
        collectionItemDescriptionScrollPane.addMouseListener(new ScrollPaneListener(collectionItemDescriptionScrollPane, THIS));
        // 描述面板更新
        playlistDescriptionPanel.setLayout(new BoxLayout(playlistDescriptionPanel, BoxLayout.Y_AXIS));
        albumDescriptionPanel.setLayout(new BoxLayout(albumDescriptionPanel, BoxLayout.Y_AXIS));
        artistDescriptionPanel.setLayout(new BoxLayout(artistDescriptionPanel, BoxLayout.Y_AXIS));
        radioDescriptionPanel.setLayout(new BoxLayout(radioDescriptionPanel, BoxLayout.Y_AXIS));
        rankingDescriptionPanel.setLayout(new BoxLayout(rankingDescriptionPanel, BoxLayout.Y_AXIS));
        userDescriptionPanel.setLayout(new BoxLayout(userDescriptionPanel, BoxLayout.Y_AXIS));
        recommendItemDescriptionPanel.setLayout(new BoxLayout(recommendItemDescriptionPanel, BoxLayout.Y_AXIS));
        collectionItemDescriptionPanel.setLayout(new BoxLayout(collectionItemDescriptionPanel, BoxLayout.Y_AXIS));
        playlistDescriptionPanel.add(playlistCoverAndNameLabel);
        playlistDescriptionPanel.add(playlistTagLabel);
        playlistDescriptionPanel.add(playlistDescriptionLabel);
        albumDescriptionPanel.add(albumCoverAndNameLabel);
        albumDescriptionPanel.add(albumDescriptionLabel);
        artistDescriptionPanel.add(artistCoverAndNameLabel);
        artistDescriptionPanel.add(artistTagLabel);
        artistDescriptionPanel.add(artistDescriptionLabel);
        radioDescriptionPanel.add(radioCoverAndNameLabel);
        radioDescriptionPanel.add(radioTagLabel);
        radioDescriptionPanel.add(radioDescriptionLabel);
        rankingDescriptionPanel.add(rankingCoverAndNameLabel);
        rankingDescriptionPanel.add(rankingDescriptionLabel);
        userDescriptionPanel.add(userCoverAndNameLabel);
        userDescriptionPanel.add(userTagLabel);
        userDescriptionPanel.add(userDescriptionLabel);
        recommendItemDescriptionPanel.add(recommendItemCoverAndNameLabel);
        recommendItemDescriptionPanel.add(recommendItemTagLabel);
        recommendItemDescriptionPanel.add(recommendItemDescriptionLabel);
        collectionItemDescriptionPanel.add(collectionItemCoverAndNameLabel);
        collectionItemDescriptionPanel.add(collectionItemTagLabel);
        collectionItemDescriptionPanel.add(collectionItemDescriptionLabel);

        // 右键菜单
        descriptionPanelPopupMenu.add(saveDescCoverImgMenuItem);
        descriptionPanelPopupMenu.add(saveDescBgImgMenuItem);
        descriptionPanelPopupMenu.add(copyDescNameMenuItem);
        descriptionPanelPopupMenu.add(copyDescTagMenuItem);
        descriptionPanelPopupMenu.add(copyDescMenuItem);
        playlistDescriptionPanel.setComponentPopupMenu(descriptionPanelPopupMenu);
        albumDescriptionPanel.setComponentPopupMenu(descriptionPanelPopupMenu);
        artistDescriptionPanel.setComponentPopupMenu(descriptionPanelPopupMenu);
        radioDescriptionPanel.setComponentPopupMenu(descriptionPanelPopupMenu);
        rankingDescriptionPanel.setComponentPopupMenu(descriptionPanelPopupMenu);
        userDescriptionPanel.setComponentPopupMenu(descriptionPanelPopupMenu);
        recommendItemDescriptionPanel.setComponentPopupMenu(descriptionPanelPopupMenu);
        collectionItemDescriptionPanel.setComponentPopupMenu(descriptionPanelPopupMenu);
        saveDescCoverImgMenuItem.addActionListener(e -> {
            Object o = null;
            int si = tabbedPane.getSelectedIndex();
            if (si == TabIndex.PERSONAL) o = collectionList.getSelectedValue();
            else if (si == TabIndex.NET_PLAYLIST) o = netPlaylistList.getSelectedValue();
            else if (si == TabIndex.NET_ALBUM) o = netAlbumList.getSelectedValue();
            else if (si == TabIndex.NET_ARTIST) o = netArtistList.getSelectedValue();
            else if (si == TabIndex.NET_RADIO) o = netRadioList.getSelectedValue();
            else if (si == TabIndex.NET_RANKING) o = netRankingList.getSelectedValue();
            else if (si == TabIndex.NET_USER) o = netUserList.getSelectedValue();
            else if (si == TabIndex.RECOMMEND) o = itemRecommendList.getSelectedValue();
            if (o instanceof NetPlaylistInfo) saveImg(((NetPlaylistInfo) o).getCoverImg());
            else if (o instanceof NetAlbumInfo) saveImg(((NetAlbumInfo) o).getCoverImg());
            else if (o instanceof NetArtistInfo) saveImg(((NetArtistInfo) o).getCoverImg());
            else if (o instanceof NetRadioInfo) saveImg(((NetRadioInfo) o).getCoverImg());
            else if (o instanceof NetRankingInfo) saveImg(((NetRankingInfo) o).getCoverImg());
            else if (o instanceof NetUserInfo) saveImg(((NetUserInfo) o).getAvatar());
        });
        saveDescBgImgMenuItem.addActionListener(e -> {
            Object o = null;
            int si = tabbedPane.getSelectedIndex();
            if (si == TabIndex.PERSONAL) o = collectionList.getSelectedValue();
            else if (si == TabIndex.NET_USER) o = netUserList.getSelectedValue();
            if (o instanceof NetUserInfo) saveImg(((NetUserInfo) o).getBgImg());
        });
        copyDescNameMenuItem.addActionListener(e -> {
            CustomLabel l = null;
            int si = tabbedPane.getSelectedIndex();
            if (si == TabIndex.PERSONAL) l = collectionItemCoverAndNameLabel;
            else if (si == TabIndex.NET_PLAYLIST) l = playlistCoverAndNameLabel;
            else if (si == TabIndex.NET_ALBUM) l = albumCoverAndNameLabel;
            else if (si == TabIndex.NET_ARTIST) l = artistCoverAndNameLabel;
            else if (si == TabIndex.NET_RADIO) l = radioCoverAndNameLabel;
            else if (si == TabIndex.NET_RANKING) l = rankingCoverAndNameLabel;
            else if (si == TabIndex.NET_USER) l = userCoverAndNameLabel;
            else if (si == TabIndex.RECOMMEND) l = recommendItemCoverAndNameLabel;
            StringSelection stringSelection = new StringSelection(StringUtils.removeHTMLLabel(l.getText()));
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });
        copyDescTagMenuItem.addActionListener(e -> {
            CustomLabel l = null;
            int si = tabbedPane.getSelectedIndex();
            if (si == TabIndex.PERSONAL) l = collectionItemTagLabel;
            else if (si == TabIndex.NET_PLAYLIST) l = playlistTagLabel;
            else if (si == TabIndex.NET_ARTIST) l = artistTagLabel;
            else if (si == TabIndex.NET_RADIO) l = radioTagLabel;
            else if (si == TabIndex.NET_USER) l = userTagLabel;
            else if (si == TabIndex.RECOMMEND) l = recommendItemTagLabel;
            if (l == null || l.getText().isEmpty()) return;
            StringSelection stringSelection = new StringSelection(StringUtils.removeHTMLLabel(l.getText()));
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });
        copyDescMenuItem.addActionListener(e -> {
            CustomLabel l = null;
            int si = tabbedPane.getSelectedIndex();
            if (si == TabIndex.PERSONAL) l = collectionItemDescriptionLabel;
            else if (si == TabIndex.NET_PLAYLIST) l = playlistDescriptionLabel;
            else if (si == TabIndex.NET_ALBUM) l = albumDescriptionLabel;
            else if (si == TabIndex.NET_ARTIST) l = artistDescriptionLabel;
            else if (si == TabIndex.NET_RADIO) l = radioDescriptionLabel;
            else if (si == TabIndex.NET_RANKING) l = rankingDescriptionLabel;
            else if (si == TabIndex.NET_USER) l = userDescriptionLabel;
            else if (si == TabIndex.RECOMMEND) l = recommendItemDescriptionLabel;
            if (l.getText().isEmpty()) return;
            StringSelection stringSelection = new StringSelection(StringUtils.removeHTMLLabel(l.getText()));
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });

        playlistListBox.add(playlistDescriptionScrollPane);
        albumListBox.add(albumDescriptionScrollPane);
        artistListBox.add(artistDescriptionScrollPane);
        radioListBox.add(radioDescriptionScrollPane);
        rankingListBox.add(rankingDescriptionScrollPane);
        userListBox.add(userDescriptionScrollPane);
        recommendItemListBox.add(recommendItemDescriptionScrollPane);
        collectionItemListBox.add(collectionItemDescriptionScrollPane);

        // 设置一下列表盒子的最佳大小使其自动填充满
        Dimension d = new Dimension(300, 100);
        playlistListBox.setPreferredSize(d);
        albumListBox.setPreferredSize(d);
        artistListBox.setPreferredSize(d);
        radioListBox.setPreferredSize(d);
        rankingListBox.setPreferredSize(d);
        userListBox.setPreferredSize(d);
        recommendItemListBox.setPreferredSize(d);
        collectionItemListBox.setPreferredSize(d);
    }

    // 初始化在线歌单工具栏
    private void netPlaylistToolBarInit() {
        netPlaylistSearchTextField.addFocusListener(new TextFieldHintListener(netPlaylistSearchTextField, "歌单", currUIStyle.getForeColor()));
        netPlaylistSearchTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                if (netPlaylistSearchTextField.isOccupied()) {
                    netPlaylistClearInputButton.setVisible(true);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if (netPlaylistSearchTextField.getText().equals("")) netPlaylistClearInputButton.setVisible(false);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });
        // 只能输入数字
        netPlaylistPageTextField.setDocument(new SafeDocument(0, Integer.MAX_VALUE));
        // 后退按钮事件
        netPlaylistBackwardButton.addActionListener(e -> {
            int lastComponentIndex = netPlaylistLeftBox.getComponentCount() - 1;
            Component c = netPlaylistLeftBox.getComponent(lastComponentIndex);
            if (c != netPlaylistScrollPane && c != emptyHintPanel) {
                netMusicListForPlaylistModel.clear();
                // 从在线音乐列表切换回歌单列表
                netPlaylistPlayAllButton.setVisible(false);
                netPlaylistLeftBox.remove(playlistListBox);
                netPlaylistLeftBox.add(netPlaylistCountPanel);
                netPlaylistLeftBox.add(netPlaylistScrollPane);
                // 添加回工具栏的搜索
                netPlaylistToolBar.remove(1);
                netPlaylistToolBar.add(netPlaylistSearchTextField);
                netPlaylistToolBar.add(netPlaylistClearInputButton);
                netPlaylistToolBar.add(netPlaylistSearchButton);
                // 添加回工具栏的搜索/标题
                netPlaylistToolBar.removeAll();
                netPlaylistToolBar.add(netPlaylistBackwardButton);
                if (currPlaylistMusicInfo == null && currPlaylistPlaylistInfo == null
                        && currPlaylistCommentInfo == null && currPlaylistUserInfo == null) {
                    // 删除标题标签
                    netPlaylistToolBar.add(netPlaylistSearchTextField);
                    netPlaylistToolBar.add(netPlaylistClearInputButton);
                    netPlaylistToolBar.add(netPlaylistSearchButton);
                    netPlaylistSourceComboBox.setVisible(true);
                } else {
                    netPlaylistToolBar.add(Box.createHorizontalGlue());
                    netPlaylistToolBar.add(netPlaylistTitleLabel);
                    netPlaylistToolBar.add(Box.createHorizontalGlue());
                }
                // 更新歌单歌曲数量显示
//                netCurrPlaylistLabel.setText("");
                netPlaylistCountLabel.setText(String.format(PAGINATION_MSG, netPlaylistCurrPage, netPlaylistMaxPage));
//                netPlaylistBackwardButton.setEnabled(false);
            }
            // 后退到关键词面板
            else {
                // 删除标题标签
                netPlaylistToolBar.removeAll();
                netPlaylistToolBar.add(netPlaylistBackwardButton);
                netPlaylistToolBar.add(netPlaylistSearchTextField);
                netPlaylistToolBar.add(netPlaylistClearInputButton);
                netPlaylistToolBar.add(netPlaylistSearchButton);
                clearRequestForPlaylist();

                netPlaylistListModel.clear();
                netPlaylistCountPanel.setVisible(false);
                netPlaylistLeftBox.remove(emptyHintPanel);
                netPlaylistLeftBox.remove(netPlaylistScrollPane);
                netPlaylistLeftBox.add(netPlaylistKeywordsPanelScrollPane);
                netPlaylistBackwardButton.setEnabled(false);
            }
            // 切换后一定要刷新！
            netPlaylistLeftBox.repaint();
        });
        // 清除输入事件
        netPlaylistClearInputButton.addActionListener(e -> {
            netPlaylistSearchTextField.requestFocus();
            netPlaylistSearchTextField.setText("");
            netPlaylistBackwardButton.requestFocus();
        });
        // 搜索歌单按钮事件
        netPlaylistSearchButton.addActionListener(e -> {
            netPlaylistCurrKeyword = netPlaylistSearchTextField.getText();
            if (!netPlaylistCurrKeyword.equals("")) {
                // 关键词加入搜索历史
                DialogButton b = new DialogButton(netPlaylistCurrKeyword);
                b.addActionListener(event -> {
                    netPlaylistSearchTextField.requestFocus();
                    netPlaylistSearchTextField.setText(b.getText());
                    netPlaylistClearInputButton.setVisible(true);
                    netPlaylistLeftBox.remove(netPlaylistKeywordsPanelScrollPane);
                    netPlaylistLeftBox.add(netPlaylistScrollPane);
                    netPlaylistSearchButton.doClick();
                });
                // 右击删除历史
                b.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.getButton() == MouseEvent.BUTTON3) {
                            netPlaylistHistorySearchInnerPanel2.remove(b);
                            netPlaylistHistorySearchInnerPanel2.repaint();
                            if (netPlaylistHistorySearchInnerPanel2.getComponentCount() == 0) {
                                netPlaylistKeywordsPanel.remove(netPlaylistHistorySearchPanel);
                                netPlaylistKeywordsPanel.repaint();
                            }
                        }
                    }
                });
                b.setToolTipText(REMOVE_HISTORY_KEYWORD_TIP);
                b.setForeColor(currUIStyle.getButtonColor());
                // 先删除重复的关键词
                removeKeywordInHistorySearch(netPlaylistCurrKeyword, HistorySearchType.NET_PLAYLIST);
                netPlaylistHistorySearchInnerPanel2.add(b, 0);
                // 删除超出上限的最后一个关键词
                int c = netPlaylistHistorySearchInnerPanel2.getComponentCount();
                if (c > maxSearchHistoryCount)
                    netPlaylistHistorySearchInnerPanel2.remove(c - 1);
                // 显示 “搜索历史” 面板
                netPlaylistKeywordsPanel.add(netPlaylistHistorySearchPanel);
                // 更新 LAF，防止按钮样式不正确
                SwingUtilities.updateComponentTreeUI(netPlaylistClearHistorySearchButton);
                netPlaylistHistorySearchPanel.repaint();

                loadingAndRun(() -> {
                    try {
                        // 搜索歌单并显示歌单列表
                        CommonResult<NetPlaylistInfo> result = MusicServerUtils.searchPlaylists(
                                netPlaylistSourceComboBox.getSelectedIndex(), netPlaylistCurrKeyword, limit, netPlaylistCurrPage = 1);
                        List<NetPlaylistInfo> netPlaylistInfos = result.data;
                        Integer total = result.total;
                        netPlaylistMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netPlaylistCountLabel.setText(String.format(PAGINATION_MSG, netPlaylistCurrPage, netPlaylistMaxPage));
                        netPlaylistCountPanel.add(netPlaylistCountLabel, netPlaylistCountPanel.getComponentIndex(netPlaylistCountLabel));
                        netPlaylistCountPanel.setVisible(true);
                        netPlaylistSourceComboBox.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netPlaylistList.setModel(emptyListModel);
                        netPlaylistListModel.clear();
                        netPlaylistInfos.forEach(playlistInfo -> {
                            globalExecutor.submit(() -> updateCollection(playlistInfo));
                            // 设置图片加载后重绘的事件
                            playlistInfo.setInvokeLater(() -> {
                                netPlaylistList.repaint();
                                collectionList.repaint();
                            });
                            netPlaylistListModel.addElement(playlistInfo);
                        });
                        netPlaylistList.setModel(netPlaylistListModel);
                        netPlaylistBackwardButton.setEnabled(true);
                        netPlaylistLeftBox.remove(netPlaylistKeywordsPanelScrollPane);
                        if (netPlaylistListModel.isEmpty()) {
                            netPlaylistLeftBox.remove(netPlaylistScrollPane);
                            netPlaylistLeftBox.add(emptyHintPanel);
                        } else {
                            netPlaylistLeftBox.remove(emptyHintPanel);
                            netPlaylistLeftBox.add(netPlaylistScrollPane);
                        }
                        netPlaylistScrollPane.getVerticalScrollBar().setValue(0);
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        });
        // 搜索歌单跳页事件
        Runnable searchPlaylistGoPageAction = () -> {
            loadingAndRun(() -> {
                boolean songRequest = currPlaylistMusicInfo != null, playlistRequest = currPlaylistPlaylistInfo != null,
                        commentRequest = currPlaylistCommentInfo != null, userRequest = currPlaylistUserInfo != null;
                if (songRequest || playlistRequest || commentRequest || userRequest || StringUtils.isNotEmpty(netPlaylistCurrKeyword)) {
                    try {
                        // 搜索歌单并显示歌单列表
                        CommonResult<NetPlaylistInfo> result = songRequest ? MusicServerUtils.getRelatedPlaylists(currPlaylistMusicInfo)
                                : playlistRequest ? MusicServerUtils.getSimilarPlaylists(currPlaylistPlaylistInfo)
                                : commentRequest ? MusicServerUtils.getUserPlaylists(currPlaylistCommentInfo, limit, netPlaylistCurrPage)
                                : userRequest ? MusicServerUtils.getUserPlaylists(currPlaylistUserInfo, limit, netPlaylistCurrPage)
                                : MusicServerUtils.searchPlaylists(netPlaylistSourceComboBox.getSelectedIndex(), netPlaylistCurrKeyword, limit, netPlaylistCurrPage);
                        List<NetPlaylistInfo> netPlaylistInfos = result.data;
                        Integer total = result.total;
                        netPlaylistMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netPlaylistCountLabel.setText(String.format(PAGINATION_MSG, netPlaylistCurrPage, netPlaylistMaxPage));
                        netPlaylistCountPanel.add(netPlaylistCountLabel, netPlaylistCountPanel.getComponentIndex(netPlaylistCountLabel));
                        netPlaylistCountPanel.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netPlaylistList.setModel(emptyListModel);
                        netPlaylistListModel.clear();
                        netPlaylistInfos.forEach(playlistInfo -> {
                            globalExecutor.submit(() -> updateCollection(playlistInfo));
                            // 设置图片加载后重绘的事件
                            playlistInfo.setInvokeLater(() -> {
                                netPlaylistList.repaint();
                                collectionList.repaint();
                            });
                            netPlaylistListModel.addElement(playlistInfo);
                        });
                        netPlaylistList.setModel(netPlaylistListModel);
                        netPlaylistScrollPane.getVerticalScrollBar().setValue(0);
                        if (netPlaylistListModel.isEmpty()) {
                            netPlaylistLeftBox.remove(netPlaylistScrollPane);
                            netPlaylistLeftBox.add(emptyHintPanel);
                        } else {
                            netPlaylistLeftBox.remove(emptyHintPanel);
                            netPlaylistLeftBox.add(netPlaylistScrollPane);
                        }
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                }
            });
        };
        // 搜索歌单内歌曲并显示在在线播放列表
        Runnable searchMusicInPlaylist = () -> {
            if (!netMusicListForPlaylistModel.isEmpty()) {
                loadingAndRun(() -> {
                    try {
                        NetPlaylistInfo playlistInfo = netPlaylistList.getSelectedValue();
                        CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInPlaylist(
                                playlistInfo.getId(), playlistInfo.getSource(), limit, netMusicInPlaylistCurrPage);
                        List<NetMusicInfo> musicInfos = result.data;
                        int total = result.total;
                        netMusicInPlaylistMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netPlaylistCountLabel.setText(String.format(PAGINATION_MSG, netMusicInPlaylistCurrPage, netMusicInPlaylistMaxPage));
                        netPlaylistCountPanel.add(netPlaylistCountLabel, netPlaylistCountPanel.getComponentIndex(netPlaylistCountLabel));
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netMusicList.setModel(emptyListModel);
                        netMusicListForPlaylistModel.clear();
                        musicInfos.forEach(musicInfo -> {
                            globalExecutor.submit(() -> updateCollection(musicInfo));
                            netMusicListForPlaylistModel.addElement(musicInfo);
                        });
                        netMusicList.setModel(netMusicListForPlaylistModel);
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                        if (netMusicListForPlaylistModel.isEmpty()) {
                            playlistListCountBox.remove(netMusicScrollPane);
                            playlistListCountBox.add(emptyHintPanel);
                        } else {
                            playlistListCountBox.remove(emptyHintPanel);
                            playlistListCountBox.add(netMusicScrollPane);
                        }
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        };
        // 播放全部
        netPlaylistPlayAllButton.addActionListener(e -> netPlaylistPlayAllMenuItem.doClick());
        // 刷新按钮事件
        netPlaylistRefreshButton.addActionListener(e -> {
            Component lc = netPlaylistLeftBox.getComponent(netPlaylistLeftBox.getComponentCount() - 1);
            // 当前显示的是歌单列表，刷新歌单
            if (lc == netPlaylistScrollPane || lc == emptyHintPanel) {
                searchPlaylistGoPageAction.run();
            }
            // 当前显示的是某歌单的歌曲，刷新歌曲
            else {
                searchMusicInPlaylist.run();
            }
        });
        // 第一页按钮事件
        netPlaylistStartPageButton.addActionListener(e -> {
            Component lc = netPlaylistLeftBox.getComponent(netPlaylistLeftBox.getComponentCount() - 1);
            // 当前显示的是歌单列表，跳到第一页歌单
            if (lc == netPlaylistScrollPane || lc == emptyHintPanel) {
                if (netPlaylistCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netPlaylistCurrPage = 1;
                searchPlaylistGoPageAction.run();
            }
            // 当前显示的是某歌单的歌曲，跳到第一页歌曲
            else {
                if (netMusicInPlaylistCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInPlaylistCurrPage = 1;
                searchMusicInPlaylist.run();
            }
        });
        // 上一页按钮事件
        netPlaylistLastPageButton.addActionListener(e -> {
            Component lc = netPlaylistLeftBox.getComponent(netPlaylistLeftBox.getComponentCount() - 1);
            // 当前显示的是歌单列表，跳到上一页歌单
            if (lc == netPlaylistScrollPane || lc == emptyHintPanel) {
                if (netPlaylistCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netPlaylistCurrPage--;
                searchPlaylistGoPageAction.run();
            }
            // 当前显示的是某歌单的歌曲，跳到上一页歌曲
            else {
                if (netMusicInPlaylistCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInPlaylistCurrPage--;
                searchMusicInPlaylist.run();
            }
        });
        // 下一页按钮事件
        netPlaylistNextPageButton.addActionListener(e -> {
            Component lc = netPlaylistLeftBox.getComponent(netPlaylistLeftBox.getComponentCount() - 1);
            // 当前显示的是歌单列表，跳到下一页歌单
            if (lc == netPlaylistScrollPane || lc == emptyHintPanel) {
                if (netPlaylistCurrPage == netPlaylistMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netPlaylistCurrPage++;
                searchPlaylistGoPageAction.run();
            }
            // 当前显示的是某歌单的歌曲，跳到下一页歌曲
            else {
                if (netMusicInPlaylistCurrPage == netMusicInPlaylistMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInPlaylistCurrPage++;
                searchMusicInPlaylist.run();
            }
        });
        // 最后一页按钮事件
        netPlaylistEndPageButton.addActionListener(e -> {
            Component lc = netPlaylistLeftBox.getComponent(netPlaylistLeftBox.getComponentCount() - 1);
            // 当前显示的是歌单列表，跳到最后一页歌单
            if (lc == netPlaylistScrollPane || lc == emptyHintPanel) {
                if (netPlaylistCurrPage == netPlaylistMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netPlaylistCurrPage = netPlaylistMaxPage;
                searchPlaylistGoPageAction.run();
            }
            // 当前显示的是某歌单的歌曲，跳到最后一页歌曲
            else {
                if (netMusicInPlaylistCurrPage == netMusicInPlaylistMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInPlaylistCurrPage = netMusicInPlaylistMaxPage;
                searchMusicInPlaylist.run();
            }
        });
        // 跳页按钮事件
        netPlaylistGoButton.addActionListener(e -> {
            Component lc = netPlaylistLeftBox.getComponent(netPlaylistLeftBox.getComponentCount() - 1);
            // 当前显示的是歌单列表，跳页歌单
            if (lc == netPlaylistScrollPane || lc == emptyHintPanel) {
                String text = netPlaylistPageTextField.getText();
                netPlaylistPageTextField.setText("");
                if ("".equals(text)) return;
                int destPage = Integer.parseInt(text);
                if (destPage < 1 || destPage > netPlaylistMaxPage) {
                    new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                    return;
                }
                netPlaylistCurrPage = destPage;
                searchPlaylistGoPageAction.run();
            }
            // 当前显示的是某歌单的歌曲，跳页歌曲
            else {
                String text = netPlaylistPageTextField.getText();
                netPlaylistPageTextField.setText("");
                if ("".equals(text)) return;
                int destPage = Integer.parseInt(text);
                if (destPage < 1 || destPage > netMusicInPlaylistMaxPage) {
                    new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInPlaylistCurrPage = destPage;
                searchMusicInPlaylist.run();
            }
        });
        // 按钮被禁止的图标
        netPlaylistBackwardButton.setEnabled(false);
        // 按钮初始不可见
        netPlaylistClearInputButton.setVisible(false);
        netPlaylistPlayAllButton.setVisible(false);
        // 按钮大小限制
        Dimension dimension = new Dimension(20, 20);
        netPlaylistRefreshButton.setPreferredSize(dimension);
        netPlaylistStartPageButton.setPreferredSize(dimension);
        netPlaylistLastPageButton.setPreferredSize(dimension);
        netPlaylistGoButton.setPreferredSize(dimension);
        netPlaylistNextPageButton.setPreferredSize(dimension);
        netPlaylistEndPageButton.setPreferredSize(dimension);
        // 按钮悬浮与点击效果
        netPlaylistBackwardButton.addMouseListener(new ButtonMouseListener(netPlaylistBackwardButton, THIS));
        netPlaylistClearInputButton.addMouseListener(new ButtonMouseListener(netPlaylistClearInputButton, THIS));
        netPlaylistSearchButton.addMouseListener(new ButtonMouseListener(netPlaylistSearchButton, THIS));
        netPlaylistPlayAllButton.addMouseListener(new ButtonMouseListener(netPlaylistPlayAllButton, THIS));
        netPlaylistRefreshButton.addMouseListener(new ButtonMouseListener(netPlaylistRefreshButton, THIS));
        netPlaylistStartPageButton.addMouseListener(new ButtonMouseListener(netPlaylistStartPageButton, THIS));
        netPlaylistLastPageButton.addMouseListener(new ButtonMouseListener(netPlaylistLastPageButton, THIS));
        netPlaylistGoButton.addMouseListener(new ButtonMouseListener(netPlaylistGoButton, THIS));
        netPlaylistNextPageButton.addMouseListener(new ButtonMouseListener(netPlaylistNextPageButton, THIS));
        netPlaylistEndPageButton.addMouseListener(new ButtonMouseListener(netPlaylistEndPageButton, THIS));
        // 帮助提示
        netPlaylistBackwardButton.setToolTipText(BACKWARD_TIP);
        netPlaylistClearInputButton.setToolTipText(CLEAR_INPUT_TIP);
        netPlaylistSearchButton.setToolTipText(SEARCH_TIP);
        netPlaylistPlayAllButton.setToolTipText(PLAY_ALL_TIP);
        netPlaylistRefreshButton.setToolTipText(REFRESH_TIP);
        netPlaylistStartPageButton.setToolTipText(START_PAGE_TIP);
        netPlaylistLastPageButton.setToolTipText(LAST_PAGE_TIP);
        netPlaylistGoButton.setToolTipText(GO_TIP);
        netPlaylistNextPageButton.setToolTipText(NEXT_PAGE_TIP);
        netPlaylistEndPageButton.setToolTipText(END_PAGE_TIP);

        netPlaylistToolBar.add(netPlaylistBackwardButton);
        netPlaylistToolBar.add(netPlaylistSearchTextField);
        netPlaylistToolBar.add(netPlaylistClearInputButton);
        netPlaylistToolBar.add(netPlaylistSearchButton);
        netPlaylistLeftBox.add(netPlaylistToolBar);

        for (String name : NetMusicSource.names) netPlaylistSourceComboBox.addItem(name);
        netPlaylistSourceComboBox.addItemListener(e -> {
            // 避免事件被处理 2 次！
            if (e.getStateChange() != ItemEvent.SELECTED) return;
            netPlaylistCurrKeyword = netPlaylistSearchTextField.getText();
            netPlaylistCurrPage = 1;
            netPlaylistRefreshButton.doClick();
        });

        // 歌单数量和当前歌曲标签
        netPlaylistCountPanel.add(netPlaylistSourceComboBox);
        netPlaylistCountPanel.add(netPlaylistPlayAllButton);
        netPlaylistCountPanel.add(netPlaylistStartPageButton);
        netPlaylistCountPanel.add(netPlaylistLastPageButton);
        netPlaylistCountPanel.add(netPlaylistCountLabel);
        netPlaylistCountPanel.add(netPlaylistNextPageButton);
        netPlaylistCountPanel.add(netPlaylistEndPageButton);
        netPlaylistCountPanel.add(netPlaylistRefreshButton);
        netPlaylistCountPanel.add(netPlaylistPageTextField);
        netPlaylistCountPanel.add(netPlaylistGoButton);
        netPlaylistCountPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netPlaylistCountPanel.setVisible(false);
        netPlaylistLeftBox.add(netPlaylistCountPanel);
    }

    // 初始化在线歌单
    private void netPlaylistListInit() {
        netPlaylistList.setModel(netPlaylistListModel);
        netPlaylistList.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int index = netPlaylistList.locationToIndex(e.getPoint());
                Rectangle bounds = netPlaylistList.getCellBounds(index, index);
                if (bounds == null) return;
                setHoverIndex(bounds.contains(e.getPoint()) ? index : -1);
            }

            private void setHoverIndex(int index) {
                TranslucentNetPlaylistListRenderer renderer = (TranslucentNetPlaylistListRenderer) netPlaylistList.getCellRenderer();
                if (renderer == null) return;
                int hoverIndex = renderer.getHoverIndex();
                if (hoverIndex == index) return;
                renderer.setHoverIndex(index);
                netPlaylistList.repaint();
            }
        });
        netPlaylistList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                TranslucentNetPlaylistListRenderer renderer = (TranslucentNetPlaylistListRenderer) netPlaylistList.getCellRenderer();
                if (renderer == null) return;
                renderer.setHoverIndex(-1);
                netPlaylistList.repaint();
            }
        });
        // 打开歌单事件
        Runnable openPlaylistAction = () -> {
            List<Future<?>> taskList = new LinkedList<>();
            loadingAndRun(() -> {
                NetPlaylistInfo playlistInfo = netPlaylistList.getSelectedValue();
                // 加载封面图片和描述
                taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                    BufferedImage coverImg = ImageUtils.borderShadow(ImageUtils.dye(loadingImage, currUIStyle.getLabelColor()));
                    playlistCoverAndNameLabel.setIcon(new ImageIcon(coverImg));
                    playlistCoverAndNameLabel.setText(LOADING_MSG);
                    playlistTagLabel.setText(LOADING_MSG);
                    playlistDescriptionLabel.setText(LOADING_MSG);
                    GlobalExecutors.imageExecutor.execute(() -> {
                        try {
                            MusicServerUtils.fillPlaylistInfo(playlistInfo);
                            playlistCoverAndNameLabel.setText(StringUtils.textToHtml(playlistInfo.getName()));
                            if (playlistInfo.getTag() != null)
                                playlistTagLabel.setText(StringUtils.textToHtml("".equals(playlistInfo.getTag()) ? "" : "标签：" + playlistInfo.getTag()));
                            if (playlistInfo.getDescription() != null)
                                playlistDescriptionLabel.setText(StringUtils.textToHtml(playlistInfo.getDescription()));
                            if (playlistInfo.hasCoverImg()) {
                                playlistCoverAndNameLabel.setIcon(new ImageIcon(
                                        ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(playlistInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                ));
                            } else {
                                playlistInfo.setInvokeLater(() -> {
                                    playlistCoverAndNameLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(playlistInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                    netPlaylistList.repaint();
                                });
                            }
                        } catch (HttpException e) {
                            playlistCoverAndNameLabel.setText(LOAD_FAILED);
                            playlistTagLabel.setText(LOAD_FAILED);
                            playlistDescriptionLabel.setText(LOAD_FAILED);
                        }
                    });
                }));


                taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                    try {
                        // 得到歌单的音乐信息
                        CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInPlaylist(
                                playlistInfo.getId(), playlistInfo.getSource(), limit, netMusicInPlaylistCurrPage = 1);
                        List<NetMusicInfo> musicInfos = result.data;
                        int total = result.total;
                        netMusicInPlaylistMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新歌单歌曲数量显示
//                            netCurrPlaylistLabel.setText(StringUtils.textToHtml(playlistInfo.getName()));
                        netPlaylistCountLabel.setText(String.format(PAGINATION_MSG, netMusicInPlaylistCurrPage, netMusicInPlaylistMaxPage));
                        playlistListCountBox.add(netPlaylistCountPanel);
                        playlistListBox.add(playlistListCountBox);
                        // 歌单列表切换到在线音乐列表
                        netMusicList.setModel(netMusicListForPlaylistModel);
                        netPlaylistLeftBox.remove(netPlaylistScrollPane);
                        netPlaylistLeftBox.add(playlistListBox);
                        // 删除工具栏的搜索
                        netPlaylistToolBar.remove(netPlaylistSearchTextField);
                        netPlaylistToolBar.remove(netPlaylistClearInputButton);
                        netPlaylistToolBar.remove(netPlaylistSearchButton);
                        netPlaylistToolBar.remove(netPlaylistTitleLabel);
                        netPlaylistToolBar.add(Box.createHorizontalGlue());
                        // 添加数据建议弄到更新数量显示之后，不然可能会不显示！
                        netMusicList.setModel(emptyListModel);
                        netMusicListForPlaylistModel.clear();
                        musicInfos.forEach(musicInfo -> {
                            globalExecutor.submit(() -> updateCollection(musicInfo));
                            netMusicListForPlaylistModel.addElement(musicInfo);
                        });
                        netMusicList.setModel(netMusicListForPlaylistModel);
                        playlistDescriptionScrollPane.getVerticalScrollBar().setValue(0);
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                        netPlaylistBackwardButton.setEnabled(true);
                        netPlaylistSourceComboBox.setVisible(false);
                        netPlaylistPlayAllButton.setVisible(true);
                        if (netMusicListForPlaylistModel.isEmpty()) {
                            playlistListCountBox.remove(netMusicScrollPane);
                            playlistListCountBox.add(emptyHintPanel);
                        } else {
                            playlistListCountBox.remove(emptyHintPanel);
                            playlistListCountBox.add(netMusicScrollPane);
                        }
                        // 切换后一定要刷新！
                        netPlaylistLeftBox.repaint();
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                }));

                taskList.forEach(task -> {
                    try {
                        task.get();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    } catch (ExecutionException e) {
                        e.printStackTrace();
                    }
                });
            });
        };
        netPlaylistList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    openPlaylistAction.run();
                }
            }
        });
        netPlaylistList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                // 鼠标左键双击打开歌单
                if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    openPlaylistAction.run();
                }
                // 右键弹出菜单
                else if (e.getButton() == MouseEvent.BUTTON3) {
                    if (netPlaylistList.getModel().getSize() != 0) {
                        // 得到鼠标光标所在的选项并选中
                        int index = netPlaylistList.locationToIndex(e.getPoint());
                        if (index == -1) return;
                        if (!netPlaylistList.isSelectedIndex(index)) netPlaylistList.setSelectedIndex(index);
                        if (hasBeenCollected(netPlaylistList.getSelectedValue())) {
                            netPlaylistCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                            netPlaylistCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);
                        } else {
                            netPlaylistCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, currUIStyle.getButtonColor()));
                            netPlaylistCollectMenuItem.setText(COLLECT_MENU_ITEM_TEXT);
                        }

                        netPlaylistPopupMenu.show(netPlaylistList, e.getX(), e.getY());
                    }
                }
            }
        });
        // 打开歌单
        netPlaylistOpenMenuItem.addActionListener(e -> {
            int index = tabbedPane.getSelectedIndex();
            if (index == TabIndex.NET_PLAYLIST) openPlaylistAction.run();
            else if (index == TabIndex.PERSONAL) openCollectionItemAction.run();
            else openRecommendItemAction.run();
        });
        // 播放全部
        netPlaylistPlayAllMenuItem.addActionListener(e -> {
            NetPlaylistInfo netPlaylistInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_PLAYLIST) netPlaylistInfo = netPlaylistList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netPlaylistInfo = (NetPlaylistInfo) collectionList.getSelectedValue();
            else netPlaylistInfo = (NetPlaylistInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInPlaylist(
                        netPlaylistInfo.getId(), netPlaylistInfo.getSource(), netPlaylistInfo.hasTrackCount() ? netPlaylistInfo.getTrackCount() : 10000, 1);
                List<NetMusicInfo> musicInfos = result.data;
                if (musicInfos.isEmpty()) {
                    new TipDialog(THIS, NO_MUSIC_MSG).showDialog();
                    return;
                }
                playQueue.setModel(emptyListModel);
                playQueueModel.clear();
                musicInfos.forEach(musicInfo -> {
                    globalExecutor.submit(() -> updateCollection(musicInfo));
                    playQueueModel.addElement(musicInfo);
                });
                playQueue.setModel(playQueueModel);
                playQueue.setSelectedIndex(0);
                playExecutor.submit(() -> playSelected(playQueue, true));
            });
        });
        // 收藏歌单
        netPlaylistCollectMenuItem.addActionListener(e -> {
            int index = tabbedPane.getSelectedIndex();
            CustomList list;
            if (index == TabIndex.NET_PLAYLIST) list = netPlaylistList;
            else if (index == TabIndex.PERSONAL) list = collectionList;
            else list = itemRecommendList;
            ListModel model = collectionList.getModel();
            boolean needRefresh = model == playlistCollectionModel;
            if (netPlaylistCollectMenuItem.getText().equals(COLLECT_MENU_ITEM_TEXT)) {
                List values = list.getSelectedValuesList();
                if (needRefresh) collectionList.setModel(emptyListModel);
                for (int i = values.size() - 1; i >= 0; i--) {
                    Object o = values.get(i);
                    if (hasBeenCollected(o)) continue;
                    playlistCollectionModel.add(0, o);
                }
                if (needRefresh) collectionList.setModel(model);
                new TipDialog(THIS, COLLECT_SUCCESS_MSG).showDialog();
            } else {
                List values = list.getSelectedValuesList();
                if (needRefresh) collectionList.setModel(emptyListModel);
                values.forEach(o -> {
                    if (list == collectionList || hasBeenCollected(o)) {
                        playlistCollectionModel.removeElement(o);
                    }
                });
                if (needRefresh) collectionList.setModel(model);
                new TipDialog(THIS, CANCEL_COLLECTION_SUCCESS_MSG).showDialog();
            }
        });
        // 查看评论
        netPlaylistCommentMenuItem.addActionListener(e -> {
            NetPlaylistInfo netPlaylistInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_PLAYLIST) netPlaylistInfo = netPlaylistList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netPlaylistInfo = (NetPlaylistInfo) collectionList.getSelectedValue();
            else netPlaylistInfo = (NetPlaylistInfo) itemRecommendList.getSelectedValue();
            getComments(netPlaylistInfo, true);
        });
        // 查看相似歌单
        netPlaylistSimilarPlaylistMenuItem.addActionListener(e -> {
            NetPlaylistInfo netPlaylistInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_PLAYLIST) netPlaylistInfo = netPlaylistList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netPlaylistInfo = (NetPlaylistInfo) collectionList.getSelectedValue();
            else netPlaylistInfo = (NetPlaylistInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForPlaylist();
                    // 搜索相似歌单
                    CommonResult<NetPlaylistInfo> result = MusicServerUtils.getSimilarPlaylists(currPlaylistPlaylistInfo = netPlaylistInfo);
                    List<NetPlaylistInfo> netPlaylistInfos = result.data;
                    netPlaylistCurrPage = netPlaylistMaxPage = 1;
                    // 标题
                    netPlaylistTitleLabel.setText(netPlaylistInfo.getName() + " 的相似歌单");
                    netPlaylistToolBar.removeAll();
                    netPlaylistToolBar.add(netPlaylistBackwardButton);
                    netPlaylistToolBar.add(Box.createHorizontalGlue());
                    netPlaylistToolBar.add(netPlaylistTitleLabel);
                    netPlaylistToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netPlaylistCountLabel.setText(String.format(PAGINATION_MSG, netPlaylistCurrPage, netPlaylistMaxPage));
                    netPlaylistCountPanel.add(netPlaylistCountLabel, netPlaylistCountPanel.getComponentIndex(netPlaylistCountLabel));
                    netPlaylistLeftBox.add(netPlaylistCountPanel);
                    netPlaylistSourceComboBox.setVisible(false);
                    netPlaylistPlayAllButton.setVisible(false);
                    netPlaylistCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netPlaylistList.setModel(emptyListModel);
                    netPlaylistListModel.clear();
                    netPlaylistInfos.forEach(playlistInfo -> {
                        globalExecutor.submit(() -> updateCollection(playlistInfo));
                        // 设置图片加载后重绘的事件
                        playlistInfo.setInvokeLater(() -> {
                            netPlaylistList.repaint();
                            collectionList.repaint();
                        });
                        netPlaylistListModel.addElement(playlistInfo);
                    });
                    netPlaylistList.setModel(netPlaylistListModel);
                    netPlaylistBackwardButton.setEnabled(true);
                    netPlaylistLeftBox.remove(netPlaylistKeywordsPanelScrollPane);
                    if (netPlaylistListModel.isEmpty()) {
                        netPlaylistLeftBox.remove(netPlaylistScrollPane);
                        netPlaylistLeftBox.add(emptyHintPanel);
                    } else {
                        netPlaylistLeftBox.remove(emptyHintPanel);
                        netPlaylistLeftBox.add(netPlaylistScrollPane);
                    }
                    netPlaylistScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_PLAYLIST);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看创建者
        netPlaylistCreatorMenuItem.addActionListener(e -> {
            NetPlaylistInfo netPlaylistInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_PLAYLIST) netPlaylistInfo = netPlaylistList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netPlaylistInfo = (NetPlaylistInfo) collectionList.getSelectedValue();
            else netPlaylistInfo = (NetPlaylistInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForUser();
                    // 获取歌单创建者
                    currUserPlaylistInfo = netPlaylistInfo;
                    CommonResult<NetUserInfo> result = MusicServerUtils.getUserInfo(netPlaylistInfo.getCreatorId(), netPlaylistInfo.getSource());
                    List<NetUserInfo> netUserInfos = result.data;
                    netUserCurrPage = netUserMaxPage = 1;
                    // 标题
                    netUserTitleLabel.setText(netPlaylistInfo.getName() + " 的创建者");
                    netUserToolBar.removeAll();
                    netUserToolBar.add(netUserBackwardButton);
                    netUserToolBar.add(Box.createHorizontalGlue());
                    netUserToolBar.add(netUserTitleLabel);
                    netUserToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netUserCountLabel.setText(String.format(PAGINATION_MSG, netUserCurrPage, netUserMaxPage));
                    netUserCountPanel.add(netUserCountLabel, netUserCountPanel.getComponentIndex(netUserCountLabel));
                    netUserLeftBox.add(netUserCountPanel);
                    netUserSourceComboBox.setVisible(false);
                    netUserPlayAllButton.setVisible(false);
                    netUserRecordTypeComboBox.setVisible(false);
                    netUserCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netUserList.setModel(emptyListModel);
                    netUserListModel.clear();
                    netUserInfos.forEach(userInfo -> {
                        globalExecutor.submit(() -> updateCollection(userInfo));
                        // 设置图片加载后重绘的事件
                        userInfo.setInvokeLater(() -> {
                            updateRenderer(netUserList);
                            updateRenderer(collectionList);
                            netUserList.repaint();
                            collectionList.repaint();
                        });
                        netUserListModel.addElement(userInfo);
                    });
                    netUserList.setModel(netUserListModel);
                    netUserBackwardButton.setEnabled(true);
                    netUserLeftBox.remove(netUserKeywordsPanelScrollPane);
                    if (netUserListModel.isEmpty()) {
                        netUserLeftBox.remove(netUserScrollPane);
                        netUserLeftBox.add(emptyHintPanel);
                    } else {
                        netUserLeftBox.remove(emptyHintPanel);
                        netUserLeftBox.add(netUserScrollPane);
                    }
                    netUserScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_USER);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看收藏者
        netPlaylistSubscriberMenuItem.addActionListener(e -> {
            NetPlaylistInfo netPlaylistInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_PLAYLIST) netPlaylistInfo = netPlaylistList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netPlaylistInfo = (NetPlaylistInfo) collectionList.getSelectedValue();
            else netPlaylistInfo = (NetPlaylistInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForUser();
                    // 获取歌单收藏者
                    CommonResult<NetUserInfo> result = MusicServerUtils.getPlaylistSubscribers(currSubscriberPlaylistInfo = netPlaylistInfo, limit, netUserCurrPage = 1);
                    List<NetUserInfo> netUserInfos = result.data;
                    Integer total = result.total;
                    netUserMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netUserTitleLabel.setText(netPlaylistInfo.getName() + " 的收藏者");
                    netUserToolBar.removeAll();
                    netUserToolBar.add(netUserBackwardButton);
                    netUserToolBar.add(Box.createHorizontalGlue());
                    netUserToolBar.add(netUserTitleLabel);
                    netUserToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netUserCountLabel.setText(String.format(PAGINATION_MSG, netUserCurrPage, netUserMaxPage));
                    netUserCountPanel.add(netUserCountLabel, netUserCountPanel.getComponentIndex(netUserCountLabel));
                    netUserLeftBox.add(netUserCountPanel);
                    netUserSourceComboBox.setVisible(false);
                    netUserPlayAllButton.setVisible(false);
                    netUserRecordTypeComboBox.setVisible(false);
                    netUserCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netUserList.setModel(emptyListModel);
                    netUserListModel.clear();
                    netUserInfos.forEach(userInfo -> {
                        globalExecutor.submit(() -> updateCollection(userInfo));
                        // 设置图片加载后重绘的事件
                        userInfo.setInvokeLater(() -> {
                            updateRenderer(netUserList);
                            updateRenderer(collectionList);
                            netUserList.repaint();
                            collectionList.repaint();
                        });
                        netUserListModel.addElement(userInfo);
                    });
                    netUserList.setModel(netUserListModel);
                    netUserBackwardButton.setEnabled(true);
                    netUserLeftBox.remove(netUserKeywordsPanelScrollPane);
                    if (netUserListModel.isEmpty()) {
                        netUserLeftBox.remove(netUserScrollPane);
                        netUserLeftBox.add(emptyHintPanel);
                    } else {
                        netUserLeftBox.remove(emptyHintPanel);
                        netUserLeftBox.add(netUserScrollPane);
                    }
                    netUserScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_USER);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 复制名称
        netPlaylistCopyNameMenuItem.addActionListener(e -> {
            Object o;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_PLAYLIST) o = netPlaylistList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL) o = collectionList.getSelectedValue();
            else o = itemRecommendList.getSelectedValue();
            StringSelection stringSelection = new StringSelection(((NetPlaylistInfo) o).toSimpleString());
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });
        // 歌单列表右键菜单项
        netPlaylistPopupMenu.add(netPlaylistOpenMenuItem);
        netPlaylistPopupMenu.add(netPlaylistPlayAllMenuItem);
        netPlaylistPopupMenu.add(netPlaylistCollectMenuItem);
        netPlaylistPopupMenu.add(netPlaylistCommentMenuItem);
        netPlaylistPopupMenu.add(netPlaylistSimilarPlaylistMenuItem);
        netPlaylistPopupMenu.add(netPlaylistCreatorMenuItem);
        netPlaylistPopupMenu.add(netPlaylistSubscriberMenuItem);
        netPlaylistPopupMenu.add(netPlaylistCopyNameMenuItem);

        // 搜索历史面板
        // 清空搜索历史按钮
        netPlaylistClearHistorySearchButton.addActionListener(e -> {
            netPlaylistHistorySearchInnerPanel2.removeAll();
            netPlaylistKeywordsPanel.remove(netPlaylistHistorySearchPanel);
            netPlaylistKeywordsPanel.repaint();
        });
        netPlaylistClearHistorySearchButton.setPreferredSize(new Dimension(20, 20));
        netPlaylistClearHistorySearchButton.setToolTipText(CLEAR_HISTORY_SEARCH_TIP);
        netPlaylistClearHistorySearchButton.addMouseListener(new ButtonMouseListener(netPlaylistClearHistorySearchButton, THIS));

        netPlaylistHistorySearchInnerPanel1.add(netPlaylistHistorySearchLabel);
        netPlaylistHistorySearchInnerPanel1.add(netPlaylistClearHistorySearchButton);
        netPlaylistHistorySearchInnerPanel1.setLayout(new FlowLayout(FlowLayout.LEFT));
        netPlaylistHistorySearchInnerPanel1.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        netPlaylistHistorySearchInnerPanel1.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netPlaylistHistorySearchInnerPanel2.setLayout(new FlowLayout(FlowLayout.LEFT));
        netPlaylistHistorySearchInnerPanel2.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        netPlaylistHistorySearchPanel.setLayout(new BoxLayout(netPlaylistHistorySearchPanel, BoxLayout.Y_AXIS));
        netPlaylistHistorySearchPanel.add(netPlaylistHistorySearchInnerPanel1);
        netPlaylistHistorySearchPanel.add(netPlaylistHistorySearchInnerPanel2);
        // 关键词面板
        netPlaylistKeywordsPanel.setLayout(new BoxLayout(netPlaylistKeywordsPanel, BoxLayout.Y_AXIS));
//        // 滚动条监听器
//        netPlaylistKeywordsPanelScrollPane.addMouseListener(new ScrollPaneListener(netPlaylistKeywordsPanelScrollPane, THIS));

        // 同时限制面板与滚动条的大小才能保证按钮不超出窗口！！！
        Dimension d = new Dimension(900, 500);
        netPlaylistKeywordsPanel.setPreferredSize(d);
        netPlaylistKeywordsPanelScrollPane.setPreferredSize(d);

        // 在线歌单最佳大小
        netPlaylistScrollPane.setPreferredSize(new Dimension(200, 600));
        netPlaylistLeftBox.add(netPlaylistScrollPane);
    }

    // 初始化在线专辑工具栏
    private void netAlbumToolBarInit() {
        netAlbumSearchTextField.addFocusListener(new TextFieldHintListener(netAlbumSearchTextField, "专辑", currUIStyle.getForeColor()));
        netAlbumSearchTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                if (netAlbumSearchTextField.isOccupied()) {
                    netAlbumClearInputButton.setVisible(true);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if (netAlbumSearchTextField.getText().equals("")) netAlbumClearInputButton.setVisible(false);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });
        // 只能输入数字
        netAlbumPageTextField.setDocument(new SafeDocument(0, Integer.MAX_VALUE));
        // 后退按钮事件
        netAlbumBackwardButton.addActionListener(e -> {
            int lastComponentIndex = netAlbumLeftBox.getComponentCount() - 1;
            Component c = netAlbumLeftBox.getComponent(lastComponentIndex);
            if (c != netAlbumScrollPane && c != emptyHintPanel) {
                netMusicListForAlbumModel.clear();
                // 从在线音乐列表切换回专辑列表
                netAlbumPlayAllButton.setVisible(false);
                netAlbumLeftBox.remove(albumListBox);
                netAlbumLeftBox.add(netAlbumCountPanel);
                netAlbumLeftBox.add(netAlbumScrollPane);
                // 添加回工具栏的搜索/标题
                netAlbumToolBar.removeAll();
                netAlbumToolBar.add(netAlbumBackwardButton);
                if (currAlbumArtistInfo == null
                        && currAlbumMusicInfo == null
                        && currAlbumAlbumInfo == null
                        && currAlbumUserInfo == null
                        && currAlbumCommentInfo == null) {
                    // 删除标题标签
                    netAlbumToolBar.add(netAlbumSearchTextField);
                    netAlbumToolBar.add(netAlbumClearInputButton);
                    netAlbumToolBar.add(netAlbumSearchButton);
                    netAlbumSourceComboBox.setVisible(true);
                } else {
                    netAlbumToolBar.add(Box.createHorizontalGlue());
                    netAlbumToolBar.add(netAlbumTitleLabel);
                    netAlbumToolBar.add(Box.createHorizontalGlue());
                }
                // 更新专辑歌曲数量显示
//                netCurrAlbumLabel.setText("");
                netAlbumCountLabel.setText(String.format(PAGINATION_MSG, netAlbumCurrPage, netAlbumMaxPage));
//                netAlbumBackwardButton.setEnabled(false);
            }
            // 后退到关键词面板
            else {
                // 删除标题标签
                netAlbumToolBar.removeAll();
                netAlbumToolBar.add(netAlbumBackwardButton);
                netAlbumToolBar.add(netAlbumSearchTextField);
                netAlbumToolBar.add(netAlbumClearInputButton);
                netAlbumToolBar.add(netAlbumSearchButton);
                clearRequestForAlbum();

                netAlbumListModel.clear();
                netAlbumCountPanel.setVisible(false);
                netAlbumLeftBox.remove(emptyHintPanel);
                netAlbumLeftBox.remove(netAlbumScrollPane);
                netAlbumLeftBox.add(netAlbumKeywordsPanelScrollPane);
                netAlbumBackwardButton.setEnabled(false);
            }
            // 切换后一定要刷新！
            netAlbumLeftBox.repaint();
        });
        // 清除输入事件
        netAlbumClearInputButton.addActionListener(e -> {
            netAlbumSearchTextField.requestFocus();
            netAlbumSearchTextField.setText("");
            netAlbumBackwardButton.requestFocus();
        });
        // 搜索专辑按钮事件
        netAlbumSearchButton.addActionListener(e -> {
            netAlbumCurrKeyword = netAlbumSearchTextField.getText();
            if (!netAlbumCurrKeyword.equals("")) {
                // 关键词加入搜索历史
                DialogButton b = new DialogButton(netAlbumCurrKeyword);
                b.addActionListener(event -> {
                    netAlbumSearchTextField.requestFocus();
                    netAlbumSearchTextField.setText(b.getText());
                    netAlbumClearInputButton.setVisible(true);
                    netAlbumLeftBox.remove(netAlbumKeywordsPanelScrollPane);
                    netAlbumLeftBox.add(netAlbumScrollPane);
                    netAlbumSearchButton.doClick();
                });
                // 右击删除历史
                b.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.getButton() == MouseEvent.BUTTON3) {
                            netAlbumHistorySearchInnerPanel2.remove(b);
                            netAlbumHistorySearchInnerPanel2.repaint();
                            if (netAlbumHistorySearchInnerPanel2.getComponentCount() == 0) {
                                netAlbumKeywordsPanel.remove(netAlbumHistorySearchPanel);
                                netAlbumKeywordsPanel.repaint();
                            }
                        }
                    }
                });
                b.setToolTipText(REMOVE_HISTORY_KEYWORD_TIP);
                b.setForeColor(currUIStyle.getButtonColor());
                // 先删除重复的关键词
                removeKeywordInHistorySearch(netAlbumCurrKeyword, HistorySearchType.NET_ALBUM);
                netAlbumHistorySearchInnerPanel2.add(b, 0);
                // 删除超出上限的最后一个关键词
                int c = netAlbumHistorySearchInnerPanel2.getComponentCount();
                if (c > maxSearchHistoryCount)
                    netAlbumHistorySearchInnerPanel2.remove(c - 1);
                // 显示 “搜索历史” 面板
                netAlbumKeywordsPanel.add(netAlbumHistorySearchPanel);
                // 更新 LAF，防止按钮样式不正确
                SwingUtilities.updateComponentTreeUI(netAlbumClearHistorySearchButton);
                netAlbumHistorySearchPanel.repaint();

                loadingAndRun(() -> {
                    try {
                        // 搜索专辑并显示专辑列表
                        CommonResult<NetAlbumInfo> result = MusicServerUtils.searchAlbums(
                                netAlbumSourceComboBox.getSelectedIndex(), netAlbumCurrKeyword, limit, netAlbumCurrPage = 1);
                        List<NetAlbumInfo> netAlbumInfos = result.data;
                        Integer total = result.total;
                        netAlbumMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netAlbumCountLabel.setText(String.format(PAGINATION_MSG, netAlbumCurrPage, netAlbumMaxPage));
                        netAlbumCountPanel.add(netAlbumCountLabel, netAlbumCountPanel.getComponentIndex(netAlbumCountLabel));
                        netAlbumCountPanel.setVisible(true);
                        netAlbumSourceComboBox.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netAlbumList.setModel(emptyListModel);
                        netAlbumListModel.clear();
                        netAlbumInfos.forEach(albumInfo -> {
                            globalExecutor.submit(() -> updateCollection(albumInfo));
                            // 设置图片加载后重绘的事件
                            albumInfo.setInvokeLater(() -> {
                                updateRenderer(netAlbumList);
                                updateRenderer(collectionList);
                                netAlbumList.repaint();
                                collectionList.repaint();
                            });
                            netAlbumListModel.addElement(albumInfo);
                        });
                        netAlbumList.setModel(netAlbumListModel);
                        netAlbumBackwardButton.setEnabled(true);
                        netAlbumLeftBox.remove(netAlbumKeywordsPanelScrollPane);
                        if (netAlbumListModel.isEmpty()) {
                            netAlbumLeftBox.remove(netAlbumScrollPane);
                            netAlbumLeftBox.add(emptyHintPanel);
                        } else {
                            netAlbumLeftBox.remove(emptyHintPanel);
                            netAlbumLeftBox.add(netAlbumScrollPane);
                        }
                        netAlbumScrollPane.getVerticalScrollBar().setValue(0);
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        jsonException.printStackTrace();
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        });
        // 搜索专辑跳页事件
        Runnable searchAlbumGoPageAction = () -> {
            boolean songRequest = currAlbumMusicInfo != null, artistRequest = currAlbumArtistInfo != null, albumRequest = currAlbumAlbumInfo != null,
                    userRequest = currAlbumUserInfo != null, commentRequest = currAlbumCommentInfo != null;
            if (artistRequest || albumRequest || userRequest || commentRequest || songRequest || StringUtils.isNotEmpty(netAlbumCurrKeyword)) {
                loadingAndRun(() -> {
                    try {
                        // 搜索专辑并显示专辑列表
                        CommonResult<NetAlbumInfo> result = artistRequest ? MusicServerUtils.getAlbumInfoInArtist(currAlbumArtistInfo, limit, netAlbumCurrPage)
                                : albumRequest ? MusicServerUtils.getSimilarAlbums(currAlbumAlbumInfo)
                                : userRequest ? MusicServerUtils.getUserAlbums(currAlbumUserInfo, limit, netAlbumCurrPage)
                                : commentRequest ? MusicServerUtils.getUserAlbums(currAlbumCommentInfo, limit, netAlbumCurrPage)
                                : songRequest ? MusicServerUtils.getAlbumInfo(currAlbumMusicInfo.getAlbumId(), currAlbumMusicInfo.getSource())
                                : MusicServerUtils.searchAlbums(netAlbumSourceComboBox.getSelectedIndex(), netAlbumCurrKeyword, limit, netAlbumCurrPage);
                        List<NetAlbumInfo> netAlbumInfos = result.data;
                        Integer total = result.total;
                        netAlbumMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netAlbumCountLabel.setText(String.format(PAGINATION_MSG, netAlbumCurrPage, netAlbumMaxPage));
                        netAlbumCountPanel.add(netAlbumCountLabel, netAlbumCountPanel.getComponentIndex(netAlbumCountLabel));
                        netAlbumCountPanel.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netAlbumList.setModel(emptyListModel);
                        netAlbumListModel.clear();
                        netAlbumInfos.forEach(albumInfo -> {
                            globalExecutor.submit(() -> updateCollection(albumInfo));
                            // 设置图片加载后重绘的事件
                            albumInfo.setInvokeLater(() -> {
                                updateRenderer(netAlbumList);
                                updateRenderer(collectionList);
                                netAlbumList.repaint();
                                collectionList.repaint();
                            });
                            netAlbumListModel.addElement(albumInfo);
                        });
                        netAlbumList.setModel(netAlbumListModel);
                        netAlbumScrollPane.getVerticalScrollBar().setValue(0);
                        if (netAlbumListModel.isEmpty()) {
                            netAlbumLeftBox.remove(netAlbumScrollPane);
                            netAlbumLeftBox.add(emptyHintPanel);
                        } else {
                            netAlbumLeftBox.remove(emptyHintPanel);
                            netAlbumLeftBox.add(netAlbumScrollPane);
                        }
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        jsonException.printStackTrace();
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        };
        // 搜索专辑内歌曲并显示在在线播放列表
        Runnable searchMusicInAlbum = () -> {
            if (!netMusicListForAlbumModel.isEmpty()) {
                loadingAndRun(() -> {
                    try {
                        NetAlbumInfo albumInfo = netAlbumList.getSelectedValue();
                        CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInAlbum(
                                albumInfo.getId(), albumInfo.getSource(), limit, netMusicInAlbumCurrPage);
                        List<NetMusicInfo> musicInfos = result.data;
                        Integer total = result.total;
                        netMusicInAlbumMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netAlbumCountLabel.setText(String.format(PAGINATION_MSG, netMusicInAlbumCurrPage, netMusicInAlbumMaxPage));
                        netAlbumCountPanel.add(netAlbumCountLabel, netAlbumCountPanel.getComponentIndex(netAlbumCountLabel));
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netMusicList.setModel(emptyListModel);
                        netMusicListForAlbumModel.clear();
                        musicInfos.forEach(musicInfo -> {
                            globalExecutor.submit(() -> updateCollection(musicInfo));
                            netMusicListForAlbumModel.addElement(musicInfo);
                        });
                        netMusicList.setModel(netMusicListForAlbumModel);
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                        if (netMusicListForAlbumModel.isEmpty()) {
                            albumListCountBox.remove(netMusicScrollPane);
                            albumListCountBox.add(emptyHintPanel);
                        } else {
                            albumListCountBox.remove(emptyHintPanel);
                            albumListCountBox.add(netMusicScrollPane);
                        }
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        };
        // 播放全部
        netAlbumPlayAllButton.addActionListener(e -> netAlbumPlayAllMenuItem.doClick());
        // 刷新按钮事件
        netAlbumRefreshButton.addActionListener(e -> {
            Component lc = netAlbumLeftBox.getComponent(netAlbumLeftBox.getComponentCount() - 1);
            // 当前显示的是专辑列表，刷新专辑
            if (lc == netAlbumScrollPane || lc == emptyHintPanel) {
                searchAlbumGoPageAction.run();
            }
            // 当前显示的是某专辑的歌曲，刷新歌曲
            else {
                searchMusicInAlbum.run();
            }
        });
        // 第一页按钮事件
        netAlbumStartPageButton.addActionListener(e -> {
            Component lc = netAlbumLeftBox.getComponent(netAlbumLeftBox.getComponentCount() - 1);
            // 当前显示的是专辑列表，跳到第一页专辑
            if (lc == netAlbumScrollPane || lc == emptyHintPanel) {
                if (netAlbumCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netAlbumCurrPage = 1;
                searchAlbumGoPageAction.run();
            }
            // 当前显示的是某专辑的歌曲，跳到第一页歌曲
            else {
                if (netMusicInAlbumCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInAlbumCurrPage = 1;
                searchMusicInAlbum.run();
            }
        });
        // 上一页按钮事件
        netAlbumLastPageButton.addActionListener(e -> {
            Component lc = netAlbumLeftBox.getComponent(netAlbumLeftBox.getComponentCount() - 1);
            // 当前显示的是专辑列表，跳到上一页专辑
            if (lc == netAlbumScrollPane || lc == emptyHintPanel) {
                if (netAlbumCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netAlbumCurrPage--;
                searchAlbumGoPageAction.run();
            }
            // 当前显示的是某专辑的歌曲，跳到上一页歌曲
            else {
                if (netMusicInAlbumCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInAlbumCurrPage--;
                searchMusicInAlbum.run();
            }
        });
        // 下一页按钮事件
        netAlbumNextPageButton.addActionListener(e -> {
            Component lc = netAlbumLeftBox.getComponent(netAlbumLeftBox.getComponentCount() - 1);
            // 当前显示的是专辑列表，跳到下一页专辑
            if (lc == netAlbumScrollPane || lc == emptyHintPanel) {
                if (netAlbumCurrPage == netAlbumMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netAlbumCurrPage++;
                searchAlbumGoPageAction.run();
            }
            // 当前显示的是某专辑的歌曲，跳到下一页歌曲
            else {
                if (netMusicInAlbumCurrPage == netMusicInAlbumMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInAlbumCurrPage++;
                searchMusicInAlbum.run();
            }
        });
        // 最后一页按钮事件
        netAlbumEndPageButton.addActionListener(e -> {
            Component lc = netAlbumLeftBox.getComponent(netAlbumLeftBox.getComponentCount() - 1);
            // 当前显示的是专辑列表，跳到最后一页专辑
            if (lc == netAlbumScrollPane || lc == emptyHintPanel) {
                if (netAlbumCurrPage == netAlbumMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netAlbumCurrPage = netAlbumMaxPage;
                searchAlbumGoPageAction.run();
            }
            // 当前显示的是某专辑的歌曲，跳到最后一页歌曲
            else {
                if (netMusicInAlbumCurrPage == netMusicInAlbumMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInAlbumCurrPage = netMusicInAlbumMaxPage;
                searchMusicInAlbum.run();
            }
        });
        // 跳页按钮事件
        netAlbumGoButton.addActionListener(e -> {
            Component lc = netAlbumLeftBox.getComponent(netAlbumLeftBox.getComponentCount() - 1);
            // 当前显示的是专辑列表，跳页专辑
            if (lc == netAlbumScrollPane || lc == emptyHintPanel) {
                String text = netAlbumPageTextField.getText();
                netAlbumPageTextField.setText("");
                if ("".equals(text)) return;
                int destPage = Integer.parseInt(text);
                if (destPage < 1 || destPage > netAlbumMaxPage) {
                    new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                    return;
                }
                netAlbumCurrPage = destPage;
                searchAlbumGoPageAction.run();
            }
            // 当前显示的是某专辑的歌曲，跳页歌曲
            else {
                String text = netAlbumPageTextField.getText();
                netAlbumPageTextField.setText("");
                if ("".equals(text)) return;
                int destPage = Integer.parseInt(text);
                if (destPage < 1 || destPage > netMusicInAlbumMaxPage) {
                    new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInAlbumCurrPage = destPage;
                searchMusicInAlbum.run();
            }
        });
        // 按钮被禁止的图标
        netAlbumBackwardButton.setEnabled(false);
        // 按钮初始不可见
        netAlbumClearInputButton.setVisible(false);
        netAlbumPlayAllButton.setVisible(false);
        // 按钮大小限制
        Dimension dimension = new Dimension(20, 20);
        netAlbumRefreshButton.setPreferredSize(dimension);
        netAlbumStartPageButton.setPreferredSize(dimension);
        netAlbumLastPageButton.setPreferredSize(dimension);
        netAlbumGoButton.setPreferredSize(dimension);
        netAlbumNextPageButton.setPreferredSize(dimension);
        netAlbumEndPageButton.setPreferredSize(dimension);
        // 按钮悬浮与点击效果
        netAlbumBackwardButton.addMouseListener(new ButtonMouseListener(netAlbumBackwardButton, THIS));
        netAlbumClearInputButton.addMouseListener(new ButtonMouseListener(netAlbumClearInputButton, THIS));
        netAlbumSearchButton.addMouseListener(new ButtonMouseListener(netAlbumSearchButton, THIS));
        netAlbumPlayAllButton.addMouseListener(new ButtonMouseListener(netAlbumPlayAllButton, THIS));
        netAlbumRefreshButton.addMouseListener(new ButtonMouseListener(netAlbumRefreshButton, THIS));
        netAlbumStartPageButton.addMouseListener(new ButtonMouseListener(netAlbumStartPageButton, THIS));
        netAlbumLastPageButton.addMouseListener(new ButtonMouseListener(netAlbumLastPageButton, THIS));
        netAlbumGoButton.addMouseListener(new ButtonMouseListener(netAlbumGoButton, THIS));
        netAlbumNextPageButton.addMouseListener(new ButtonMouseListener(netAlbumNextPageButton, THIS));
        netAlbumEndPageButton.addMouseListener(new ButtonMouseListener(netAlbumEndPageButton, THIS));
        // 帮助提示
        netAlbumBackwardButton.setToolTipText(BACKWARD_TIP);
        netAlbumClearInputButton.setToolTipText(CLEAR_INPUT_TIP);
        netAlbumSearchButton.setToolTipText(SEARCH_TIP);
        netAlbumPlayAllButton.setToolTipText(PLAY_ALL_TIP);
        netAlbumRefreshButton.setToolTipText(REFRESH_TIP);
        netAlbumStartPageButton.setToolTipText(START_PAGE_TIP);
        netAlbumLastPageButton.setToolTipText(LAST_PAGE_TIP);
        netAlbumGoButton.setToolTipText(GO_TIP);
        netAlbumNextPageButton.setToolTipText(NEXT_PAGE_TIP);
        netAlbumEndPageButton.setToolTipText(END_PAGE_TIP);

        netAlbumToolBar.add(netAlbumBackwardButton);
        netAlbumToolBar.add(netAlbumSearchTextField);
        netAlbumToolBar.add(netAlbumClearInputButton);
        netAlbumToolBar.add(netAlbumSearchButton);
        netAlbumLeftBox.add(netAlbumToolBar);

        for (String name : NetMusicSource.names) netAlbumSourceComboBox.addItem(name);
        netAlbumSourceComboBox.addItemListener(e -> {
            // 避免事件被处理 2 次！
            if (e.getStateChange() != ItemEvent.SELECTED) return;
            netAlbumCurrKeyword = netAlbumSearchTextField.getText();
            netAlbumCurrPage = 1;
            netAlbumRefreshButton.doClick();
        });

        // 专辑数量和当前歌曲标签
        netAlbumCountPanel.add(netAlbumSourceComboBox);
        netAlbumCountPanel.add(netAlbumPlayAllButton);
        netAlbumCountPanel.add(netAlbumStartPageButton);
        netAlbumCountPanel.add(netAlbumLastPageButton);
        netAlbumCountPanel.add(netAlbumCountLabel);
        netAlbumCountPanel.add(netAlbumNextPageButton);
        netAlbumCountPanel.add(netAlbumEndPageButton);
        netAlbumCountPanel.add(netAlbumRefreshButton);
        netAlbumCountPanel.add(netAlbumPageTextField);
        netAlbumCountPanel.add(netAlbumGoButton);
        netAlbumCountPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netAlbumCountPanel.setVisible(false);
        netAlbumLeftBox.add(netAlbumCountPanel);
    }

    // 初始化在线专辑列表
    private void netAlbumListInit() {
        netAlbumList.setModel(netAlbumListModel);
        netAlbumList.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int index = netAlbumList.locationToIndex(e.getPoint());
                Rectangle bounds = netAlbumList.getCellBounds(index, index);
                if (bounds == null) return;
                setHoverIndex(bounds.contains(e.getPoint()) ? index : -1);
            }

            private void setHoverIndex(int index) {
                TranslucentNetAlbumListRenderer renderer = (TranslucentNetAlbumListRenderer) netAlbumList.getCellRenderer();
                if (renderer == null) return;
                int hoverIndex = renderer.getHoverIndex();
                if (hoverIndex == index) return;
                renderer.setHoverIndex(index);
                netAlbumList.repaint();
            }
        });
        netAlbumList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                TranslucentNetAlbumListRenderer renderer = (TranslucentNetAlbumListRenderer) netAlbumList.getCellRenderer();
                if (renderer == null) return;
                renderer.setHoverIndex(-1);
                netAlbumList.repaint();
            }
        });
        // 打开专辑
        Runnable openAlbumAction = () -> {
            List<Future<?>> taskList = new LinkedList<>();
            loadingAndRun(() -> {
                NetAlbumInfo albumInfo = netAlbumList.getSelectedValue();
                // 加载封面图片和描述
                taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                    BufferedImage coverImg = ImageUtils.borderShadow(ImageUtils.dye(loadingImage, currUIStyle.getLabelColor()));
                    albumCoverAndNameLabel.setIcon(new ImageIcon(coverImg));
                    albumCoverAndNameLabel.setText(LOADING_MSG);
                    albumDescriptionLabel.setText(LOADING_MSG);
                    GlobalExecutors.imageExecutor.execute(() -> {
                        try {
                            MusicServerUtils.fillAlbumInfo(albumInfo);
                            albumCoverAndNameLabel.setText(StringUtils.textToHtml(albumInfo.getName()));
                            if (albumInfo.getDescription() != null)
                                albumDescriptionLabel.setText(StringUtils.textToHtml(albumInfo.getDescription()));
                            if (albumInfo.hasCoverImg()) {
                                albumCoverAndNameLabel.setIcon(new ImageIcon(
                                        ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(albumInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                ));
                            } else {
                                albumInfo.setInvokeLater(() -> {
                                    albumCoverAndNameLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(albumInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                    netAlbumList.repaint();
                                });
                            }
                        } catch (HttpException e) {
                            albumCoverAndNameLabel.setText(LOAD_FAILED);
                            albumDescriptionLabel.setText(LOAD_FAILED);
                        }
                    });
                }));


                taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                    try {
                        // 得到专辑的音乐信息
                        CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInAlbum(
                                albumInfo.getId(), albumInfo.getSource(), limit, netMusicInAlbumCurrPage = 1);
                        List<NetMusicInfo> musicInfos = result.data;
                        int total = result.total;
                        netMusicInAlbumMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新专辑歌曲数量显示
//                            netCurrAlbumLabel.setText(StringUtils.textToHtml(albumInfo.getName()));
                        netAlbumCountLabel.setText(String.format(PAGINATION_MSG, netMusicInAlbumCurrPage, netMusicInAlbumMaxPage));
                        albumListCountBox.add(netAlbumCountPanel);
                        albumListBox.add(albumListCountBox);
                        // 专辑列表切换到在线音乐列表
                        netMusicList.setModel(netMusicListForAlbumModel);
                        netAlbumLeftBox.remove(netAlbumScrollPane);
                        netAlbumLeftBox.add(albumListBox);
                        // 删除工具栏的搜索
                        netAlbumToolBar.remove(netAlbumSearchTextField);
                        netAlbumToolBar.remove(netAlbumClearInputButton);
                        netAlbumToolBar.remove(netAlbumSearchButton);
                        netAlbumToolBar.remove(netAlbumTitleLabel);
                        netAlbumToolBar.add(Box.createHorizontalGlue());
                        // 添加数据建议弄到更新数量显示之后，不然可能会不显示！
                        netMusicList.setModel(emptyListModel);
                        netMusicListForAlbumModel.clear();
                        musicInfos.forEach(musicInfo -> {
                            globalExecutor.submit(() -> updateCollection(musicInfo));
                            netMusicListForAlbumModel.addElement(musicInfo);
                        });
                        netMusicList.setModel(netMusicListForAlbumModel);
                        albumDescriptionScrollPane.getVerticalScrollBar().setValue(0);
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                        netAlbumBackwardButton.setEnabled(true);
                        netAlbumSourceComboBox.setVisible(false);
                        netAlbumPlayAllButton.setVisible(true);
                        if (netMusicListForAlbumModel.isEmpty()) {
                            albumListCountBox.remove(netMusicScrollPane);
                            albumListCountBox.add(emptyHintPanel);
                        } else {
                            albumListCountBox.remove(emptyHintPanel);
                            albumListCountBox.add(netMusicScrollPane);
                        }
                        // 切换后一定要刷新！
                        netAlbumLeftBox.repaint();
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                }));

                taskList.forEach(task -> {
                    try {
                        task.get();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    } catch (ExecutionException e) {
                        e.printStackTrace();
                    }
                });
            });
        };
        netAlbumList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    openAlbumAction.run();
                }
            }
        });
        netAlbumList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                // 鼠标左键双击打开专辑
                if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    openAlbumAction.run();
                }
                // 右键弹出菜单
                else if (e.getButton() == MouseEvent.BUTTON3) {
                    if (netAlbumList.getModel().getSize() != 0) {
                        // 得到鼠标光标所在的选项并选中
                        int index = netAlbumList.locationToIndex(e.getPoint());
                        if (index == -1) return;
                        if (!netAlbumList.isSelectedIndex(index)) netAlbumList.setSelectedIndex(index);
                        if (hasBeenCollected(netAlbumList.getSelectedValue())) {
                            netAlbumCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                            netAlbumCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);
                        } else {
                            netAlbumCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, currUIStyle.getButtonColor()));
                            netAlbumCollectMenuItem.setText(COLLECT_MENU_ITEM_TEXT);
                        }

                        netAlbumPopupMenu.show(netAlbumList, e.getX(), e.getY());
                    }
                }
            }
        });
        // 打开专辑
        netAlbumOpenMenuItem.addActionListener(e -> {
            int index = tabbedPane.getSelectedIndex();
            if (index == TabIndex.NET_ALBUM) openAlbumAction.run();
            else if (index == TabIndex.PERSONAL) openCollectionItemAction.run();
            else openRecommendItemAction.run();
        });
        // 播放全部
        netAlbumPlayAllMenuItem.addActionListener(e -> {
            NetAlbumInfo netAlbumInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_ALBUM) netAlbumInfo = netAlbumList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netAlbumInfo = (NetAlbumInfo) collectionList.getSelectedValue();
            else netAlbumInfo = (NetAlbumInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInAlbum(
                        netAlbumInfo.getId(), netAlbumInfo.getSource(), netAlbumInfo.hasSongNum() ? netAlbumInfo.getSongNum() : 10000, 1);
                List<NetMusicInfo> musicInfos = result.data;
                if (musicInfos.isEmpty()) {
                    new TipDialog(THIS, NO_MUSIC_MSG).showDialog();
                    return;
                }
                playQueue.setModel(emptyListModel);
                playQueueModel.clear();
                musicInfos.forEach(musicInfo -> {
                    globalExecutor.submit(() -> updateCollection(musicInfo));
                    playQueueModel.addElement(musicInfo);
                });
                playQueue.setModel(playQueueModel);
                playQueue.setSelectedIndex(0);
                playExecutor.submit(() -> playSelected(playQueue, true));
            });
        });
        // 收藏专辑
        netAlbumCollectMenuItem.addActionListener(e -> {
            int index = tabbedPane.getSelectedIndex();
            CustomList list;
            if (index == TabIndex.NET_ALBUM) list = netAlbumList;
            else if (index == TabIndex.PERSONAL) list = collectionList;
            else list = itemRecommendList;
            ListModel model = collectionList.getModel();
            boolean needRefresh = model == albumCollectionModel;
            if (netAlbumCollectMenuItem.getText().equals(COLLECT_MENU_ITEM_TEXT)) {
                List values = list.getSelectedValuesList();
                if (needRefresh) collectionList.setModel(emptyListModel);
                for (int i = values.size() - 1; i >= 0; i--) {
                    Object o = values.get(i);
                    if (hasBeenCollected(o)) continue;
                    albumCollectionModel.add(0, o);
                }
                if (needRefresh) collectionList.setModel(model);
                new TipDialog(THIS, COLLECT_SUCCESS_MSG).showDialog();
            } else {
                List values = list.getSelectedValuesList();
                if (needRefresh) collectionList.setModel(emptyListModel);
                values.forEach(o -> {
                    if (list == collectionList || hasBeenCollected(o)) {
                        albumCollectionModel.removeElement(o);
                    }
                });
                if (needRefresh) collectionList.setModel(model);
                new TipDialog(THIS, CANCEL_COLLECTION_SUCCESS_MSG).showDialog();
            }
        });
        // 查看评论
        netAlbumCommentMenuItem.addActionListener(e -> {
            NetAlbumInfo netAlbumInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_ALBUM) netAlbumInfo = netAlbumList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netAlbumInfo = (NetAlbumInfo) collectionList.getSelectedValue();
            else netAlbumInfo = (NetAlbumInfo) itemRecommendList.getSelectedValue();
            getComments(netAlbumInfo, true);
        });
        // 查看歌手/作者
        netAlbumArtistMenuItem.addActionListener(e -> {
            NetAlbumInfo netAlbumInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_ALBUM) netAlbumInfo = netAlbumList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netAlbumInfo = (NetAlbumInfo) collectionList.getSelectedValue();
            else netAlbumInfo = (NetAlbumInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    if (netAlbumInfo.isPhoto()) {
                        clearRequestForUser();
                        // 获取歌手/作者
                        currAuthorAlbumInfo = netAlbumInfo;
                        CommonResult<NetUserInfo> result = MusicServerUtils.getUserInfo(netAlbumInfo.getArtistId(), netAlbumInfo.getSource());
                        List<NetUserInfo> netUserInfos = result.data;
                        netUserCurrPage = netUserMaxPage = 1;
                        // 标题
                        netUserTitleLabel.setText(netAlbumInfo.toSimpleString() + " 的作者");
                        netUserToolBar.removeAll();
                        netUserToolBar.add(netUserBackwardButton);
                        netUserToolBar.add(Box.createHorizontalGlue());
                        netUserToolBar.add(netUserTitleLabel);
                        netUserToolBar.add(Box.createHorizontalGlue());
                        // 更新数量显示
                        netUserCountLabel.setText(String.format(PAGINATION_MSG, netUserCurrPage, netUserMaxPage));
                        netUserCountPanel.add(netUserCountLabel, netUserCountPanel.getComponentIndex(netUserCountLabel));
                        netUserLeftBox.add(netUserCountPanel);
                        netUserSourceComboBox.setVisible(false);
                        netUserPlayAllButton.setVisible(false);
                        netUserRecordTypeComboBox.setVisible(false);
                        netUserCountPanel.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netUserList.setModel(emptyListModel);
                        netUserListModel.clear();
                        netUserInfos.forEach(userInfo -> {
                            globalExecutor.submit(() -> updateCollection(userInfo));
                            // 设置图片加载后重绘的事件
                            userInfo.setInvokeLater(() -> {
                                updateRenderer(netUserList);
                                updateRenderer(collectionList);
                                netUserList.repaint();
                                collectionList.repaint();
                            });
                            netUserListModel.addElement(userInfo);
                        });
                        netUserList.setModel(netUserListModel);
                        netUserBackwardButton.setEnabled(true);
                        netUserLeftBox.remove(netUserKeywordsPanelScrollPane);
                        netUserLeftBox.remove(userListBox);
                        if (netUserListModel.isEmpty()) {
                            netUserLeftBox.remove(netUserScrollPane);
                            netUserLeftBox.add(emptyHintPanel);
                        } else {
                            netUserLeftBox.remove(emptyHintPanel);
                            netUserLeftBox.add(netUserScrollPane);
                        }
                        netUserScrollPane.getVerticalScrollBar().setValue(0);
                        tabbedPane.setSelectedIndex(TabIndex.NET_USER);
                    } else {
                        clearRequestForArtist();
                        // 搜索专辑歌手
                        currArtistAlbumInfo = netAlbumInfo;
                        CommonResult<NetArtistInfo> result = MusicServerUtils.getArtistInfo(netAlbumInfo.getArtistId(), netAlbumInfo.getSource());
                        List<NetArtistInfo> netArtistInfos = result.data;
                        netArtistCurrPage = netArtistMaxPage = 1;
                        // 标题
                        netArtistTitleLabel.setText(netAlbumInfo.toSimpleString() + " 的歌手");
                        netArtistToolBar.removeAll();
                        netArtistToolBar.add(netArtistBackwardButton);
                        netArtistToolBar.add(Box.createHorizontalGlue());
                        netArtistToolBar.add(netArtistTitleLabel);
                        netArtistToolBar.add(Box.createHorizontalGlue());
                        // 更新数量显示
                        netArtistCountLabel.setText(String.format(PAGINATION_MSG, netArtistCurrPage, netArtistMaxPage));
                        netArtistCountPanel.add(netArtistCountLabel, netArtistCountPanel.getComponentIndex(netArtistCountLabel));
                        netArtistLeftBox.add(netArtistCountPanel);
                        netArtistSourceComboBox.setVisible(false);
                        netArtistPlayAllButton.setVisible(false);
                        netArtistCountPanel.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netArtistList.setModel(emptyListModel);
                        netArtistListModel.clear();
                        netArtistInfos.forEach(artistInfo -> {
                            globalExecutor.submit(() -> updateCollection(artistInfo));
                            // 设置图片加载后重绘的事件
                            artistInfo.setInvokeLater(() -> {
                                netArtistList.repaint();
                                collectionList.repaint();
                            });
                            netArtistListModel.addElement(artistInfo);
                        });
                        netArtistList.setModel(netArtistListModel);
                        netArtistBackwardButton.setEnabled(true);
                        netArtistLeftBox.remove(netArtistKeywordsPanelScrollPane);
                        netArtistLeftBox.remove(artistListBox);
                        if (netArtistListModel.isEmpty()) {
                            netArtistLeftBox.remove(netArtistScrollPane);
                            netArtistLeftBox.add(emptyHintPanel);
                        } else {
                            netArtistLeftBox.remove(emptyHintPanel);
                            netArtistLeftBox.add(netArtistScrollPane);
                        }
                        netArtistScrollPane.getVerticalScrollBar().setValue(0);
                        tabbedPane.setSelectedIndex(TabIndex.NET_ARTIST);
                    }
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看相似专辑
        netAlbumSimilarMenuItem.addActionListener(e -> {
            NetAlbumInfo netAlbumInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_ALBUM) netAlbumInfo = netAlbumList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netAlbumInfo = (NetAlbumInfo) collectionList.getSelectedValue();
            else netAlbumInfo = (NetAlbumInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForAlbum();
                    // 搜索歌手专辑并显示专辑列表
                    CommonResult<NetAlbumInfo> result = MusicServerUtils.getSimilarAlbums(currAlbumAlbumInfo = netAlbumInfo);
                    List<NetAlbumInfo> netAlbumInfos = result.data;
                    netAlbumCurrPage = netAlbumMaxPage = 1;
                    // 标题
                    netAlbumTitleLabel.setText(netAlbumInfo.getName() + " 的相似专辑");
                    netAlbumToolBar.removeAll();
                    netAlbumToolBar.add(netAlbumBackwardButton);
                    netAlbumToolBar.add(Box.createHorizontalGlue());
                    netAlbumToolBar.add(netAlbumTitleLabel);
                    netAlbumToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netAlbumCountLabel.setText(String.format(PAGINATION_MSG, netAlbumCurrPage, netAlbumMaxPage));
                    netAlbumCountPanel.add(netAlbumCountLabel, netAlbumCountPanel.getComponentIndex(netAlbumCountLabel));
                    netAlbumLeftBox.add(netAlbumCountPanel);
                    netAlbumSourceComboBox.setVisible(false);
                    netAlbumPlayAllButton.setVisible(false);
                    netAlbumCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netAlbumList.setModel(emptyListModel);
                    netAlbumListModel.clear();
                    netAlbumInfos.forEach(albumInfo -> {
                        globalExecutor.submit(() -> updateCollection(albumInfo));
                        // 设置图片加载后重绘的事件
                        albumInfo.setInvokeLater(() -> {
                            updateRenderer(netAlbumList);
                            updateRenderer(collectionList);
                            netAlbumList.repaint();
                            collectionList.repaint();
                        });
                        netAlbumListModel.addElement(albumInfo);
                    });
                    netAlbumList.setModel(netAlbumListModel);
                    netAlbumBackwardButton.setEnabled(true);
                    netAlbumLeftBox.remove(netAlbumKeywordsPanelScrollPane);
                    if (netAlbumListModel.isEmpty()) {
                        netAlbumLeftBox.remove(netAlbumScrollPane);
                        netAlbumLeftBox.add(emptyHintPanel);
                    } else {
                        netAlbumLeftBox.remove(emptyHintPanel);
                        netAlbumLeftBox.add(netAlbumScrollPane);
                    }
                    netAlbumScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_ALBUM);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看专辑照片
        netAlbumPhotosMenuItem.addActionListener(e -> {
            NetAlbumInfo netAlbumInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_ALBUM) netAlbumInfo = netAlbumList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netAlbumInfo = (NetAlbumInfo) collectionList.getSelectedValue();
            else netAlbumInfo = (NetAlbumInfo) itemRecommendList.getSelectedValue();
            try {
//                CommonResult<String> results = MusicServerUtils.getArtistImgUrls(netArtistInfo, 1);
//                List<String> imgUrls = results.data;
//                Integer total = results.total;
                imageViewDialog = new ImageViewDialog(THIS, limit) {
                    @Override
                    public CommonResult<String> requestImgUrls(int pn, int limit, String cursor) {
                        return MusicServerUtils.getAlbumImgUrls(netAlbumInfo, pn, limit, cursor);
                    }

                    @Override
                    public void requestFailed() {
                        new TipDialog(THIS, NO_IMG_MSG).showDialog();
                    }
                };
                imageViewDialog.showDialog();
                imageViewDialog = null;
            } catch (IORuntimeException ioRuntimeException) {
                // 无网络连接
                new TipDialog(THIS, NO_NET_MSG).showDialog();
            } catch (HttpException httpException) {
                // 请求超时
                new TipDialog(THIS, TIME_OUT_MSG).showDialog();
            } catch (JSONException jsonException) {
                // 接口异常
                new TipDialog(THIS, API_ERROR_MSG).showDialog();
            }
        });
        // 复制名称
        netAlbumCopyNameMenuItem.addActionListener(e -> {
            Object o;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_ALBUM) o = netAlbumList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL) o = collectionList.getSelectedValue();
            else o = itemRecommendList.getSelectedValue();
            StringSelection stringSelection = new StringSelection(((NetAlbumInfo) o).toSimpleString());
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });
        // 专辑列表右键菜单项
        netAlbumPopupMenu.add(netAlbumOpenMenuItem);
        netAlbumPopupMenu.add(netAlbumPlayAllMenuItem);
        netAlbumPopupMenu.add(netAlbumCollectMenuItem);
        netAlbumPopupMenu.add(netAlbumCommentMenuItem);
        netAlbumPopupMenu.add(netAlbumArtistMenuItem);
        netAlbumPopupMenu.add(netAlbumSimilarMenuItem);
        netAlbumPopupMenu.add(netAlbumPhotosMenuItem);
        netAlbumPopupMenu.add(netAlbumCopyNameMenuItem);

        // 搜索历史面板
        // 清空搜索历史按钮
        netAlbumClearHistorySearchButton.addActionListener(e -> {
            netAlbumHistorySearchInnerPanel2.removeAll();
            netAlbumKeywordsPanel.remove(netAlbumHistorySearchPanel);
            netAlbumKeywordsPanel.repaint();
        });
        netAlbumClearHistorySearchButton.setPreferredSize(new Dimension(20, 20));
        netAlbumClearHistorySearchButton.setToolTipText(CLEAR_HISTORY_SEARCH_TIP);
        netAlbumClearHistorySearchButton.addMouseListener(new ButtonMouseListener(netAlbumClearHistorySearchButton, THIS));

        netAlbumHistorySearchInnerPanel1.add(netAlbumHistorySearchLabel);
        netAlbumHistorySearchInnerPanel1.add(netAlbumClearHistorySearchButton);
        netAlbumHistorySearchInnerPanel1.setLayout(new FlowLayout(FlowLayout.LEFT));
        netAlbumHistorySearchInnerPanel1.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        netAlbumHistorySearchInnerPanel1.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netAlbumHistorySearchInnerPanel2.setLayout(new FlowLayout(FlowLayout.LEFT));
        netAlbumHistorySearchInnerPanel2.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        netAlbumHistorySearchPanel.setLayout(new BoxLayout(netAlbumHistorySearchPanel, BoxLayout.Y_AXIS));
        netAlbumHistorySearchPanel.add(netAlbumHistorySearchInnerPanel1);
        netAlbumHistorySearchPanel.add(netAlbumHistorySearchInnerPanel2);
        // 关键词面板
        netAlbumKeywordsPanel.setLayout(new BoxLayout(netAlbumKeywordsPanel, BoxLayout.Y_AXIS));
//        // 滚动条监听器
//        netAlbumKeywordsPanelScrollPane.addMouseListener(new ScrollPaneListener(netAlbumKeywordsPanelScrollPane, THIS));

        // 同时限制面板与滚动条的大小才能保证按钮不超出窗口！！！
        Dimension d = new Dimension(900, 500);
        netAlbumKeywordsPanel.setPreferredSize(d);
        netAlbumKeywordsPanelScrollPane.setPreferredSize(d);

        // 在线专辑最佳大小
        netAlbumScrollPane.setPreferredSize(new Dimension(200, 600));
        netAlbumLeftBox.add(netAlbumScrollPane);
    }

    // 初始化歌手工具栏
    private void netArtistToolBarInit() {
        netArtistSearchTextField.addFocusListener(new TextFieldHintListener(netArtistSearchTextField, "歌手", currUIStyle.getForeColor()));
        netArtistSearchTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                if (netArtistSearchTextField.isOccupied()) {
                    netArtistClearInputButton.setVisible(true);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if (netArtistSearchTextField.getText().equals("")) netArtistClearInputButton.setVisible(false);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });
        // 只能输入数字
        netArtistPageTextField.setDocument(new SafeDocument(0, Integer.MAX_VALUE));
        // 后退按钮事件
        netArtistBackwardButton.addActionListener(e -> {
            int lastComponentIndex = netArtistLeftBox.getComponentCount() - 1;
            Component c = netArtistLeftBox.getComponent(lastComponentIndex);
            if (c != netArtistScrollPane && c != emptyHintPanel) {
                netMusicListForArtistModel.clear();
                // 从在线音乐列表切换回歌手列表
                netArtistPlayAllButton.setVisible(false);
                netArtistLeftBox.remove(artistListBox);
                netArtistLeftBox.add(netArtistCountPanel);
                netArtistLeftBox.add(netArtistScrollPane);
                // 添加回工具栏的搜索
                netArtistToolBar.remove(1);
                netArtistToolBar.add(netArtistSearchTextField);
                netArtistToolBar.add(netArtistClearInputButton);
                netArtistToolBar.add(netArtistSearchButton);
                // 添加回工具栏的搜索/标题
                netArtistToolBar.removeAll();
                netArtistToolBar.add(netArtistBackwardButton);
                if (currArtistArtistInfo == null
                        && currArtistMusicInfo == null
                        && currArtistAlbumInfo == null
                        && currBuddyArtistInfo == null
                        && currArtistMvInfo == null
                        && currArtistRadioInfo == null
                        && currCVRadioInfo == null) {
                    // 删除标题标签
                    netArtistToolBar.add(netArtistSearchTextField);
                    netArtistToolBar.add(netArtistClearInputButton);
                    netArtistToolBar.add(netArtistSearchButton);
                    netArtistSourceComboBox.setVisible(true);
                } else {
                    netArtistToolBar.add(Box.createHorizontalGlue());
                    netArtistToolBar.add(netArtistTitleLabel);
                    netArtistToolBar.add(Box.createHorizontalGlue());
                }
                // 更新歌手歌曲数量显示
//                netCurrArtistLabel.setText("");
                netArtistCountLabel.setText(String.format(PAGINATION_MSG, netArtistCurrPage, netArtistMaxPage));
//                netArtistBackwardButton.setEnabled(false);
            }
            // 后退到关键词面板
            else {
                // 删除标题标签
                netArtistToolBar.removeAll();
                netArtistToolBar.add(netArtistBackwardButton);
                netArtistToolBar.add(netArtistSearchTextField);
                netArtistToolBar.add(netArtistClearInputButton);
                netArtistToolBar.add(netArtistSearchButton);
                clearRequestForArtist();

                netArtistListModel.clear();
                netArtistCountPanel.setVisible(false);
                netArtistLeftBox.remove(emptyHintPanel);
                netArtistLeftBox.remove(netArtistScrollPane);
                netArtistLeftBox.add(netArtistKeywordsPanelScrollPane);
                netArtistBackwardButton.setEnabled(false);
            }
            // 切换后一定要刷新！
            netArtistLeftBox.repaint();
        });
        // 清除输入事件
        netArtistClearInputButton.addActionListener(e -> {
            netArtistSearchTextField.requestFocus();
            netArtistSearchTextField.setText("");
            netArtistBackwardButton.requestFocus();
        });
        // 搜索歌手按钮事件
        netArtistSearchButton.addActionListener(e -> {
            netArtistCurrKeyword = netArtistSearchTextField.getText();
            if (!netArtistCurrKeyword.equals("")) {
                // 关键词加入搜索历史
                DialogButton b = new DialogButton(netArtistCurrKeyword);
                b.addActionListener(event -> {
                    netArtistSearchTextField.requestFocus();
                    netArtistSearchTextField.setText(b.getText());
                    netArtistClearInputButton.setVisible(true);
                    netArtistLeftBox.remove(netArtistKeywordsPanelScrollPane);
                    netArtistLeftBox.add(netArtistScrollPane);
                    netArtistSearchButton.doClick();
                });
                // 右击删除历史
                b.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.getButton() == MouseEvent.BUTTON3) {
                            netArtistHistorySearchInnerPanel2.remove(b);
                            netArtistHistorySearchInnerPanel2.repaint();
                            if (netArtistHistorySearchInnerPanel2.getComponentCount() == 0) {
                                netArtistKeywordsPanel.remove(netArtistHistorySearchPanel);
                                netArtistKeywordsPanel.repaint();
                            }
                        }
                    }
                });
                b.setToolTipText(REMOVE_HISTORY_KEYWORD_TIP);
                b.setForeColor(currUIStyle.getButtonColor());
                // 先删除重复的关键词
                removeKeywordInHistorySearch(netArtistCurrKeyword, HistorySearchType.NET_ARTIST);
                netArtistHistorySearchInnerPanel2.add(b, 0);
                // 删除超出上限的最后一个关键词
                int c = netArtistHistorySearchInnerPanel2.getComponentCount();
                if (c > maxSearchHistoryCount)
                    netArtistHistorySearchInnerPanel2.remove(c - 1);
                // 显示 “搜索历史” 面板
                netArtistKeywordsPanel.add(netArtistHistorySearchPanel);
                // 更新 LAF，防止按钮样式不正确
                SwingUtilities.updateComponentTreeUI(netArtistClearHistorySearchButton);
                netArtistHistorySearchPanel.repaint();

                loadingAndRun(() -> {
                    try {
                        // 搜索歌手并显示歌手列表
                        CommonResult<NetArtistInfo> result = MusicServerUtils.searchArtists(
                                netArtistSourceComboBox.getSelectedIndex(), netArtistCurrKeyword, limit, netArtistCurrPage = 1);
                        List<NetArtistInfo> netArtistInfos = result.data;
                        Integer total = result.total;
                        netArtistMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netArtistCountLabel.setText(String.format(PAGINATION_MSG, netArtistCurrPage, netArtistMaxPage));
                        netArtistCountPanel.add(netArtistCountLabel, netArtistCountPanel.getComponentIndex(netArtistCountLabel));
                        netArtistCountPanel.setVisible(true);
                        netArtistSourceComboBox.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netArtistList.setModel(emptyListModel);
                        netArtistListModel.clear();
                        netArtistInfos.forEach(artistInfo -> {
                            globalExecutor.submit(() -> updateCollection(artistInfo));
                            // 设置图片加载后重绘的事件
                            artistInfo.setInvokeLater(() -> {
                                updateRenderer(netArtistList);
                                updateRenderer(collectionList);
                                netArtistList.repaint();
                                collectionList.repaint();
                            });
                            netArtistListModel.addElement(artistInfo);
                        });
                        netArtistList.setModel(netArtistListModel);
                        netArtistBackwardButton.setEnabled(true);
                        netArtistLeftBox.remove(netArtistKeywordsPanelScrollPane);
                        if (netArtistListModel.isEmpty()) {
                            netArtistLeftBox.remove(netArtistScrollPane);
                            netArtistLeftBox.add(emptyHintPanel);
                        } else {
                            netArtistLeftBox.remove(emptyHintPanel);
                            netArtistLeftBox.add(netArtistScrollPane);
                        }
                        netArtistScrollPane.getVerticalScrollBar().setValue(0);
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        jsonException.printStackTrace();
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        });
        // 搜索歌手跳页事件
        Runnable searchArtistGoPageAction = () -> {
            boolean songRequest = currArtistMusicInfo != null, albumRequest = currArtistAlbumInfo != null, artistRequest = currArtistArtistInfo != null,
                    buddyRequest = currBuddyArtistInfo != null, mvRequest = currArtistMvInfo != null, radioRequest = currArtistRadioInfo != null,
                    radioCVRequest = currCVRadioInfo != null;
            if (artistRequest || buddyRequest || radioRequest || radioCVRequest || songRequest ||
                    albumRequest || mvRequest || StringUtils.isNotEmpty(netArtistCurrKeyword)) {
                loadingAndRun(() -> {
                    try {
                        // 搜索歌手并显示歌手列表
                        CommonResult<NetArtistInfo> result = artistRequest ? MusicServerUtils.getSimilarArtists(currArtistArtistInfo, netArtistCurrPage)
                                : buddyRequest ? MusicServerUtils.getArtistBuddies(currBuddyArtistInfo, netArtistCurrPage, limit)
                                : radioRequest ? MusicServerUtils.getRadioArtists(currArtistRadioInfo)
                                : radioCVRequest ? MusicServerUtils.getRadioArtists(currCVRadioInfo)
                                : songRequest ? MusicServerUtils.getArtistInfo(currArtistMusicInfo.getArtistId(), currArtistMusicInfo.getSource())
                                : albumRequest ? MusicServerUtils.getArtistInfo(currArtistAlbumInfo.getArtistId(), currArtistAlbumInfo.getSource())
                                : mvRequest ? MusicServerUtils.getArtistInfo(currArtistMvInfo.getCreatorId(), currArtistMvInfo.getSource())
                                : MusicServerUtils.searchArtists(netArtistSourceComboBox.getSelectedIndex(), netArtistCurrKeyword, limit, netArtistCurrPage);
                        List<NetArtistInfo> netArtistInfos = result.data;
                        Integer total = result.total;
                        netArtistMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netArtistCountLabel.setText(String.format(PAGINATION_MSG, netArtistCurrPage, netArtistMaxPage));
                        netArtistCountPanel.add(netArtistCountLabel, netArtistCountPanel.getComponentIndex(netArtistCountLabel));
                        netArtistCountPanel.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netArtistList.setModel(emptyListModel);
                        netArtistListModel.clear();
                        netArtistInfos.forEach(artistInfo -> {
                            globalExecutor.submit(() -> updateCollection(artistInfo));
                            // 设置图片加载后重绘的事件
                            artistInfo.setInvokeLater(() -> {
                                updateRenderer(netArtistList);
                                updateRenderer(collectionList);
                                netArtistList.repaint();
                                collectionList.repaint();
                            });
                            netArtistListModel.addElement(artistInfo);
                        });
                        netArtistList.setModel(netArtistListModel);
                        netArtistScrollPane.getVerticalScrollBar().setValue(0);
                        if (netArtistListModel.isEmpty()) {
                            netArtistLeftBox.remove(netArtistScrollPane);
                            netArtistLeftBox.add(emptyHintPanel);
                        } else {
                            netArtistLeftBox.remove(emptyHintPanel);
                            netArtistLeftBox.add(netArtistScrollPane);
                        }
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        jsonException.printStackTrace();
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        };
        // 搜索歌手内歌曲并显示在在线播放列表
        Runnable searchMusicInArtist = () -> {
            if (!netMusicListForArtistModel.isEmpty()) {
                loadingAndRun(() -> {
                    try {
                        NetArtistInfo artistInfo = netArtistList.getSelectedValue();
                        CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInArtist(
                                artistInfo.getId(), artistInfo.getSource(), limit, netMusicInArtistCurrPage);
                        List<NetMusicInfo> musicInfos = result.data;
                        Integer total = result.total;
                        netMusicInArtistMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netArtistCountLabel.setText(String.format(PAGINATION_MSG, netMusicInArtistCurrPage, netMusicInArtistMaxPage));
                        netArtistCountPanel.add(netArtistCountLabel, netArtistCountPanel.getComponentIndex(netArtistCountLabel));
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netMusicListForArtistModel.clear();
                        netMusicList.setModel(emptyListModel);
                        musicInfos.forEach(musicInfo -> {
                            globalExecutor.submit(() -> updateCollection(musicInfo));
                            netMusicListForArtistModel.addElement(musicInfo);
                        });
                        netMusicList.setModel(netMusicListForArtistModel);
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                        if (netMusicListForArtistModel.isEmpty()) {
                            artistListCountBox.remove(netMusicScrollPane);
                            artistListCountBox.add(emptyHintPanel);
                        } else {
                            artistListCountBox.remove(emptyHintPanel);
                            artistListCountBox.add(netMusicScrollPane);
                        }
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        };
        // 播放全部
        netArtistPlayAllButton.addActionListener(e -> netArtistPlayAllMenuItem.doClick());
        // 刷新按钮事件
        netArtistRefreshButton.addActionListener(e -> {
            Component lc = netArtistLeftBox.getComponent(netArtistLeftBox.getComponentCount() - 1);
            // 当前显示的是歌手列表，刷新歌手
            if (lc == netArtistScrollPane || lc == emptyHintPanel) {
                searchArtistGoPageAction.run();
            }
            // 当前显示的是某歌手的歌曲，刷新歌曲
            else {
                searchMusicInArtist.run();
            }
        });
        // 第一页按钮事件
        netArtistStartPageButton.addActionListener(e -> {
            Component lc = netArtistLeftBox.getComponent(netArtistLeftBox.getComponentCount() - 1);
            // 当前显示的是歌手列表，跳到第一页歌手
            if (lc == netArtistScrollPane || lc == emptyHintPanel) {
                if (netArtistCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netArtistCurrPage = 1;
                searchArtistGoPageAction.run();
            }
            // 当前显示的是某歌手的歌曲，跳到第一页歌曲
            else {
                if (netMusicInArtistCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInArtistCurrPage = 1;
                searchMusicInArtist.run();
            }
        });
        // 上一页按钮事件
        netArtistLastPageButton.addActionListener(e -> {
            Component lc = netArtistLeftBox.getComponent(netArtistLeftBox.getComponentCount() - 1);
            // 当前显示的是歌手列表，跳到上一页歌手
            if (lc == netArtistScrollPane || lc == emptyHintPanel) {
                if (netArtistCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netArtistCurrPage--;
                searchArtistGoPageAction.run();
            }
            // 当前显示的是某歌手的歌曲，跳到上一页歌曲
            else {
                if (netMusicInArtistCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInArtistCurrPage--;
                searchMusicInArtist.run();
            }
        });
        // 下一页按钮事件
        netArtistNextPageButton.addActionListener(e -> {
            Component lc = netArtistLeftBox.getComponent(netArtistLeftBox.getComponentCount() - 1);
            // 当前显示的是歌手列表，跳到下一页歌手
            if (lc == netArtistScrollPane || lc == emptyHintPanel) {
                if (netArtistCurrPage == netArtistMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netArtistCurrPage++;
                searchArtistGoPageAction.run();
            }
            // 当前显示的是某歌手的歌曲，跳到下一页歌曲
            else {
                if (netMusicInArtistCurrPage == netMusicInArtistMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInArtistCurrPage++;
                searchMusicInArtist.run();
            }
        });
        // 最后一页按钮事件
        netArtistEndPageButton.addActionListener(e -> {
            Component lc = netArtistLeftBox.getComponent(netArtistLeftBox.getComponentCount() - 1);
            // 当前显示的是歌手列表，跳到最后一页歌手
            if (lc == netArtistScrollPane || lc == emptyHintPanel) {
                if (netArtistCurrPage == netArtistMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netArtistCurrPage = netArtistMaxPage;
                searchArtistGoPageAction.run();
            }
            // 当前显示的是某歌手的歌曲，跳到最后一页歌曲
            else {
                if (netMusicInArtistCurrPage == netMusicInArtistMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInArtistCurrPage = netMusicInArtistMaxPage;
                searchMusicInArtist.run();
            }
        });
        // 跳页按钮事件
        netArtistGoButton.addActionListener(e -> {
            Component lc = netArtistLeftBox.getComponent(netArtistLeftBox.getComponentCount() - 1);
            // 当前显示的是歌手列表，跳页歌手
            if (lc == netArtistScrollPane || lc == emptyHintPanel) {
                String text = netArtistPageTextField.getText();
                netArtistPageTextField.setText("");
                if ("".equals(text)) return;
                int destPage = Integer.parseInt(text);
                if (destPage < 1 || destPage > netArtistMaxPage) {
                    new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                    return;
                }
                netArtistCurrPage = destPage;
                searchArtistGoPageAction.run();
            }
            // 当前显示的是某歌手的歌曲，跳页歌曲
            else {
                String text = netArtistPageTextField.getText();
                netArtistPageTextField.setText("");
                if ("".equals(text)) return;
                int destPage = Integer.parseInt(text);
                if (destPage < 1 || destPage > netMusicInArtistMaxPage) {
                    new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInArtistCurrPage = destPage;
                searchMusicInArtist.run();
            }
        });
        // 按钮被禁止的图标
        netArtistBackwardButton.setEnabled(false);
        // 按钮初始不可见
        netArtistClearInputButton.setVisible(false);
        netArtistPlayAllButton.setVisible(false);
        // 按钮大小限制
        Dimension dimension = new Dimension(20, 20);
        netArtistRefreshButton.setPreferredSize(dimension);
        netArtistStartPageButton.setPreferredSize(dimension);
        netArtistLastPageButton.setPreferredSize(dimension);
        netArtistGoButton.setPreferredSize(dimension);
        netArtistNextPageButton.setPreferredSize(dimension);
        netArtistEndPageButton.setPreferredSize(dimension);
        // 按钮悬浮与点击效果
        netArtistBackwardButton.addMouseListener(new ButtonMouseListener(netArtistBackwardButton, THIS));
        netArtistClearInputButton.addMouseListener(new ButtonMouseListener(netArtistClearInputButton, THIS));
        netArtistSearchButton.addMouseListener(new ButtonMouseListener(netArtistSearchButton, THIS));
        netArtistPlayAllButton.addMouseListener(new ButtonMouseListener(netArtistPlayAllButton, THIS));
        netArtistRefreshButton.addMouseListener(new ButtonMouseListener(netArtistRefreshButton, THIS));
        netArtistStartPageButton.addMouseListener(new ButtonMouseListener(netArtistStartPageButton, THIS));
        netArtistLastPageButton.addMouseListener(new ButtonMouseListener(netArtistLastPageButton, THIS));
        netArtistGoButton.addMouseListener(new ButtonMouseListener(netArtistGoButton, THIS));
        netArtistNextPageButton.addMouseListener(new ButtonMouseListener(netArtistNextPageButton, THIS));
        netArtistEndPageButton.addMouseListener(new ButtonMouseListener(netArtistEndPageButton, THIS));
        // 帮助提示
        netArtistBackwardButton.setToolTipText(BACKWARD_TIP);
        netArtistClearInputButton.setToolTipText(CLEAR_INPUT_TIP);
        netArtistSearchButton.setToolTipText(SEARCH_TIP);
        netArtistPlayAllButton.setToolTipText(PLAY_ALL_TIP);
        netArtistRefreshButton.setToolTipText(REFRESH_TIP);
        netArtistStartPageButton.setToolTipText(START_PAGE_TIP);
        netArtistLastPageButton.setToolTipText(LAST_PAGE_TIP);
        netArtistGoButton.setToolTipText(GO_TIP);
        netArtistNextPageButton.setToolTipText(NEXT_PAGE_TIP);
        netArtistEndPageButton.setToolTipText(END_PAGE_TIP);

        netArtistToolBar.add(netArtistBackwardButton);
        netArtistToolBar.add(netArtistSearchTextField);
        netArtistToolBar.add(netArtistClearInputButton);
        netArtistToolBar.add(netArtistSearchButton);
        netArtistLeftBox.add(netArtistToolBar);

        for (String name : NetMusicSource.names) netArtistSourceComboBox.addItem(name);
        netArtistSourceComboBox.addItemListener(e -> {
            // 避免事件被处理 2 次！
            if (e.getStateChange() != ItemEvent.SELECTED) return;
            netArtistCurrKeyword = netArtistSearchTextField.getText();
            netArtistCurrPage = 1;
            netArtistRefreshButton.doClick();
        });

        // 歌手数量和当前歌曲标签
        netArtistCountPanel.add(netArtistSourceComboBox);
        netArtistCountPanel.add(netArtistPlayAllButton);
        netArtistCountPanel.add(netArtistStartPageButton);
        netArtistCountPanel.add(netArtistLastPageButton);
        netArtistCountPanel.add(netArtistCountLabel);
        netArtistCountPanel.add(netArtistNextPageButton);
        netArtistCountPanel.add(netArtistEndPageButton);
        netArtistCountPanel.add(netArtistRefreshButton);
        netArtistCountPanel.add(netArtistPageTextField);
        netArtistCountPanel.add(netArtistGoButton);
        netArtistCountPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netArtistCountPanel.setVisible(false);
        netArtistLeftBox.add(netArtistCountPanel);
    }

    // 初始化在线歌手列表
    private void netArtistListInit() {
        netArtistList.setModel(netArtistListModel);
        netArtistList.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int index = netArtistList.locationToIndex(e.getPoint());
                Rectangle bounds = netArtistList.getCellBounds(index, index);
                if (bounds == null) return;
                setHoverIndex(bounds.contains(e.getPoint()) ? index : -1);
            }

            private void setHoverIndex(int index) {
                TranslucentNetArtistListRenderer renderer = (TranslucentNetArtistListRenderer) netArtistList.getCellRenderer();
                if (renderer == null) return;
                int hoverIndex = renderer.getHoverIndex();
                if (hoverIndex == index) return;
                renderer.setHoverIndex(index);
                netArtistList.repaint();
            }
        });
        netArtistList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                TranslucentNetArtistListRenderer renderer = (TranslucentNetArtistListRenderer) netArtistList.getCellRenderer();
                if (renderer == null) return;
                renderer.setHoverIndex(-1);
                netArtistList.repaint();
            }
        });
        // 打开歌手
        Runnable openArtistAction = () -> {
            List<Future<?>> taskList = new LinkedList<>();
            loadingAndRun(() -> {
                NetArtistInfo artistInfo = netArtistList.getSelectedValue();
                // 加载封面图片和描述
                taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                    BufferedImage coverImg = ImageUtils.borderShadow(ImageUtils.dye(loadingImage, currUIStyle.getLabelColor()));
                    artistCoverAndNameLabel.setIcon(new ImageIcon(coverImg));
                    artistCoverAndNameLabel.setText(LOADING_MSG);
                    artistTagLabel.setText(LOADING_MSG);
                    artistDescriptionLabel.setText(LOADING_MSG);
                    GlobalExecutors.imageExecutor.execute(() -> {
                        try {
                            MusicServerUtils.fillArtistInfo(artistInfo);
                            artistCoverAndNameLabel.setText(StringUtils.textToHtml(artistInfo.getName()));
                            if (artistInfo.getTag() != null)
                                artistTagLabel.setText(StringUtils.textToHtml("".equals(artistInfo.getTag()) ? "" : artistInfo.getTag()));
                            if (artistInfo.getDescription() != null)
                                artistDescriptionLabel.setText(StringUtils.textToHtml(artistInfo.getDescription()));
                            if (artistInfo.hasCoverImg()) {
                                artistCoverAndNameLabel.setIcon(new ImageIcon(
                                        ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(artistInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                ));
                            } else {
                                artistInfo.setInvokeLater(() -> {
                                    artistCoverAndNameLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(artistInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                    netArtistList.repaint();
                                });
                            }
                        } catch (HttpException e) {
                            artistCoverAndNameLabel.setText(LOAD_FAILED);
                            artistTagLabel.setText(LOAD_FAILED);
                            artistDescriptionLabel.setText(LOAD_FAILED);
                        }
                    });
                }));


                taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                    try {
                        // 得到歌手的音乐信息
                        CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInArtist(
                                artistInfo.getId(), artistInfo.getSource(), limit, netMusicInArtistCurrPage = 1);
                        List<NetMusicInfo> musicInfos = result.data;
                        int total = result.total;
                        netMusicInArtistMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新歌手歌曲数量显示
//                            netCurrArtistLabel.setText(StringUtils.textToHtml(artistInfo.getName()));
                        netArtistCountLabel.setText(String.format(PAGINATION_MSG, netMusicInArtistCurrPage, netMusicInArtistMaxPage));
                        artistListCountBox.add(netArtistCountPanel);
                        artistListBox.add(artistListCountBox);
                        // 歌手列表切换到在线音乐列表
                        netMusicList.setModel(netMusicListForArtistModel);
                        netArtistLeftBox.remove(netArtistScrollPane);
                        netArtistLeftBox.add(artistListBox);
                        // 删除工具栏的搜索
                        netArtistToolBar.remove(netArtistSearchTextField);
                        netArtistToolBar.remove(netArtistClearInputButton);
                        netArtistToolBar.remove(netArtistSearchButton);
                        netArtistToolBar.remove(netArtistTitleLabel);
                        netArtistToolBar.add(Box.createHorizontalGlue());
                        // 添加数据建议弄到更新数量显示之后，不然可能会不显示！
                        netMusicList.setModel(emptyListModel);
                        netMusicListForArtistModel.clear();
                        musicInfos.forEach(musicInfo -> {
                            globalExecutor.submit(() -> updateCollection(musicInfo));
                            netMusicListForArtistModel.addElement(musicInfo);
                        });
                        netMusicList.setModel(netMusicListForArtistModel);
                        artistDescriptionScrollPane.getVerticalScrollBar().setValue(0);
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                        netArtistBackwardButton.setEnabled(true);
                        netArtistSourceComboBox.setVisible(false);
                        netArtistPlayAllButton.setVisible(true);
                        if (netMusicListForArtistModel.isEmpty()) {
                            artistListCountBox.remove(netMusicScrollPane);
                            artistListCountBox.add(emptyHintPanel);
                        } else {
                            artistListCountBox.remove(emptyHintPanel);
                            artistListCountBox.add(netMusicScrollPane);
                        }
                        // 切换后一定要刷新！
                        netArtistLeftBox.repaint();
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                }));

                taskList.forEach(task -> {
                    try {
                        task.get();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    } catch (ExecutionException e) {
                        e.printStackTrace();
                    }
                });
            });
        };
        netArtistList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    openArtistAction.run();
                }
            }
        });
        netArtistList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                // 鼠标左键双击打开歌手
                if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    openArtistAction.run();
                }
                // 右键弹出菜单
                else if (e.getButton() == MouseEvent.BUTTON3) {
                    if (netArtistList.getModel().getSize() != 0) {
                        // 得到鼠标光标所在的选项并选中
                        int index = netArtistList.locationToIndex(e.getPoint());
                        if (index == -1) return;
                        if (!netArtistList.isSelectedIndex(index)) netArtistList.setSelectedIndex(index);
                        if (hasBeenCollected(netArtistList.getSelectedValue())) {
                            netArtistCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                            netArtistCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);
                        } else {
                            netArtistCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, currUIStyle.getButtonColor()));
                            netArtistCollectMenuItem.setText(COLLECT_MENU_ITEM_TEXT);
                        }

                        netArtistPopupMenu.show(netArtistList, e.getX(), e.getY());
                    }
                }
            }
        });
        // 打开歌手
        netArtistOpenMenuItem.addActionListener(e -> {
            int index = tabbedPane.getSelectedIndex();
            if (index == TabIndex.NET_ARTIST) openArtistAction.run();
            else if (index == TabIndex.PERSONAL) openCollectionItemAction.run();
            else openRecommendItemAction.run();
        });
        // 播放全部
        netArtistPlayAllMenuItem.addActionListener(e -> {
            NetArtistInfo netArtistInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_ARTIST) netArtistInfo = netArtistList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netArtistInfo = (NetArtistInfo) collectionList.getSelectedValue();
            else netArtistInfo = (NetArtistInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInArtist(
                            netArtistInfo.getId(), netArtistInfo.getSource(), netArtistInfo.hasSongNum() ? netArtistInfo.getSongNum() : 10000, 1);
                    List<NetMusicInfo> musicInfos = result.data;
                    if (musicInfos.isEmpty()) {
                        new TipDialog(THIS, NO_MUSIC_MSG).showDialog();
                        return;
                    }
                    playQueue.setModel(emptyListModel);
                    playQueueModel.clear();
                    musicInfos.forEach(musicInfo -> {
                        globalExecutor.submit(() -> updateCollection(musicInfo));
                        playQueueModel.addElement(musicInfo);
                    });
                    playQueue.setModel(playQueueModel);
                    playQueue.setSelectedIndex(0);
                    playExecutor.submit(() -> playSelected(playQueue, true));
                } catch (Exception ex) {
                    new TipDialog(THIS, NO_MUSIC_MSG).showDialog();
                }
            });
        });
        // 收藏歌手
        netArtistCollectMenuItem.addActionListener(e -> {
            int index = tabbedPane.getSelectedIndex();
            CustomList list;
            if (index == TabIndex.NET_ARTIST) list = netArtistList;
            else if (index == TabIndex.PERSONAL) list = collectionList;
            else list = itemRecommendList;
            ListModel model = collectionList.getModel();
            boolean needRefresh = model == artistCollectionModel;
            if (netArtistCollectMenuItem.getText().equals(COLLECT_MENU_ITEM_TEXT)) {
                List values = list.getSelectedValuesList();
                if (needRefresh) collectionList.setModel(emptyListModel);
                for (int i = values.size() - 1; i >= 0; i--) {
                    Object o = values.get(i);
                    if (hasBeenCollected(o)) continue;
                    artistCollectionModel.add(0, o);
                }
                if (needRefresh) collectionList.setModel(model);
                new TipDialog(THIS, COLLECT_SUCCESS_MSG).showDialog();
            } else {
                List values = list.getSelectedValuesList();
                if (needRefresh) collectionList.setModel(emptyListModel);
                values.forEach(o -> {
                    if (list == collectionList || hasBeenCollected(o)) {
                        artistCollectionModel.removeElement(o);
                    }
                });
                if (needRefresh) collectionList.setModel(model);
                new TipDialog(THIS, CANCEL_COLLECTION_SUCCESS_MSG).showDialog();
            }
        });
        // 查看歌手专辑
        netArtistBrowseAlbumMenuItem.addActionListener(e -> {
            NetArtistInfo netArtistInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_ARTIST) netArtistInfo = netArtistList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netArtistInfo = (NetArtistInfo) collectionList.getSelectedValue();
            else netArtistInfo = (NetArtistInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForAlbum();
                    // 搜索歌手专辑并显示专辑列表
                    CommonResult<NetAlbumInfo> result = MusicServerUtils.getAlbumInfoInArtist(currAlbumArtistInfo = netArtistInfo, limit, netAlbumCurrPage = 1);
                    List<NetAlbumInfo> netAlbumInfos = result.data;
                    Integer total = result.total;
                    netAlbumMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netAlbumTitleLabel.setText(netArtistInfo.getName() + " 的专辑");
                    netAlbumToolBar.removeAll();
                    netAlbumToolBar.add(netAlbumBackwardButton);
                    netAlbumToolBar.add(Box.createHorizontalGlue());
                    netAlbumToolBar.add(netAlbumTitleLabel);
                    netAlbumToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netAlbumCountLabel.setText(String.format(PAGINATION_MSG, netAlbumCurrPage, netAlbumMaxPage));
                    netAlbumCountPanel.add(netAlbumCountLabel, netAlbumCountPanel.getComponentIndex(netAlbumCountLabel));
                    netAlbumLeftBox.add(netAlbumCountPanel);
                    netAlbumSourceComboBox.setVisible(false);
                    netAlbumPlayAllButton.setVisible(false);
                    netAlbumCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netAlbumList.setModel(emptyListModel);
                    netAlbumListModel.clear();
                    netAlbumInfos.forEach(albumInfo -> {
                        globalExecutor.submit(() -> updateCollection(albumInfo));
                        // 设置图片加载后重绘的事件
                        albumInfo.setInvokeLater(() -> {
                            netAlbumList.repaint();
                            collectionList.repaint();
                        });
                        netAlbumListModel.addElement(albumInfo);
                    });
                    netAlbumList.setModel(netAlbumListModel);
                    netAlbumBackwardButton.setEnabled(true);
                    netAlbumLeftBox.remove(netAlbumKeywordsPanelScrollPane);
                    if (netAlbumListModel.isEmpty()) {
                        netAlbumLeftBox.remove(netAlbumScrollPane);
                        netAlbumLeftBox.add(emptyHintPanel);
                    } else {
                        netAlbumLeftBox.remove(emptyHintPanel);
                        netAlbumLeftBox.add(netAlbumScrollPane);
                    }
                    netAlbumScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_ALBUM);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看歌手 MV
        netArtistBrowseMvMenuItem.addActionListener(e -> {
            NetArtistInfo netArtistInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_ARTIST) netArtistInfo = netArtistList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netArtistInfo = (NetArtistInfo) collectionList.getSelectedValue();
            else netArtistInfo = (NetArtistInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    // 网易云的 total 依赖于 mvNum 属性，需要先补全信息
                    if (!netArtistInfo.hasMvNum()) MusicServerUtils.fillArtistInfo(netArtistInfo);
                    clearRequestForMv();
                    // 搜索歌手 MV 并显示 MV 列表
                    CommonResult<NetMvInfo> result = MusicServerUtils.getMvInfoInArtist(currMvArtistInfo = netArtistInfo, limit, netMvCurrPage = 1);
                    List<NetMvInfo> netMvInfos = result.data;
                    Integer total = result.total;
                    netMvMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netMvTitleLabel.setText(netArtistInfo.getName() + " 的 MV");
                    netMvToolBar.removeAll();
                    netMvToolBar.add(netMvBackwardButton);
                    netMvToolBar.add(Box.createHorizontalGlue());
                    netMvToolBar.add(netMvTitleLabel);
                    netMvToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netMvCountLabel.setText(String.format(PAGINATION_MSG, netMvCurrPage, netMvMaxPage));
                    netMvCountPanel.setVisible(true);
                    netMvSortTypeComboBox.setVisible(false);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netMvList.setModel(emptyListModel);
                    netMvListModel.clear();
                    netMvInfos.forEach(mvInfo -> {
                        globalExecutor.submit(() -> updateCollection(mvInfo));
                        // 设置图片加载后重绘的事件
                        mvInfo.setInvokeLater(() -> {
                            updateRenderer(netMvList);
                            updateRenderer(collectionList);
                            netMvList.repaint();
                            collectionList.repaint();
                        });
                        netMvListModel.addElement(mvInfo);
                    });
                    netMvList.setModel(netMvListModel);
                    netMvBackwardButton.setEnabled(true);
                    netMvLeftBox.remove(netMvKeywordsPanelScrollPane);
                    if (netMvListModel.isEmpty()) {
                        netMvLeftBox.remove(netMvScrollPane);
                        netMvLeftBox.add(emptyHintPanel);
                    } else {
                        netMvLeftBox.remove(emptyHintPanel);
                        netMvLeftBox.add(netMvScrollPane);
                    }
                    netMvScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_MV);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看相似歌手
        netArtistSimilarArtistMenuItem.addActionListener(e -> {
            NetArtistInfo netArtistInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_ARTIST) netArtistInfo = netArtistList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netArtistInfo = (NetArtistInfo) collectionList.getSelectedValue();
            else netArtistInfo = (NetArtistInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForArtist();
                    // 搜索相似歌手
                    CommonResult<NetArtistInfo> result = MusicServerUtils.getSimilarArtists(currArtistArtistInfo = netArtistInfo, netArtistCurrPage = 1);
                    List<NetArtistInfo> netArtistInfos = result.data;
                    Integer total = result.total;
                    netArtistMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netArtistTitleLabel.setText(netArtistInfo.getName() + " 的相似歌手");
                    netArtistToolBar.removeAll();
                    netArtistToolBar.add(netArtistBackwardButton);
                    netArtistToolBar.add(Box.createHorizontalGlue());
                    netArtistToolBar.add(netArtistTitleLabel);
                    netArtistToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netArtistCountLabel.setText(String.format(PAGINATION_MSG, netArtistCurrPage, netArtistMaxPage));
                    netArtistCountPanel.add(netArtistCountLabel, netArtistCountPanel.getComponentIndex(netArtistCountLabel));
                    netArtistLeftBox.add(netArtistCountPanel);
                    netArtistSourceComboBox.setVisible(false);
                    netArtistPlayAllButton.setVisible(false);
                    netArtistCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netArtistList.setModel(emptyListModel);
                    netArtistListModel.clear();
                    netArtistInfos.forEach(artistInfo -> {
                        globalExecutor.submit(() -> updateCollection(artistInfo));
                        // 设置图片加载后重绘的事件
                        artistInfo.setInvokeLater(() -> {
                            netArtistList.repaint();
                            collectionList.repaint();
                        });
                        netArtistListModel.addElement(artistInfo);
                    });
                    netArtistList.setModel(netArtistListModel);
                    netArtistBackwardButton.setEnabled(true);
                    netArtistLeftBox.remove(netArtistKeywordsPanelScrollPane);
                    if (netArtistListModel.isEmpty()) {
                        netArtistLeftBox.remove(netArtistScrollPane);
                        netArtistLeftBox.add(emptyHintPanel);
                    } else {
                        netArtistLeftBox.remove(emptyHintPanel);
                        netArtistLeftBox.add(netArtistScrollPane);
                    }
                    netArtistScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_ARTIST);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看歌手粉丝
        netArtistFansMenuItem.addActionListener(e -> {
            NetArtistInfo netArtistInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_ARTIST) netArtistInfo = netArtistList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netArtistInfo = (NetArtistInfo) collectionList.getSelectedValue();
            else netArtistInfo = (NetArtistInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForUser();
                    // 获取歌手粉丝
                    currUserArtistInfo = netArtistInfo;
                    CommonResult<NetUserInfo> result = MusicServerUtils.getArtistFans(netArtistInfo, limit, netUserCurrPage = 1);
                    List<NetUserInfo> netUserInfos = result.data;
                    Integer total = result.total;
                    netUserMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netUserTitleLabel.setText(netArtistInfo.getName() + " 的粉丝");
                    netUserToolBar.removeAll();
                    netUserToolBar.add(netUserBackwardButton);
                    netUserToolBar.add(Box.createHorizontalGlue());
                    netUserToolBar.add(netUserTitleLabel);
                    netUserToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netUserCountLabel.setText(String.format(PAGINATION_MSG, netUserCurrPage, netUserMaxPage));
                    netUserCountPanel.add(netUserCountLabel, netUserCountPanel.getComponentIndex(netUserCountLabel));
                    netUserLeftBox.add(netUserCountPanel);
                    netUserSourceComboBox.setVisible(false);
                    netUserPlayAllButton.setVisible(false);
                    netUserRecordTypeComboBox.setVisible(false);
                    netUserCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netUserList.setModel(emptyListModel);
                    netUserListModel.clear();
                    netUserInfos.forEach(userInfo -> {
                        globalExecutor.submit(() -> updateCollection(userInfo));
                        // 设置图片加载后重绘的事件
                        userInfo.setInvokeLater(() -> {
                            updateRenderer(netUserList);
                            updateRenderer(collectionList);
                            netUserList.repaint();
                            collectionList.repaint();
                        });
                        netUserListModel.addElement(userInfo);
                    });
                    netUserList.setModel(netUserListModel);
                    netUserBackwardButton.setEnabled(true);
                    netUserLeftBox.remove(netUserKeywordsPanelScrollPane);
                    if (netUserListModel.isEmpty()) {
                        netUserLeftBox.remove(netUserScrollPane);
                        netUserLeftBox.add(emptyHintPanel);
                    } else {
                        netUserLeftBox.remove(emptyHintPanel);
                        netUserLeftBox.add(netUserScrollPane);
                    }
                    netUserScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_USER);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看歌手合作人
        netArtistBuddyMenuItem.addActionListener(e -> {
            NetArtistInfo netArtistInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_ARTIST) netArtistInfo = netArtistList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netArtistInfo = (NetArtistInfo) collectionList.getSelectedValue();
            else netArtistInfo = (NetArtistInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForArtist();
                    // 搜索歌手合作人
                    CommonResult<NetArtistInfo> result = MusicServerUtils.getArtistBuddies(currBuddyArtistInfo = netArtistInfo, netArtistCurrPage = 1, limit);
                    List<NetArtistInfo> netArtistInfos = result.data;
                    Integer total = result.total;
                    netArtistMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netArtistTitleLabel.setText(netArtistInfo.getName() + " 的合作人");
                    netArtistToolBar.removeAll();
                    netArtistToolBar.add(netArtistBackwardButton);
                    netArtistToolBar.add(Box.createHorizontalGlue());
                    netArtistToolBar.add(netArtistTitleLabel);
                    netArtistToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netArtistCountLabel.setText(String.format(PAGINATION_MSG, netArtistCurrPage, netArtistMaxPage));
                    netArtistCountPanel.add(netArtistCountLabel, netArtistCountPanel.getComponentIndex(netArtistCountLabel));
                    netArtistLeftBox.add(netArtistCountPanel);
                    netArtistSourceComboBox.setVisible(false);
                    netArtistPlayAllButton.setVisible(false);
                    netArtistCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netArtistList.setModel(emptyListModel);
                    netArtistListModel.clear();
                    netArtistInfos.forEach(artistInfo -> {
                        globalExecutor.submit(() -> updateCollection(artistInfo));
                        // 设置图片加载后重绘的事件
                        artistInfo.setInvokeLater(() -> {
                            updateRenderer(netArtistList);
                            updateRenderer(collectionList);
                            netArtistList.repaint();
                            collectionList.repaint();
                        });
                        netArtistListModel.addElement(artistInfo);
                    });
                    netArtistList.setModel(netArtistListModel);
                    netArtistBackwardButton.setEnabled(true);
                    netArtistLeftBox.remove(netArtistKeywordsPanelScrollPane);
                    if (netArtistListModel.isEmpty()) {
                        netArtistLeftBox.remove(netArtistScrollPane);
                        netArtistLeftBox.add(emptyHintPanel);
                    } else {
                        netArtistLeftBox.remove(emptyHintPanel);
                        netArtistLeftBox.add(netArtistScrollPane);
                    }
                    netArtistScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_ARTIST);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看歌手电台
        netArtistRadiosMenuItem.addActionListener(e -> {
            NetArtistInfo netArtistInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_ARTIST) netArtistInfo = netArtistList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netArtistInfo = (NetArtistInfo) collectionList.getSelectedValue();
            else netArtistInfo = (NetArtistInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForRadio();
                    // 搜索用户电台
                    CommonResult<NetRadioInfo> result = MusicServerUtils.getArtistRadios(currRadioArtistInfo = netArtistInfo, netRadioCurrPage = 1, limit);
                    List<NetRadioInfo> netRadioInfos = result.data;
                    int total = result.total;
                    netRadioMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netRadioTitleLabel.setText(netArtistInfo.getName() + " 的电台");
                    netRadioToolBar.removeAll();
                    netRadioToolBar.add(netRadioBackwardButton);
                    netRadioToolBar.add(Box.createHorizontalGlue());
                    netRadioToolBar.add(netRadioTitleLabel);
                    netRadioToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netRadioCountLabel.setText(String.format(PAGINATION_MSG, netRadioCurrPage, netRadioMaxPage));
                    netRadioCountPanel.add(netRadioCountLabel, netRadioCountPanel.getComponentIndex(netRadioCountLabel));
                    netRadioLeftBox.add(netRadioCountPanel);
                    netRadioSourceComboBox.setVisible(false);
                    netRadioPlayAllButton.setVisible(false);
                    netRadioCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netRadioList.setModel(emptyListModel);
                    netRadioListModel.clear();
                    netRadioInfos.forEach(radioInfo -> {
                        globalExecutor.submit(() -> updateCollection(radioInfo));
                        // 设置图片加载后重绘的事件
                        radioInfo.setInvokeLater(() -> {
                            updateRenderer(netRadioList);
                            updateRenderer(collectionList);
                            netRadioList.repaint();
                            collectionList.repaint();
                        });
                        netRadioListModel.addElement(radioInfo);
                    });
                    netRadioList.setModel(netRadioListModel);
                    netRadioBackwardButton.setEnabled(true);
                    netRadioLeftBox.remove(netRadioKeywordsPanelScrollPane);
                    if (netRadioListModel.isEmpty()) {
                        netRadioLeftBox.remove(netRadioScrollPane);
                        netRadioLeftBox.add(emptyHintPanel);
                    } else {
                        netRadioLeftBox.remove(emptyHintPanel);
                        netRadioLeftBox.add(netRadioScrollPane);
                    }
                    netRadioScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_RADIO);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看歌手照片
        netArtistPhotosMenuItem.addActionListener(e -> {
            NetArtistInfo netArtistInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_ARTIST) netArtistInfo = netArtistList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netArtistInfo = (NetArtistInfo) collectionList.getSelectedValue();
            else netArtistInfo = (NetArtistInfo) itemRecommendList.getSelectedValue();
            try {
//                CommonResult<String> results = MusicServerUtils.getArtistImgUrls(netArtistInfo, 1);
//                List<String> imgUrls = results.data;
//                Integer total = results.total;
                imageViewDialog = new ImageViewDialog(THIS, 30) {
                    @Override
                    public CommonResult<String> requestImgUrls(int pn, int limit, String cursor) {
                        return MusicServerUtils.getArtistImgUrls(netArtistInfo, pn);
                    }

                    @Override
                    public void requestFailed() {
                        new TipDialog(THIS, NO_IMG_MSG).showDialog();
                    }
                };
                imageViewDialog.showDialog();
                imageViewDialog = null;
            } catch (IORuntimeException ioRuntimeException) {
                // 无网络连接
                new TipDialog(THIS, NO_NET_MSG).showDialog();
            } catch (HttpException httpException) {
                // 请求超时
                new TipDialog(THIS, TIME_OUT_MSG).showDialog();
            } catch (JSONException jsonException) {
                // 接口异常
                new TipDialog(THIS, API_ERROR_MSG).showDialog();
            }
        });
        // 复制名称
        netArtistCopyNameMenuItem.addActionListener(e -> {
            Object o;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_ARTIST) o = netArtistList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL) o = collectionList.getSelectedValue();
            else o = itemRecommendList.getSelectedValue();
            StringSelection stringSelection = new StringSelection(((NetArtistInfo) o).toSimpleString());
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });
        // 歌手右键菜单项
        netArtistPopupMenu.add(netArtistOpenMenuItem);
        netArtistPopupMenu.add(netArtistPlayAllMenuItem);
        netArtistPopupMenu.add(netArtistCollectMenuItem);
        netArtistPopupMenu.add(netArtistBrowseAlbumMenuItem);
        netArtistPopupMenu.add(netArtistBrowseMvMenuItem);
        netArtistPopupMenu.add(netArtistSimilarArtistMenuItem);
        netArtistPopupMenu.add(netArtistFansMenuItem);
        netArtistPopupMenu.add(netArtistBuddyMenuItem);
        netArtistPopupMenu.add(netArtistRadiosMenuItem);
        netArtistPopupMenu.add(netArtistPhotosMenuItem);
        netArtistPopupMenu.add(netArtistCopyNameMenuItem);

        // 搜索历史面板
        // 清空搜索历史按钮
        netArtistClearHistorySearchButton.addActionListener(e -> {
            netArtistHistorySearchInnerPanel2.removeAll();
            netArtistKeywordsPanel.remove(netArtistHistorySearchPanel);
            netArtistKeywordsPanel.repaint();
        });
        netArtistClearHistorySearchButton.setPreferredSize(new Dimension(20, 20));
        netArtistClearHistorySearchButton.setToolTipText(CLEAR_HISTORY_SEARCH_TIP);
        netArtistClearHistorySearchButton.addMouseListener(new ButtonMouseListener(netArtistClearHistorySearchButton, THIS));

        netArtistHistorySearchInnerPanel1.add(netArtistHistorySearchLabel);
        netArtistHistorySearchInnerPanel1.add(netArtistClearHistorySearchButton);
        netArtistHistorySearchInnerPanel1.setLayout(new FlowLayout(FlowLayout.LEFT));
        netArtistHistorySearchInnerPanel1.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        netArtistHistorySearchInnerPanel1.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netArtistHistorySearchInnerPanel2.setLayout(new FlowLayout(FlowLayout.LEFT));
        netArtistHistorySearchInnerPanel2.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        netArtistHistorySearchPanel.setLayout(new BoxLayout(netArtistHistorySearchPanel, BoxLayout.Y_AXIS));
        netArtistHistorySearchPanel.add(netArtistHistorySearchInnerPanel1);
        netArtistHistorySearchPanel.add(netArtistHistorySearchInnerPanel2);
        // 关键词面板
        netArtistKeywordsPanel.setLayout(new BoxLayout(netArtistKeywordsPanel, BoxLayout.Y_AXIS));
//        // 滚动条监听器
//        netArtistKeywordsPanelScrollPane.addMouseListener(new ScrollPaneListener(netArtistKeywordsPanelScrollPane, THIS));

        // 同时限制面板与滚动条的大小才能保证按钮不超出窗口！！！
        Dimension d = new Dimension(900, 500);
        netArtistKeywordsPanel.setPreferredSize(d);
        netArtistKeywordsPanelScrollPane.setPreferredSize(d);

        // 歌手最佳大小
        netArtistScrollPane.setPreferredSize(new Dimension(200, 600));
        netArtistLeftBox.add(netArtistScrollPane);
    }

    // 初始化电台工具栏
    private void netRadioToolBarInit() {
        netRadioSearchTextField.addFocusListener(new TextFieldHintListener(netRadioSearchTextField, "电台", currUIStyle.getForeColor()));
        netRadioSearchTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                if (netRadioSearchTextField.isOccupied()) {
                    netRadioClearInputButton.setVisible(true);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if (netRadioSearchTextField.getText().equals("")) netRadioClearInputButton.setVisible(false);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });
        // 只能输入数字
        netRadioPageTextField.setDocument(new SafeDocument(0, Integer.MAX_VALUE));
        // 后退按钮事件
        netRadioBackwardButton.addActionListener(e -> {
            int lastComponentIndex = netRadioLeftBox.getComponentCount() - 1;
            Component c = netRadioLeftBox.getComponent(lastComponentIndex);
            if (c != netRadioScrollPane && c != emptyHintPanel) {
                netMusicListForRadioModel.clear();
                // 从在线音乐列表切换回用户列表
                netRadioPlayAllButton.setVisible(false);
                netRadioLeftBox.remove(radioListBox);
                netRadioLeftBox.add(netRadioCountPanel);
                netRadioLeftBox.add(netRadioScrollPane);
                // 添加回工具栏的搜索
                netRadioToolBar.remove(1);
                netRadioToolBar.add(netRadioSearchTextField);
                netRadioToolBar.add(netRadioClearInputButton);
                netRadioToolBar.add(netRadioSearchButton);
                // 添加回工具栏的搜索/标题
                netRadioToolBar.removeAll();
                netRadioToolBar.add(netRadioBackwardButton);
                if (currRadioUserInfo == null
                        && currRadioMusicInfo == null
                        && currRecRadioMusicInfo == null
                        && currRadioArtistInfo == null
                        && currRadioRadioInfo == null) {
                    // 删除标题标签
                    netRadioToolBar.add(netRadioSearchTextField);
                    netRadioToolBar.add(netRadioClearInputButton);
                    netRadioToolBar.add(netRadioSearchButton);
                    netRadioSourceComboBox.setVisible(true);
                } else {
                    netRadioToolBar.add(Box.createHorizontalGlue());
                    netRadioToolBar.add(netRadioTitleLabel);
                    netRadioToolBar.add(Box.createHorizontalGlue());
                }
                // 更新用户歌曲数量显示
//                netCurrRadioLabel.setText("");
                netRadioCountLabel.setText(String.format(PAGINATION_MSG, netRadioCurrPage, netRadioMaxPage));
//                netRadioBackwardButton.setEnabled(false);
            }
            // 后退到关键词面板
            else {
                // 删除标题标签
                netRadioToolBar.removeAll();
                netRadioToolBar.add(netRadioBackwardButton);
                netRadioToolBar.add(netRadioSearchTextField);
                netRadioToolBar.add(netRadioClearInputButton);
                netRadioToolBar.add(netRadioSearchButton);
                clearRequestForRadio();

                netRadioListModel.clear();
                netRadioCountPanel.setVisible(false);
                netRadioLeftBox.remove(emptyHintPanel);
                netRadioLeftBox.remove(netRadioScrollPane);
                netRadioLeftBox.add(netRadioKeywordsPanelScrollPane);
                netRadioBackwardButton.setEnabled(false);
            }
            // 切换后一定要刷新！
            netRadioLeftBox.repaint();
        });
        // 清除输入事件
        netRadioClearInputButton.addActionListener(e -> {
            netRadioSearchTextField.requestFocus();
            netRadioSearchTextField.setText("");
            netRadioBackwardButton.requestFocus();
        });
        // 搜索电台按钮事件
        netRadioSearchButton.addActionListener(e -> {
            netRadioCurrKeyword = netRadioSearchTextField.getText();
            if (!netRadioCurrKeyword.equals("")) {
                // 关键词加入搜索历史
                DialogButton b = new DialogButton(netRadioCurrKeyword);
                b.addActionListener(event -> {
                    netRadioSearchTextField.requestFocus();
                    netRadioSearchTextField.setText(b.getText());
                    netRadioClearInputButton.setVisible(true);
                    netRadioLeftBox.remove(netRadioKeywordsPanelScrollPane);
                    netRadioLeftBox.add(netRadioScrollPane);
                    netRadioSearchButton.doClick();
                });
                // 右击删除历史
                b.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.getButton() == MouseEvent.BUTTON3) {
                            netRadioHistorySearchInnerPanel2.remove(b);
                            netRadioHistorySearchInnerPanel2.repaint();
                            if (netRadioHistorySearchInnerPanel2.getComponentCount() == 0) {
                                netRadioKeywordsPanel.remove(netRadioHistorySearchPanel);
                                netRadioKeywordsPanel.repaint();
                            }
                        }
                    }
                });
                b.setToolTipText(REMOVE_HISTORY_KEYWORD_TIP);
                b.setForeColor(currUIStyle.getButtonColor());
                // 先删除重复的关键词
                removeKeywordInHistorySearch(netRadioCurrKeyword, HistorySearchType.NET_RADIO);
                netRadioHistorySearchInnerPanel2.add(b, 0);
                // 删除超出上限的最后一个关键词
                int c = netRadioHistorySearchInnerPanel2.getComponentCount();
                if (c > maxSearchHistoryCount)
                    netRadioHistorySearchInnerPanel2.remove(c - 1);
                // 显示 “搜索历史” 面板
                netRadioKeywordsPanel.add(netRadioHistorySearchPanel);
                // 更新 LAF，防止按钮样式不正确
                SwingUtilities.updateComponentTreeUI(netRadioClearHistorySearchButton);
                netRadioHistorySearchPanel.repaint();

                loadingAndRun(() -> {
                    try {
                        // 搜索电台并显示电台列表
                        CommonResult<NetRadioInfo> result = MusicServerUtils.searchRadios(
                                netRadioSourceComboBox.getSelectedIndex(), netRadioCurrKeyword, limit, netRadioCurrPage = 1);
                        List<NetRadioInfo> netRadioInfos = result.data;
                        Integer total = result.total;
                        netRadioMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netRadioCountLabel.setText(String.format(PAGINATION_MSG, netRadioCurrPage, netRadioMaxPage));
                        netRadioCountPanel.add(netRadioCountLabel, netRadioCountPanel.getComponentIndex(netRadioCountLabel));
                        netRadioCountPanel.setVisible(true);
                        netRadioSourceComboBox.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netRadioList.setModel(emptyListModel);
                        netRadioListModel.clear();
                        netRadioInfos.forEach(radioInfo -> {
                            globalExecutor.submit(() -> updateCollection(radioInfo));
                            // 设置图片加载后重绘的事件
                            radioInfo.setInvokeLater(() -> {
                                updateRenderer(netRadioList);
                                updateRenderer(collectionList);
                                netRadioList.repaint();
                                collectionList.repaint();
                            });
                            netRadioListModel.addElement(radioInfo);
                        });
                        netRadioList.setModel(netRadioListModel);
                        netRadioBackwardButton.setEnabled(true);
                        netRadioLeftBox.remove(netRadioKeywordsPanelScrollPane);
                        if (netRadioListModel.isEmpty()) {
                            netRadioLeftBox.remove(netRadioScrollPane);
                            netRadioLeftBox.add(emptyHintPanel);
                        } else {
                            netRadioLeftBox.remove(emptyHintPanel);
                            netRadioLeftBox.add(netRadioScrollPane);
                        }
                        netRadioScrollPane.getVerticalScrollBar().setValue(0);
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        });
        // 搜索电台跳页事件
        Runnable searchRadioGoPageAction = () -> {
            boolean songRequest = currRadioMusicInfo != null, songRecRequest = currRecRadioMusicInfo != null, userRequest = currRadioUserInfo != null,
                    artistRequest = currRadioArtistInfo != null, radioRequest = currRadioRadioInfo != null;
            if (userRequest || artistRequest || radioRequest || songRequest || songRecRequest || StringUtils.isNotEmpty(netRadioCurrKeyword)) {
                loadingAndRun(() -> {
                    try {
                        // 搜索电台并显示电台列表
                        CommonResult<NetRadioInfo> result = userRequest ? MusicServerUtils.getUserRadios(currRadioUserInfo, limit, netRadioCurrPage)
                                : artistRequest ? MusicServerUtils.getArtistRadios(currRadioArtistInfo, netRadioCurrPage, limit)
                                : radioRequest ? MusicServerUtils.getSimilarRadios(currRadioRadioInfo)
                                : songRequest ? MusicServerUtils.getRadioInfo(currRadioMusicInfo.getAlbumId(), currRadioMusicInfo.getSource())
                                : songRecRequest ? MusicServerUtils.getRecRadios(currRecRadioMusicInfo)
                                : MusicServerUtils.searchRadios(netRadioSourceComboBox.getSelectedIndex(), netRadioCurrKeyword, limit, netRadioCurrPage);
                        List<NetRadioInfo> netRadioInfos = result.data;
                        Integer total = result.total;
                        netRadioMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netRadioCountLabel.setText(String.format(PAGINATION_MSG, netRadioCurrPage, netRadioMaxPage));
                        netRadioCountPanel.add(netRadioCountLabel, netRadioCountPanel.getComponentIndex(netRadioCountLabel));
                        netRadioCountPanel.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netRadioList.setModel(emptyListModel);
                        netRadioListModel.clear();
                        netRadioInfos.forEach(radioInfo -> {
                            globalExecutor.submit(() -> updateCollection(radioInfo));
                            // 设置图片加载后重绘的事件
                            radioInfo.setInvokeLater(() -> {
                                updateRenderer(netRadioList);
                                updateRenderer(collectionList);
                                netRadioList.repaint();
                                collectionList.repaint();
                                netRadioScrollPane.getViewport().add(netRadioList);
                            });
                            netRadioListModel.addElement(radioInfo);
                        });
                        netRadioList.setModel(netRadioListModel);
                        netRadioScrollPane.getVerticalScrollBar().setValue(0);
                        if (netRadioListModel.isEmpty()) {
                            netRadioLeftBox.remove(netRadioScrollPane);
                            netRadioLeftBox.add(emptyHintPanel);
                        } else {
                            netRadioLeftBox.remove(emptyHintPanel);
                            netRadioLeftBox.add(netRadioScrollPane);
                        }
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        };
        // 搜索电台内歌曲并显示在在线播放列表
        Runnable searchMusicInRadio = () -> {
            if (!netMusicListForRadioModel.isEmpty()) {
                loadingAndRun(() -> {
                    try {
                        NetRadioInfo radioInfo = netRadioList.getSelectedValue();
                        CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInRadio(radioInfo, limit, netMusicInRadioCurrPage);
                        List<NetMusicInfo> musicInfos = result.data;
                        Integer total = result.total;
                        netMusicInRadioMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netRadioCountLabel.setText(String.format(PAGINATION_MSG, netMusicInRadioCurrPage, netMusicInRadioMaxPage));
                        netRadioCountPanel.add(netRadioCountLabel, netRadioCountPanel.getComponentIndex(netRadioCountLabel));
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netMusicList.setModel(emptyListModel);
                        netMusicListForRadioModel.clear();
                        musicInfos.forEach(musicInfo -> {
                            globalExecutor.submit(() -> updateCollection(musicInfo));
                            netMusicListForRadioModel.addElement(musicInfo);
                        });
                        netMusicList.setModel(netMusicListForRadioModel);
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                        if (netMusicListForRadioModel.isEmpty()) {
                            radioListCountBox.remove(netMusicScrollPane);
                            radioListCountBox.add(emptyHintPanel);
                        } else {
                            radioListCountBox.remove(emptyHintPanel);
                            radioListCountBox.add(netMusicScrollPane);
                        }
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        };
        // 播放全部
        netRadioPlayAllButton.addActionListener(e -> netRadioPlayAllMenuItem.doClick());
        // 刷新按钮事件
        netRadioRefreshButton.addActionListener(e -> {
            Component lc = netRadioLeftBox.getComponent(netRadioLeftBox.getComponentCount() - 1);
            // 当前显示的是电台列表，刷新电台
            if (lc == netRadioScrollPane || lc == emptyHintPanel) {
                searchRadioGoPageAction.run();
            }
            // 当前显示的是某电台的歌曲，刷新歌曲
            else {
                searchMusicInRadio.run();
            }
        });
        // 第一页按钮事件
        netRadioStartPageButton.addActionListener(e -> {
            Component lc = netRadioLeftBox.getComponent(netRadioLeftBox.getComponentCount() - 1);
            // 当前显示的是电台列表，跳到第一页电台
            if (lc == netRadioScrollPane || lc == emptyHintPanel) {
                if (netRadioCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netRadioCurrPage = 1;
                searchRadioGoPageAction.run();
            }
            // 当前显示的是某电台的歌曲，跳到第一页歌曲
            else {
                if (netMusicInRadioCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInRadioCurrPage = 1;
                searchMusicInRadio.run();
            }
        });
        // 上一页按钮事件
        netRadioLastPageButton.addActionListener(e -> {
            Component lc = netRadioLeftBox.getComponent(netRadioLeftBox.getComponentCount() - 1);
            // 当前显示的是电台列表，跳到上一页电台
            if (lc == netRadioScrollPane || lc == emptyHintPanel) {
                if (netRadioCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netRadioCurrPage--;
                searchRadioGoPageAction.run();
            }
            // 当前显示的是某电台的歌曲，跳到上一页歌曲
            else {
                if (netMusicInRadioCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInRadioCurrPage--;
                searchMusicInRadio.run();
            }
        });
        // 下一页按钮事件
        netRadioNextPageButton.addActionListener(e -> {
            Component lc = netRadioLeftBox.getComponent(netRadioLeftBox.getComponentCount() - 1);
            // 当前显示的是电台列表，跳到下一页电台
            if (lc == netRadioScrollPane || lc == emptyHintPanel) {
                if (netRadioCurrPage == netRadioMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netRadioCurrPage++;
                searchRadioGoPageAction.run();
            }
            // 当前显示的是某电台的歌曲，跳到下一页歌曲
            else {
                if (netMusicInRadioCurrPage == netMusicInRadioMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInRadioCurrPage++;
                searchMusicInRadio.run();
            }
        });
        // 最后一页按钮事件
        netRadioEndPageButton.addActionListener(e -> {
            Component lc = netRadioLeftBox.getComponent(netRadioLeftBox.getComponentCount() - 1);
            // 当前显示的是电台列表，跳到最后一页电台
            if (lc == netRadioScrollPane || lc == emptyHintPanel) {
                if (netRadioCurrPage == netRadioMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netRadioCurrPage = netRadioMaxPage;
                searchRadioGoPageAction.run();
            }
            // 当前显示的是某电台的歌曲，跳到最后一页歌曲
            else {
                if (netMusicInRadioCurrPage == netMusicInRadioMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInRadioCurrPage = netMusicInRadioMaxPage;
                searchMusicInRadio.run();
            }
        });
        // 跳页按钮事件
        netRadioGoButton.addActionListener(e -> {
            Component lc = netRadioLeftBox.getComponent(netRadioLeftBox.getComponentCount() - 1);
            // 当前显示的是电台列表，跳页电台
            if (lc == netRadioScrollPane || lc == emptyHintPanel) {
                String text = netRadioPageTextField.getText();
                netRadioPageTextField.setText("");
                if ("".equals(text)) return;
                int destPage = Integer.parseInt(text);
                if (destPage < 1 || destPage > netRadioMaxPage) {
                    new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                    return;
                }
                netRadioCurrPage = destPage;
                searchRadioGoPageAction.run();
            }
            // 当前显示的是某电台的歌曲，跳页歌曲
            else {
                String text = netRadioPageTextField.getText();
                netRadioPageTextField.setText("");
                if ("".equals(text)) return;
                int destPage = Integer.parseInt(text);
                if (destPage < 1 || destPage > netMusicInRadioMaxPage) {
                    new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInRadioCurrPage = destPage;
                searchMusicInRadio.run();
            }
        });
        // 按钮被禁止的图标
        netRadioBackwardButton.setEnabled(false);
        // 按钮初始不可见
        netRadioClearInputButton.setVisible(false);
        netRadioPlayAllButton.setVisible(false);
        // 按钮大小限制
        Dimension dimension = new Dimension(20, 20);
        netRadioRefreshButton.setPreferredSize(dimension);
        netRadioStartPageButton.setPreferredSize(dimension);
        netRadioLastPageButton.setPreferredSize(dimension);
        netRadioGoButton.setPreferredSize(dimension);
        netRadioNextPageButton.setPreferredSize(dimension);
        netRadioEndPageButton.setPreferredSize(dimension);
        // 按钮悬浮与点击效果
        netRadioBackwardButton.addMouseListener(new ButtonMouseListener(netRadioBackwardButton, THIS));
        netRadioClearInputButton.addMouseListener(new ButtonMouseListener(netRadioClearInputButton, THIS));
        netRadioSearchButton.addMouseListener(new ButtonMouseListener(netRadioSearchButton, THIS));
        netRadioPlayAllButton.addMouseListener(new ButtonMouseListener(netRadioPlayAllButton, THIS));
        netRadioRefreshButton.addMouseListener(new ButtonMouseListener(netRadioRefreshButton, THIS));
        netRadioStartPageButton.addMouseListener(new ButtonMouseListener(netRadioStartPageButton, THIS));
        netRadioLastPageButton.addMouseListener(new ButtonMouseListener(netRadioLastPageButton, THIS));
        netRadioGoButton.addMouseListener(new ButtonMouseListener(netRadioGoButton, THIS));
        netRadioNextPageButton.addMouseListener(new ButtonMouseListener(netRadioNextPageButton, THIS));
        netRadioEndPageButton.addMouseListener(new ButtonMouseListener(netRadioEndPageButton, THIS));
        // 帮助提示
        netRadioBackwardButton.setToolTipText(BACKWARD_TIP);
        netRadioClearInputButton.setToolTipText(CLEAR_INPUT_TIP);
        netRadioSearchButton.setToolTipText(SEARCH_TIP);
        netRadioPlayAllButton.setToolTipText(PLAY_ALL_TIP);
        netRadioRefreshButton.setToolTipText(REFRESH_TIP);
        netRadioStartPageButton.setToolTipText(START_PAGE_TIP);
        netRadioLastPageButton.setToolTipText(LAST_PAGE_TIP);
        netRadioGoButton.setToolTipText(GO_TIP);
        netRadioNextPageButton.setToolTipText(NEXT_PAGE_TIP);
        netRadioEndPageButton.setToolTipText(END_PAGE_TIP);

        netRadioToolBar.add(netRadioBackwardButton);
        netRadioToolBar.add(netRadioSearchTextField);
        netRadioToolBar.add(netRadioClearInputButton);
        netRadioToolBar.add(netRadioSearchButton);
        netRadioLeftBox.add(netRadioToolBar);

        for (String name : NetMusicSource.names) netRadioSourceComboBox.addItem(name);
        netRadioSourceComboBox.addItemListener(e -> {
            // 避免事件被处理 2 次！
            if (e.getStateChange() != ItemEvent.SELECTED) return;
            netRadioCurrKeyword = netRadioSearchTextField.getText();
            netRadioCurrPage = 1;
            netRadioRefreshButton.doClick();
        });

        // 电台数量和当前歌曲标签
        netRadioCountPanel.add(netRadioSourceComboBox);
        netRadioCountPanel.add(netRadioPlayAllButton);
        netRadioCountPanel.add(netRadioStartPageButton);
        netRadioCountPanel.add(netRadioLastPageButton);
        netRadioCountPanel.add(netRadioCountLabel);
        netRadioCountPanel.add(netRadioNextPageButton);
        netRadioCountPanel.add(netRadioEndPageButton);
        netRadioCountPanel.add(netRadioRefreshButton);
        netRadioCountPanel.add(netRadioPageTextField);
        netRadioCountPanel.add(netRadioGoButton);
        netRadioCountPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netRadioCountPanel.setVisible(false);
        netRadioLeftBox.add(netRadioCountPanel);
    }

    // 初始化在线电台列表
    private void netRadioListInit() {
        netRadioList.setModel(netRadioListModel);
        netRadioList.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int index = netRadioList.locationToIndex(e.getPoint());
                Rectangle bounds = netRadioList.getCellBounds(index, index);
                if (bounds == null) return;
                setHoverIndex(bounds.contains(e.getPoint()) ? index : -1);
            }

            private void setHoverIndex(int index) {
                TranslucentNetRadioListRenderer renderer = (TranslucentNetRadioListRenderer) netRadioList.getCellRenderer();
                if (renderer == null) return;
                int hoverIndex = renderer.getHoverIndex();
                if (hoverIndex == index) return;
                renderer.setHoverIndex(index);
                netRadioList.repaint();
            }
        });
        netRadioList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                TranslucentNetRadioListRenderer renderer = (TranslucentNetRadioListRenderer) netRadioList.getCellRenderer();
                if (renderer == null) return;
                renderer.setHoverIndex(-1);
                netRadioList.repaint();
            }
        });
        // 打开电台
        Runnable openRadioAction = () -> {
            List<Future<?>> taskList = new LinkedList<>();
            loadingAndRun(() -> {
                NetRadioInfo radioInfo = netRadioList.getSelectedValue();
                // 加载封面图片和描述
                taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                    BufferedImage coverImg = ImageUtils.borderShadow(ImageUtils.dye(loadingImage, currUIStyle.getLabelColor()));
                    radioCoverAndNameLabel.setIcon(new ImageIcon(coverImg));
                    radioCoverAndNameLabel.setText(LOADING_MSG);
                    radioTagLabel.setText(LOADING_MSG);
                    radioDescriptionLabel.setText(LOADING_MSG);
                    GlobalExecutors.imageExecutor.execute(() -> {
                        try {
                            MusicServerUtils.fillRadioInfo(radioInfo);
                            radioCoverAndNameLabel.setText(StringUtils.textToHtml(radioInfo.getName()));
                            if (radioInfo.getTag() != null)
                                radioTagLabel.setText(StringUtils.textToHtml("".equals(radioInfo.getTag()) ? "" : "标签：" + radioInfo.getTag()));
                            if (radioInfo.getDescription() != null)
                                radioDescriptionLabel.setText(StringUtils.textToHtml(radioInfo.getDescription()));
                            if (radioInfo.hasCoverImg()) {
                                radioCoverAndNameLabel.setIcon(new ImageIcon(
                                        ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(radioInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                ));
                            } else {
                                radioInfo.setInvokeLater(() -> {
                                    radioCoverAndNameLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(radioInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                    netRadioList.repaint();
                                });
                            }
                        } catch (HttpException e) {
                            radioCoverAndNameLabel.setText(LOAD_FAILED);
                            radioTagLabel.setText(LOAD_FAILED);
                            radioDescriptionLabel.setText(LOAD_FAILED);
                        }
                    });
                }));


                taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                    try {
                        // 得到电台的音乐信息
                        CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInRadio(radioInfo, limit, netMusicInRadioCurrPage = 1);
                        List<NetMusicInfo> musicInfos = result.data;
                        int total = result.total;
                        netMusicInRadioMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新电台歌曲数量显示
//                            netCurrRadioLabel.setText(StringUtils.textToHtml(radioInfo.getName()));
                        netRadioCountLabel.setText(String.format(PAGINATION_MSG, netMusicInRadioCurrPage, netMusicInRadioMaxPage));
                        radioListCountBox.add(netRadioCountPanel);
                        radioListCountBox.add(netMusicScrollPane);
                        radioListBox.add(radioListCountBox);
                        // 电台列表切换到在线音乐列表
                        netMusicList.setModel(netMusicListForRadioModel);
                        netRadioLeftBox.remove(netRadioScrollPane);
                        netRadioLeftBox.add(radioListBox);
                        // 删除工具栏的搜索
                        netRadioToolBar.remove(netRadioSearchTextField);
                        netRadioToolBar.remove(netRadioClearInputButton);
                        netRadioToolBar.remove(netRadioSearchButton);
                        netRadioToolBar.remove(netRadioTitleLabel);
                        netRadioToolBar.add(Box.createHorizontalGlue());
                        // 添加数据建议弄到更新数量显示之后，不然可能会不显示！
                        netMusicList.setModel(emptyListModel);
                        netMusicListForRadioModel.clear();
                        musicInfos.forEach(musicInfo -> {
                            globalExecutor.submit(() -> updateCollection(musicInfo));
                            netMusicListForRadioModel.addElement(musicInfo);
                        });
                        netMusicList.setModel(netMusicListForRadioModel);
                        radioDescriptionScrollPane.getVerticalScrollBar().setValue(0);
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                        netRadioBackwardButton.setEnabled(true);
                        netRadioSourceComboBox.setVisible(false);
                        netRadioPlayAllButton.setVisible(true);
                        if (netMusicListForRadioModel.isEmpty()) {
                            radioListCountBox.remove(netMusicScrollPane);
                            radioListCountBox.add(emptyHintPanel);
                        } else {
                            radioListCountBox.remove(emptyHintPanel);
                            radioListCountBox.add(netMusicScrollPane);
                        }
                        // 切换后一定要刷新！
                        netRadioLeftBox.repaint();
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                }));

                taskList.forEach(task -> {
                    try {
                        task.get();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    } catch (ExecutionException e) {
                        e.printStackTrace();
                    }
                });
            });
        };
        netRadioList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    openRadioAction.run();
                }
            }
        });
        netRadioList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                // 鼠标左键双击打开电台
                if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    openRadioAction.run();
                }
                // 右键弹出菜单
                else if (e.getButton() == MouseEvent.BUTTON3) {
                    if (netRadioList.getModel().getSize() != 0) {
                        // 得到鼠标光标所在的选项并选中
                        int index = netRadioList.locationToIndex(e.getPoint());
                        if (index == -1) return;
                        if (!netRadioList.isSelectedIndex(index)) netRadioList.setSelectedIndex(index);
                        if (hasBeenCollected(netRadioList.getSelectedValue())) {
                            netRadioCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                            netRadioCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);
                        } else {
                            netRadioCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, currUIStyle.getButtonColor()));
                            netRadioCollectMenuItem.setText(COLLECT_MENU_ITEM_TEXT);
                        }

                        netRadioPopupMenu.show(netRadioList, e.getX(), e.getY());
                    }
                }
            }
        });
        // 打开电台
        netRadioOpenMenuItem.addActionListener(e -> {
            int index = tabbedPane.getSelectedIndex();
            if (index == TabIndex.NET_RADIO) openRadioAction.run();
            else if (index == TabIndex.PERSONAL) openCollectionItemAction.run();
            else openRecommendItemAction.run();
        });
        // 播放全部
        netRadioPlayAllMenuItem.addActionListener(e -> {
            NetRadioInfo netRadioInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_RADIO) netRadioInfo = netRadioList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netRadioInfo = (NetRadioInfo) collectionList.getSelectedValue();
            else netRadioInfo = (NetRadioInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInRadio(
                        netRadioInfo, netRadioInfo.hasTrackCount() ? netRadioInfo.getTrackCount() : 10000, 1);
                List<NetMusicInfo> musicInfos = result.data;
                if (musicInfos.isEmpty()) {
                    new TipDialog(THIS, NO_MUSIC_MSG).showDialog();
                    return;
                }
                playQueue.setModel(emptyListModel);
                playQueueModel.clear();
                musicInfos.forEach(musicInfo -> {
                    globalExecutor.submit(() -> updateCollection(musicInfo));
                    playQueueModel.addElement(musicInfo);
                });
                playQueue.setModel(playQueueModel);
                playQueue.setSelectedIndex(0);
                playExecutor.submit(() -> playSelected(playQueue, true));
            });
        });
        // 收藏电台
        netRadioCollectMenuItem.addActionListener(e -> {
            int index = tabbedPane.getSelectedIndex();
            CustomList list;
            if (index == TabIndex.NET_RADIO) list = netRadioList;
            else if (index == TabIndex.PERSONAL) list = collectionList;
            else list = itemRecommendList;
            ListModel model = collectionList.getModel();
            boolean needRefresh = model == radioCollectionModel;
            if (netRadioCollectMenuItem.getText().equals(COLLECT_MENU_ITEM_TEXT)) {
                List values = list.getSelectedValuesList();
                if (needRefresh) collectionList.setModel(emptyListModel);
                for (int i = values.size() - 1; i >= 0; i--) {
                    Object o = values.get(i);
                    if (hasBeenCollected(o)) continue;
                    radioCollectionModel.add(0, o);
                }
                if (needRefresh) collectionList.setModel(model);
                new TipDialog(THIS, COLLECT_SUCCESS_MSG).showDialog();
            } else {
                List values = list.getSelectedValuesList();
                if (needRefresh) collectionList.setModel(emptyListModel);
                values.forEach(o -> {
                    if (list == collectionList || hasBeenCollected(o)) {
                        radioCollectionModel.removeElement(o);
                    }
                });
                if (needRefresh) collectionList.setModel(model);
                new TipDialog(THIS, CANCEL_COLLECTION_SUCCESS_MSG).showDialog();
            }
        });
        // 查看评论
        netRadioCommentMenuItem.addActionListener(e -> {
            NetRadioInfo netRadioInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_RADIO) netRadioInfo = netRadioList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netRadioInfo = (NetRadioInfo) collectionList.getSelectedValue();
            else netRadioInfo = (NetRadioInfo) itemRecommendList.getSelectedValue();
            getComments(netRadioInfo, true);
        });
        // 查看主播
        netRadioDjMenuItem.addActionListener(e -> {
            NetRadioInfo netRadioInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_RADIO) netRadioInfo = netRadioList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netRadioInfo = (NetRadioInfo) collectionList.getSelectedValue();
            else netRadioInfo = (NetRadioInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForUser();
                    // 获取电台主播
                    currUserRadioInfo = netRadioInfo;
                    CommonResult<NetUserInfo> result = MusicServerUtils.getUserInfo(netRadioInfo.getDjId(), netRadioInfo.getSource());
                    List<NetUserInfo> netUserInfos = result.data;
                    netUserCurrPage = netUserMaxPage = 1;
                    // 标题
                    netUserTitleLabel.setText(netRadioInfo.getName() + " 的主播");
                    netUserToolBar.removeAll();
                    netUserToolBar.add(netUserBackwardButton);
                    netUserToolBar.add(Box.createHorizontalGlue());
                    netUserToolBar.add(netUserTitleLabel);
                    netUserToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netUserCountLabel.setText(String.format(PAGINATION_MSG, netUserCurrPage, netUserMaxPage));
                    netUserCountPanel.add(netUserCountLabel, netUserCountPanel.getComponentIndex(netUserCountLabel));
                    netUserLeftBox.add(netUserCountPanel);
                    netUserSourceComboBox.setVisible(false);
                    netUserPlayAllButton.setVisible(false);
                    netUserRecordTypeComboBox.setVisible(false);
                    netUserCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netUserList.setModel(emptyListModel);
                    netUserListModel.clear();
                    netUserInfos.forEach(userInfo -> {
                        globalExecutor.submit(() -> updateCollection(userInfo));
                        // 设置图片加载后重绘的事件
                        userInfo.setInvokeLater(() -> {
                            updateRenderer(netUserList);
                            updateRenderer(collectionList);
                            netUserList.repaint();
                            collectionList.repaint();
                        });
                        netUserListModel.addElement(userInfo);
                    });
                    netUserList.setModel(netUserListModel);
                    netUserBackwardButton.setEnabled(true);
                    netUserLeftBox.remove(netUserKeywordsPanelScrollPane);
                    if (netUserListModel.isEmpty()) {
                        netUserLeftBox.remove(netUserScrollPane);
                        netUserLeftBox.add(emptyHintPanel);
                    } else {
                        netUserLeftBox.remove(emptyHintPanel);
                        netUserLeftBox.add(netUserScrollPane);
                    }
                    netUserScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_USER);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看订阅者
        netRadioSubscriberMenuItem.addActionListener(e -> {
            NetRadioInfo netRadioInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_RADIO) netRadioInfo = netRadioList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netRadioInfo = (NetRadioInfo) collectionList.getSelectedValue();
            else netRadioInfo = (NetRadioInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForUser();
                    // 获取电台订阅者
                    CommonResult<NetUserInfo> result = MusicServerUtils.getRadioSubscribers(currSubscriberRadioInfo = netRadioInfo, limit, netUserCurrPage = 1);
                    List<NetUserInfo> netUserInfos = result.data;
                    Integer total = result.total;
                    netUserMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netUserTitleLabel.setText(netRadioInfo.getName() + " 的订阅者");
                    netUserToolBar.removeAll();
                    netUserToolBar.add(netUserBackwardButton);
                    netUserToolBar.add(Box.createHorizontalGlue());
                    netUserToolBar.add(netUserTitleLabel);
                    netUserToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netUserCountLabel.setText(String.format(PAGINATION_MSG, netUserCurrPage, netUserMaxPage));
                    netUserCountPanel.add(netUserCountLabel, netUserCountPanel.getComponentIndex(netUserCountLabel));
                    netUserLeftBox.add(netUserCountPanel);
                    netUserSourceComboBox.setVisible(false);
                    netUserPlayAllButton.setVisible(false);
                    netUserRecordTypeComboBox.setVisible(false);
                    netUserCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netUserList.setModel(emptyListModel);
                    netUserListModel.clear();
                    netUserInfos.forEach(userInfo -> {
                        globalExecutor.submit(() -> updateCollection(userInfo));
                        // 设置图片加载后重绘的事件
                        userInfo.setInvokeLater(() -> {
                            updateRenderer(netUserList);
                            updateRenderer(collectionList);
                            netUserList.repaint();
                            collectionList.repaint();
                        });
                        netUserListModel.addElement(userInfo);
                    });
                    netUserList.setModel(netUserListModel);
                    netUserBackwardButton.setEnabled(true);
                    netUserLeftBox.remove(netUserKeywordsPanelScrollPane);
                    if (netUserListModel.isEmpty()) {
                        netUserLeftBox.remove(netUserScrollPane);
                        netUserLeftBox.add(emptyHintPanel);
                    } else {
                        netUserLeftBox.remove(emptyHintPanel);
                        netUserLeftBox.add(netUserScrollPane);
                    }
                    netUserScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_USER);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看相似电台
        netRadioSimilarMenuItem.addActionListener(e -> {
            NetRadioInfo netRadioInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_RADIO) netRadioInfo = netRadioList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netRadioInfo = (NetRadioInfo) collectionList.getSelectedValue();
            else netRadioInfo = (NetRadioInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForRadio();
                    // 搜索用户电台
                    CommonResult<NetRadioInfo> result = MusicServerUtils.getSimilarRadios(currRadioRadioInfo = netRadioInfo);
                    List<NetRadioInfo> netRadioInfos = result.data;
                    int total = result.total;
                    netRadioCurrPage = netRadioMaxPage = 1;
                    // 标题
                    netRadioTitleLabel.setText(netRadioInfo.getName() + " 的相似电台");
                    netRadioToolBar.removeAll();
                    netRadioToolBar.add(netRadioBackwardButton);
                    netRadioToolBar.add(Box.createHorizontalGlue());
                    netRadioToolBar.add(netRadioTitleLabel);
                    netRadioToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netRadioCountLabel.setText(String.format(PAGINATION_MSG, netRadioCurrPage, netRadioMaxPage));
                    netRadioCountPanel.add(netRadioCountLabel, netRadioCountPanel.getComponentIndex(netRadioCountLabel));
                    netRadioLeftBox.add(netRadioCountPanel);
                    netRadioSourceComboBox.setVisible(false);
                    netRadioPlayAllButton.setVisible(false);
                    netRadioCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netRadioList.setModel(emptyListModel);
                    netRadioListModel.clear();
                    netRadioInfos.forEach(radioInfo -> {
                        globalExecutor.submit(() -> updateCollection(radioInfo));
                        // 设置图片加载后重绘的事件
                        radioInfo.setInvokeLater(() -> {
                            updateRenderer(netRadioList);
                            updateRenderer(collectionList);
                            netRadioList.repaint();
                            collectionList.repaint();
                        });
                        netRadioListModel.addElement(radioInfo);
                    });
                    netRadioList.setModel(netRadioListModel);
                    netRadioBackwardButton.setEnabled(true);
                    netRadioLeftBox.remove(netRadioKeywordsPanelScrollPane);
                    if (netRadioListModel.isEmpty()) {
                        netRadioLeftBox.remove(netRadioScrollPane);
                        netRadioLeftBox.add(emptyHintPanel);
                    } else {
                        netRadioLeftBox.remove(emptyHintPanel);
                        netRadioLeftBox.add(netRadioScrollPane);
                    }
                    netRadioScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_RADIO);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看演职员/CV
        netRadioArtistsMenuItem.addActionListener(e -> {
            NetRadioInfo netRadioInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_RADIO) netRadioInfo = netRadioList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netRadioInfo = (NetRadioInfo) collectionList.getSelectedValue();
            else netRadioInfo = (NetRadioInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForArtist();
                    // 搜索演职员
                    CommonResult<NetArtistInfo> result = MusicServerUtils.getRadioArtists(currArtistRadioInfo = netRadioInfo);
                    List<NetArtistInfo> netArtistInfos = result.data;
                    netArtistCurrPage = netArtistMaxPage = 1;
                    // 标题
                    netArtistTitleLabel.setText(netRadioInfo.getName() + " 的演职员");
                    netArtistToolBar.removeAll();
                    netArtistToolBar.add(netArtistBackwardButton);
                    netArtistToolBar.add(Box.createHorizontalGlue());
                    netArtistToolBar.add(netArtistTitleLabel);
                    netArtistToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netArtistCountLabel.setText(String.format(PAGINATION_MSG, netArtistCurrPage, netArtistMaxPage));
                    netArtistCountPanel.add(netArtistCountLabel, netArtistCountPanel.getComponentIndex(netArtistCountLabel));
                    netArtistLeftBox.add(netArtistCountPanel);
                    netArtistSourceComboBox.setVisible(false);
                    netArtistPlayAllButton.setVisible(false);
                    netArtistCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netArtistList.setModel(emptyListModel);
                    netArtistListModel.clear();
                    netArtistInfos.forEach(artistInfo -> {
                        globalExecutor.submit(() -> updateCollection(artistInfo));
                        // 设置图片加载后重绘的事件
                        artistInfo.setInvokeLater(() -> {
                            updateRenderer(netArtistList);
                            updateRenderer(collectionList);
                            netArtistList.repaint();
                            collectionList.repaint();
                        });
                        netArtistListModel.addElement(artistInfo);
                    });
                    netArtistList.setModel(netArtistListModel);
                    netArtistBackwardButton.setEnabled(true);
                    netArtistLeftBox.remove(netArtistKeywordsPanelScrollPane);
                    if (netArtistListModel.isEmpty()) {
                        netArtistLeftBox.remove(netArtistScrollPane);
                        netArtistLeftBox.add(emptyHintPanel);
                    } else {
                        netArtistLeftBox.remove(emptyHintPanel);
                        netArtistLeftBox.add(netArtistScrollPane);
                    }
                    netArtistScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_ARTIST);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看电台照片
        netRadioPhotosMenuItem.addActionListener(e -> {
            NetRadioInfo netRadioInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_RADIO) netRadioInfo = netRadioList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netRadioInfo = (NetRadioInfo) collectionList.getSelectedValue();
            else netRadioInfo = (NetRadioInfo) itemRecommendList.getSelectedValue();
            try {
                imageViewDialog = new ImageViewDialog(THIS, netRadioInfo.isGame() ? 24 : 30) {
                    @Override
                    public CommonResult<String> requestImgUrls(int pn, int limit, String cursor) {
                        return MusicServerUtils.getRadioImgUrls(netRadioInfo, pn);
                    }

                    @Override
                    public void requestFailed() {
                        new TipDialog(THIS, NO_IMG_MSG).showDialog();
                    }
                };
                imageViewDialog.showDialog();
                imageViewDialog = null;
            } catch (IORuntimeException ioRuntimeException) {
                // 无网络连接
                new TipDialog(THIS, NO_NET_MSG).showDialog();
            } catch (HttpException httpException) {
                // 请求超时
                new TipDialog(THIS, TIME_OUT_MSG).showDialog();
            } catch (JSONException jsonException) {
                // 接口异常
                new TipDialog(THIS, API_ERROR_MSG).showDialog();
            }
        });
        // 查看电台海报
        netRadioPostersMenuItem.addActionListener(e -> {
            NetRadioInfo netRadioInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_RADIO) netRadioInfo = netRadioList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netRadioInfo = (NetRadioInfo) collectionList.getSelectedValue();
            else netRadioInfo = (NetRadioInfo) itemRecommendList.getSelectedValue();
            try {
                imageViewDialog = new ImageViewDialog(THIS, 30) {
                    @Override
                    public CommonResult<String> requestImgUrls(int pn, int limit, String cursor) {
                        return MusicServerUtils.getRadioPosterUrls(netRadioInfo, pn);
                    }

                    @Override
                    public void requestFailed() {
                        new TipDialog(THIS, NO_IMG_MSG).showDialog();
                    }
                };
                imageViewDialog.showDialog();
                imageViewDialog = null;
            } catch (IORuntimeException ioRuntimeException) {
                // 无网络连接
                new TipDialog(THIS, NO_NET_MSG).showDialog();
            } catch (HttpException httpException) {
                // 请求超时
                new TipDialog(THIS, TIME_OUT_MSG).showDialog();
            } catch (JSONException jsonException) {
                // 接口异常
                new TipDialog(THIS, API_ERROR_MSG).showDialog();
            }
        });
        // 复制名称
        netRadioCopyNameMenuItem.addActionListener(e -> {
            Object o;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_RADIO) o = netRadioList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL) o = collectionList.getSelectedValue();
            else o = itemRecommendList.getSelectedValue();
            StringSelection stringSelection = new StringSelection(((NetRadioInfo) o).toSimpleString());
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });
        // 电台列表右键菜单项
        netRadioPopupMenu.add(netRadioOpenMenuItem);
        netRadioPopupMenu.add(netRadioPlayAllMenuItem);
        netRadioPopupMenu.add(netRadioCollectMenuItem);
        netRadioPopupMenu.add(netRadioCommentMenuItem);
        netRadioPopupMenu.add(netRadioDjMenuItem);
        netRadioPopupMenu.add(netRadioSubscriberMenuItem);
        netRadioPopupMenu.add(netRadioSimilarMenuItem);
        netRadioPopupMenu.add(netRadioArtistsMenuItem);
        netRadioPopupMenu.add(netRadioPhotosMenuItem);
        netRadioPopupMenu.add(netRadioPostersMenuItem);
        netRadioPopupMenu.add(netRadioCopyNameMenuItem);

        // 搜索历史面板
        // 清空搜索历史按钮
        netRadioClearHistorySearchButton.addActionListener(e -> {
            netRadioHistorySearchInnerPanel2.removeAll();
            netRadioKeywordsPanel.remove(netRadioHistorySearchPanel);
            netRadioKeywordsPanel.repaint();
        });
        netRadioClearHistorySearchButton.setPreferredSize(new Dimension(20, 20));
        netRadioClearHistorySearchButton.setToolTipText(CLEAR_HISTORY_SEARCH_TIP);
        netRadioClearHistorySearchButton.addMouseListener(new ButtonMouseListener(netRadioClearHistorySearchButton, THIS));

        netRadioHistorySearchInnerPanel1.add(netRadioHistorySearchLabel);
        netRadioHistorySearchInnerPanel1.add(netRadioClearHistorySearchButton);
        netRadioHistorySearchInnerPanel1.setLayout(new FlowLayout(FlowLayout.LEFT));
        netRadioHistorySearchInnerPanel1.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        netRadioHistorySearchInnerPanel1.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netRadioHistorySearchInnerPanel2.setLayout(new FlowLayout(FlowLayout.LEFT));
        netRadioHistorySearchInnerPanel2.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        netRadioHistorySearchPanel.setLayout(new BoxLayout(netRadioHistorySearchPanel, BoxLayout.Y_AXIS));
        netRadioHistorySearchPanel.add(netRadioHistorySearchInnerPanel1);
        netRadioHistorySearchPanel.add(netRadioHistorySearchInnerPanel2);
        // 关键词面板
        netRadioKeywordsPanel.setLayout(new BoxLayout(netRadioKeywordsPanel, BoxLayout.Y_AXIS));
//        // 滚动条监听器
//        netRadioKeywordsPanelScrollPane.addMouseListener(new ScrollPaneListener(netRadioKeywordsPanelScrollPane, THIS));

        // 同时限制面板与滚动条的大小才能保证按钮不超出窗口！！！
        Dimension d = new Dimension(900, 500);
        netRadioKeywordsPanel.setPreferredSize(d);
        netRadioKeywordsPanelScrollPane.setPreferredSize(d);

        // 电台最佳大小
        netRadioScrollPane.setPreferredSize(new Dimension(200, 600));
        netRadioLeftBox.add(netRadioScrollPane);
    }

    // 初始化 MV 工具栏
    private void netMvToolBarInit() {
        // 返回关键词面板事件
        netMvBackwardButton.addActionListener(e -> {
            // 删除标题标签
            netMvToolBar.removeAll();
            netMvToolBar.add(netMvBackwardButton);
            netMvToolBar.add(netMvSearchTextField);
            netMvToolBar.add(netMvClearInputButton);
            netMvToolBar.add(netMvSearchButton);
            clearRequestForMv();

            netMvListModel.clear();
            netMvCountPanel.setVisible(false);
            netMvLeftBox.remove(emptyHintPanel);
            netMvLeftBox.remove(netMvScrollPane);
            netMvLeftBox.add(netMvKeywordsPanelScrollPane);
            netMvBackwardButton.setEnabled(false);
            netMvLeftBox.repaint();
        });
        netMvSearchTextField.addFocusListener(new TextFieldHintListener(netMvSearchTextField, "MV", currUIStyle.getForeColor()));
        netMvSearchTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                if (netMvSearchTextField.isOccupied()) {
                    netMvClearInputButton.setVisible(true);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if (netMvSearchTextField.getText().equals("")) netMvClearInputButton.setVisible(false);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });
        // 只能输入数字
        netMvPageTextField.setDocument(new SafeDocument(0, Integer.MAX_VALUE));
        // 清除输入事件
        netMvClearInputButton.addActionListener(e -> {
            netMvSearchTextField.requestFocus();
            netMvSearchTextField.setText("");
            netMvBackwardButton.requestFocus();
        });
        // 搜索 MV 按钮事件
        netMvSearchButton.addActionListener(e -> {
            netMvCurrKeyword = netMvSearchTextField.getText();
            if (!netMvCurrKeyword.equals("")) {
                // 关键词加入搜索历史
                DialogButton b = new DialogButton(netMvCurrKeyword);
                b.addActionListener(event -> {
                    netMvSearchTextField.requestFocus();
                    netMvSearchTextField.setText(b.getText());
                    netMvClearInputButton.setVisible(true);
                    netMvLeftBox.remove(netMvKeywordsPanelScrollPane);
                    netMvLeftBox.add(netMvScrollPane);
                    netMvSearchButton.doClick();
                });
                // 右击删除历史
                b.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.getButton() == MouseEvent.BUTTON3) {
                            netMvHistorySearchInnerPanel2.remove(b);
                            netMvHistorySearchInnerPanel2.repaint();
                            if (netMvHistorySearchInnerPanel2.getComponentCount() == 0) {
                                netMvKeywordsPanel.remove(netMvHistorySearchPanel);
                                netMvKeywordsPanel.repaint();
                            }
                        }
                    }
                });
                b.setToolTipText(REMOVE_HISTORY_KEYWORD_TIP);
                b.setForeColor(currUIStyle.getButtonColor());
                // 先删除重复的关键词
                removeKeywordInHistorySearch(netMvCurrKeyword, HistorySearchType.NET_MV);
                netMvHistorySearchInnerPanel2.add(b, 0);
                // 删除超出上限的最后一个关键词
                int c = netMvHistorySearchInnerPanel2.getComponentCount();
                if (c > maxSearchHistoryCount)
                    netMvHistorySearchInnerPanel2.remove(c - 1);
                // 显示 “搜索历史” 面板
                netMvKeywordsPanel.add(netMvHistorySearchPanel);
                // 更新 LAF，防止按钮样式不正确
                SwingUtilities.updateComponentTreeUI(netMvClearHistorySearchButton);
                netMvHistorySearchPanel.repaint();

                loadingAndRun(() -> {
                    try {
                        // 搜索 MV 并显示 MV 列表
                        CommonResult<NetMvInfo> result = MusicServerUtils.searchMvs(
                                netMvSourceComboBox.getSelectedIndex(), netMvCurrKeyword, limit, netMvCurrPage = 1);
                        List<NetMvInfo> netMvInfos = result.data;
                        Integer total = result.total;
                        netMvMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netMvCountLabel.setText(String.format(PAGINATION_MSG, netMvCurrPage, netMvMaxPage));
                        netMvCountPanel.setVisible(true);
                        netMvSourceComboBox.setVisible(true);
                        netMvSortTypeComboBox.setVisible(false);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netMvList.setModel(emptyListModel);
                        netMvListModel.clear();
                        netMvInfos.forEach(mvInfo -> {
                            globalExecutor.submit(() -> updateCollection(mvInfo));
                            // 设置图片加载后重绘的事件
                            mvInfo.setInvokeLater(() -> {
                                updateRenderer(netMvList);
                                updateRenderer(collectionList);
                                netMvList.repaint();
                                collectionList.repaint();
                            });
                            netMvListModel.addElement(mvInfo);
                        });
                        netMvList.setModel(netMvListModel);
                        netMvBackwardButton.setEnabled(true);
                        netMvLeftBox.remove(netMvKeywordsPanelScrollPane);
                        if (netMvListModel.isEmpty()) {
                            netMvLeftBox.remove(netMvScrollPane);
                            netMvLeftBox.add(emptyHintPanel);
                        } else {
                            netMvLeftBox.remove(emptyHintPanel);
                            netMvLeftBox.add(netMvScrollPane);
                        }
                        netMvScrollPane.getVerticalScrollBar().setValue(0);
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        });
        // 搜索 MV 跳页事件
        Runnable searchMvGoPageAction = () -> {
            boolean artistRequest = currMvArtistInfo != null, songRequest = currMvMusicInfo != null,
                    mvRequest = currMvMvInfo != null, episodeRequest = currEpisodesMvInfo != null, userRequest = currMvUserInfo != null;
            if (artistRequest || songRequest || mvRequest || episodeRequest || userRequest || StringUtils.isNotEmpty(netMvCurrKeyword)) {
                loadingAndRun(() -> {
                    try {
                        // 搜索 MV 并显示 MV 列表
                        CommonResult<NetMvInfo> result = artistRequest ? MusicServerUtils.getMvInfoInArtist(currMvArtistInfo, limit, netMvCurrPage)
                                : songRequest ? MusicServerUtils.getRelatedMvs(currMvMusicInfo, limit, netMvCurrPage)
                                : mvRequest ? MusicServerUtils.getSimilarMvs(currMvMvInfo)
                                : episodeRequest ? MusicServerUtils.getVideoEpisodes(currEpisodesMvInfo, netMvCurrPage, limit)
                                : userRequest ? MusicServerUtils.getUserVideos(currMvUserInfo, netMvSortTypeComboBox.getSelectedIndex(), netMvCurrPage, limit, cursor)
                                : MusicServerUtils.searchMvs(netMvSourceComboBox.getSelectedIndex(), netMvCurrKeyword, limit, netMvCurrPage);
                        List<NetMvInfo> netMvInfos = result.data;
                        Integer total = result.total;
                        cursor = result.cursor;
                        netMvMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netMvCountLabel.setText(String.format(PAGINATION_MSG, netMvCurrPage, netMvMaxPage));
                        netMvCountPanel.setVisible(true);
                        netMvCountPanel.add(netMvCountLabel, netMvCountPanel.getComponentIndex(netMvCountLabel));
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netMvList.setModel(emptyListModel);
                        netMvListModel.clear();
                        netMvInfos.forEach(mvInfo -> {
                            globalExecutor.submit(() -> updateCollection(mvInfo));
                            // 设置图片加载后重绘的事件
                            mvInfo.setInvokeLater(() -> {
                                updateRenderer(netMvList);
                                updateRenderer(collectionList);
                                netMvList.repaint();
                                collectionList.repaint();
                            });
                            netMvListModel.addElement(mvInfo);
                        });
                        netMvList.setModel(netMvListModel);
                        netMvScrollPane.getVerticalScrollBar().setValue(0);
                        if (netMvListModel.isEmpty()) {
                            netMvLeftBox.remove(netMvScrollPane);
                            netMvLeftBox.add(emptyHintPanel);
                        } else {
                            netMvLeftBox.remove(emptyHintPanel);
                            netMvLeftBox.add(netMvScrollPane);
                        }
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        };
        netMvSortTypeComboBox.addItem("最新发布");
        netMvSortTypeComboBox.addItem("最多播放");
        netMvSortTypeComboBox.addItem("最多收藏");
        // MV 排序类型切换事件
        netMvSortTypeComboBox.addItemListener(e -> {
            // 避免事件被处理 2 次！
            if (e.getStateChange() != ItemEvent.SELECTED) return;
            netMvCurrPage = 1;
            netMvRefreshButton.doClick();
        });
        // 刷新按钮事件
        netMvRefreshButton.addActionListener(e -> {
            searchMvGoPageAction.run();
        });
        // 第一页按钮事件
        netMvStartPageButton.addActionListener(e -> {
            if (netMvCurrPage == 1) {
                new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                return;
            }
            netMvCurrPage = 1;
            searchMvGoPageAction.run();
        });
        // 上一页按钮事件
        netMvLastPageButton.addActionListener(e -> {
            if (netMvCurrPage == 1) {
                new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                return;
            }
            netMvCurrPage--;
            searchMvGoPageAction.run();
        });
        // 下一页按钮事件
        netMvNextPageButton.addActionListener(e -> {
            if (netMvCurrPage == netMvMaxPage) {
                new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                return;
            }
            netMvCurrPage++;
            searchMvGoPageAction.run();
        });
        // 最后一页按钮事件
        netMvEndPageButton.addActionListener(e -> {
            if (netMvCurrPage == netMvMaxPage) {
                new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                return;
            }
            netMvCurrPage = netMvMaxPage;
            searchMvGoPageAction.run();
        });
        // 跳页按钮事件
        netMvGoButton.addActionListener(e -> {
            String text = netMvPageTextField.getText();
            netMvPageTextField.setText("");
            if ("".equals(text)) return;
            int destPage = Integer.parseInt(text);
            if (destPage < 1 || destPage > netMvMaxPage) {
                new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                return;
            }
            netMvCurrPage = destPage;
            searchMvGoPageAction.run();
        });
        // 按钮大小限制
        Dimension dimension = new Dimension(20, 20);
        netMvRefreshButton.setPreferredSize(dimension);
        netMvStartPageButton.setPreferredSize(dimension);
        netMvLastPageButton.setPreferredSize(dimension);
        netMvGoButton.setPreferredSize(dimension);
        netMvNextPageButton.setPreferredSize(dimension);
        netMvEndPageButton.setPreferredSize(dimension);
        // 按钮悬浮与点击效果
        netMvBackwardButton.addMouseListener(new ButtonMouseListener(netMvBackwardButton, THIS));
        netMvClearInputButton.addMouseListener(new ButtonMouseListener(netMvClearInputButton, THIS));
        netMvSearchButton.addMouseListener(new ButtonMouseListener(netMvSearchButton, THIS));
        netMvRefreshButton.addMouseListener(new ButtonMouseListener(netMvRefreshButton, THIS));
        netMvStartPageButton.addMouseListener(new ButtonMouseListener(netMvStartPageButton, THIS));
        netMvLastPageButton.addMouseListener(new ButtonMouseListener(netMvLastPageButton, THIS));
        netMvGoButton.addMouseListener(new ButtonMouseListener(netMvGoButton, THIS));
        netMvNextPageButton.addMouseListener(new ButtonMouseListener(netMvNextPageButton, THIS));
        netMvEndPageButton.addMouseListener(new ButtonMouseListener(netMvEndPageButton, THIS));
        // 不可见
        netMvSortTypeComboBox.setVisible(false);
        // 帮助提示
        netMvBackwardButton.setToolTipText(SHOW_KEYWORD_PANEL_TIP);
        netMvClearInputButton.setToolTipText(CLEAR_INPUT_TIP);
        netMvSearchButton.setToolTipText(SEARCH_TIP);
        netMvRefreshButton.setToolTipText(REFRESH_TIP);
        netMvStartPageButton.setToolTipText(START_PAGE_TIP);
        netMvLastPageButton.setToolTipText(LAST_PAGE_TIP);
        netMvGoButton.setToolTipText(GO_TIP);
        netMvNextPageButton.setToolTipText(NEXT_PAGE_TIP);
        netMvEndPageButton.setToolTipText(END_PAGE_TIP);
        // 回到关键词面板起始不可用
        netMvBackwardButton.setEnabled(false);
        // 清除输入按钮初始不可见
        netMvClearInputButton.setVisible(false);

        netMvToolBar.add(netMvBackwardButton);
        netMvToolBar.add(netMvSearchTextField);
        netMvToolBar.add(netMvClearInputButton);
        netMvToolBar.add(netMvSearchButton);
        netMvLeftBox.add(netMvToolBar);

        for (String name : NetMusicSource.names) netMvSourceComboBox.addItem(name);
        netMvSourceComboBox.addItemListener(e -> {
            // 避免事件被处理 2 次！
            if (e.getStateChange() != ItemEvent.SELECTED) return;
            netMvCurrKeyword = netMvSearchTextField.getText();
            netMvCurrPage = 1;
            netMvRefreshButton.doClick();
        });

        //  MV 数量和当前歌曲标签
        netMvCountPanel.add(netMvSourceComboBox);
        netMvCountPanel.add(netMvSortTypeComboBox);
        netMvCountPanel.add(netMvStartPageButton);
        netMvCountPanel.add(netMvLastPageButton);
        netMvCountPanel.add(netMvCountLabel);
        netMvCountPanel.add(netMvNextPageButton);
        netMvCountPanel.add(netMvEndPageButton);
        netMvCountPanel.add(netMvRefreshButton);
        netMvCountPanel.add(netMvPageTextField);
        netMvCountPanel.add(netMvGoButton);
        netMvCountPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netMvCountPanel.setVisible(false);
        netMvLeftBox.add(netMvCountPanel);
    }

    // 初始化在线 MV 列表
    private void netMvListInit() {
        netMvList.setModel(netMvListModel);
        netMvList.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int index = netMvList.locationToIndex(e.getPoint());
                Rectangle bounds = netMvList.getCellBounds(index, index);
                if (bounds == null) return;
                setHoverIndex(bounds.contains(e.getPoint()) ? index : -1);
            }

            private void setHoverIndex(int index) {
                TranslucentNetMvListRenderer renderer = (TranslucentNetMvListRenderer) netMvList.getCellRenderer();
                if (renderer == null) return;
                int hoverIndex = renderer.getHoverIndex();
                if (hoverIndex == index) return;
                renderer.setHoverIndex(index);
                netMvList.repaint();
            }
        });
        netMvList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                TranslucentNetMvListRenderer renderer = (TranslucentNetMvListRenderer) netMvList.getCellRenderer();
                if (renderer == null) return;
                renderer.setHoverIndex(-1);
                netMvList.repaint();
            }
        });
        // 打开 MV
        Runnable playMvAction = () -> {
            try {
                playMv(MvType.MV_LIST);
            } catch (IORuntimeException ioRuntimeException) {
                // 无网络连接
                new TipDialog(THIS, NO_NET_MSG).showDialog();
            } catch (HttpException httpException) {
                // 请求超时
                new TipDialog(THIS, TIME_OUT_MSG).showDialog();
            } catch (JSONException jsonException) {
                // 接口异常
                jsonException.printStackTrace();
                new TipDialog(THIS, API_ERROR_MSG).showDialog();
            }
        };
        netMvList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    playMvAction.run();
                }
            }
        });
        netMvList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                // 鼠标左键双击打开 MV
                if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    playMvAction.run();
                }
                // 右键弹出菜单
                else if (e.getButton() == MouseEvent.BUTTON3) {
                    if (netMvList.getModel().getSize() != 0) {
                        // 得到鼠标光标所在的选项并选中
                        int index = netMvList.locationToIndex(e.getPoint());
                        if (index == -1) return;
                        if (!netMvList.isSelectedIndex(index)) netMvList.setSelectedIndex(index);
                        if (hasBeenCollected(netMvList.getSelectedValue())) {
                            netMvCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                            netMvCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);
                        } else {
                            netMvCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, currUIStyle.getButtonColor()));
                            netMvCollectMenuItem.setText(COLLECT_MENU_ITEM_TEXT);
                        }

                        netMvPopupMenu.show(netMvList, e.getX(), e.getY());
                    }
                }
            }
        });
        // 播放 MV
        netMvPlayMenuItem.addActionListener(e -> {
            int index = tabbedPane.getSelectedIndex();
            if (index == TabIndex.NET_MV) playMvAction.run();
            else if (index == TabIndex.PERSONAL) openCollectionItemAction.run();
            else openRecommendItemAction.run();
        });
        // 收藏 MV
        netMvCollectMenuItem.addActionListener(e -> {
            int index = tabbedPane.getSelectedIndex();
            CustomList list;
            if (index == TabIndex.NET_MV) list = netMvList;
            else if (index == TabIndex.PERSONAL) list = collectionList;
            else list = itemRecommendList;
            ListModel model = collectionList.getModel();
            boolean needRefresh = model == mvCollectionModel;
            if (netMvCollectMenuItem.getText().equals(COLLECT_MENU_ITEM_TEXT)) {
                List values = list.getSelectedValuesList();
                if (needRefresh) collectionList.setModel(emptyListModel);
                for (int i = values.size() - 1; i >= 0; i--) {
                    Object o = values.get(i);
                    if (hasBeenCollected(o)) continue;
                    mvCollectionModel.add(0, o);
                }
                if (needRefresh) collectionList.setModel(model);
                new TipDialog(THIS, COLLECT_SUCCESS_MSG).showDialog();
            } else {
                List values = list.getSelectedValuesList();
                if (needRefresh) collectionList.setModel(emptyListModel);
                values.forEach(o -> {
                    if (list == collectionList || hasBeenCollected(o)) {
                        mvCollectionModel.removeElement(o);
                    }
                });
                if (needRefresh) collectionList.setModel(model);
                new TipDialog(THIS, CANCEL_COLLECTION_SUCCESS_MSG).showDialog();
            }
        });
        // 下载 MV
        netMvDownloadMenuItem.addActionListener(e -> {
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_MV) multiDownloadMv(netMvList.getSelectedValuesList());
            else if (selectedIndex == TabIndex.PERSONAL) multiDownloadMv(collectionList.getSelectedValuesList());
            else multiDownloadMv(itemRecommendList.getSelectedValuesList());
        });
        // 查看相似 MV
        netMvSimilarMvMenuItem.addActionListener(e -> {
            NetMvInfo netMvInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_MV) netMvInfo = netMvList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netMvInfo = (NetMvInfo) collectionList.getSelectedValue();
            else netMvInfo = (NetMvInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForMv();
                    // 获取相似 MV
                    CommonResult<NetMvInfo> result = MusicServerUtils.getSimilarMvs(currMvMvInfo = netMvInfo);
                    List<NetMvInfo> netMvInfos = result.data;
                    netMvCurrPage = netMvMaxPage = 1;
                    // 标题
                    netMvTitleLabel.setText(netMvInfo.toSimpleString() + " 的相似 MV");
                    netMvToolBar.removeAll();
                    netMvToolBar.add(netMvBackwardButton);
                    netMvToolBar.add(Box.createHorizontalGlue());
                    netMvToolBar.add(netMvTitleLabel);
                    netMvToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netMvCountLabel.setText(String.format(PAGINATION_MSG, netMvCurrPage, netMvMaxPage));
                    netMvCountPanel.add(netMvCountLabel, netMvCountPanel.getComponentIndex(netMvCountLabel));
                    netMvLeftBox.add(netMvCountPanel);
                    netMvCountPanel.setVisible(true);
                    netMvSourceComboBox.setVisible(false);
                    netMvSortTypeComboBox.setVisible(false);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netMvList.setModel(emptyListModel);
                    netMvListModel.clear();
                    netMvInfos.forEach(mvInfo -> {
                        globalExecutor.submit(() -> updateCollection(mvInfo));
                        // 设置图片加载后重绘的事件
                        mvInfo.setInvokeLater(() -> {
                            updateRenderer(netMvList);
                            updateRenderer(collectionList);
                            netMvList.repaint();
                            collectionList.repaint();
                        });
                        netMvListModel.addElement(mvInfo);
                    });
                    netMvList.setModel(netMvListModel);
                    netMvBackwardButton.setEnabled(true);
                    netMvLeftBox.remove(netMvKeywordsPanelScrollPane);
                    if (netMvListModel.isEmpty()) {
                        netMvLeftBox.remove(netMvScrollPane);
                        netMvLeftBox.add(emptyHintPanel);
                    } else {
                        netMvLeftBox.remove(emptyHintPanel);
                        netMvLeftBox.add(netMvScrollPane);
                    }
                    netMvScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_MV);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看视频分集
        netMvVideoEpisodeMenuItem.addActionListener(e -> {
            NetMvInfo netMvInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_MV) netMvInfo = netMvList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netMvInfo = (NetMvInfo) collectionList.getSelectedValue();
            else netMvInfo = (NetMvInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForMv();
                    // 获取视频分集
                    CommonResult<NetMvInfo> result = MusicServerUtils.getVideoEpisodes(currEpisodesMvInfo = netMvInfo, netMvCurrPage = 1, limit);
                    List<NetMvInfo> netMvInfos = result.data;
                    Integer total = result.total;
                    netMvMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netMvTitleLabel.setText(netMvInfo.toSimpleString() + " 的分集");
                    netMvToolBar.removeAll();
                    netMvToolBar.add(netMvBackwardButton);
                    netMvToolBar.add(Box.createHorizontalGlue());
                    netMvToolBar.add(netMvTitleLabel);
                    netMvToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netMvCountLabel.setText(String.format(PAGINATION_MSG, netMvCurrPage, netMvMaxPage));
                    netMvCountPanel.add(netMvCountLabel, netMvCountPanel.getComponentIndex(netMvCountLabel));
                    netMvLeftBox.add(netMvCountPanel);
                    netMvCountPanel.setVisible(true);
                    netMvSourceComboBox.setVisible(false);
                    netMvSortTypeComboBox.setVisible(false);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netMvList.setModel(emptyListModel);
                    netMvListModel.clear();
                    netMvInfos.forEach(mvInfo -> {
                        globalExecutor.submit(() -> updateCollection(mvInfo));
                        // 设置图片加载后重绘的事件
                        mvInfo.setInvokeLater(() -> {
                            updateRenderer(netMvList);
                            updateRenderer(collectionList);
                            netMvList.repaint();
                            collectionList.repaint();
                        });
                        netMvListModel.addElement(mvInfo);
                    });
                    netMvList.setModel(netMvListModel);
                    netMvBackwardButton.setEnabled(true);
                    netMvLeftBox.remove(netMvKeywordsPanelScrollPane);
                    if (netMvListModel.isEmpty()) {
                        netMvLeftBox.remove(netMvScrollPane);
                        netMvLeftBox.add(emptyHintPanel);
                    } else {
                        netMvLeftBox.remove(emptyHintPanel);
                        netMvLeftBox.add(netMvScrollPane);
                    }
                    netMvScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_MV);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看 MV 歌手/发布者
        netMvCreatorMenuItem.addActionListener(e -> {
            NetMvInfo netMvInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_MV) netMvInfo = netMvList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netMvInfo = (NetMvInfo) collectionList.getSelectedValue();
            else netMvInfo = (NetMvInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    if (netMvInfo.isRealMV()) {
                        clearRequestForArtist();
                        // 查看歌手
                        currArtistMvInfo = netMvInfo;
                        CommonResult<NetArtistInfo> result = MusicServerUtils.getArtistInfo(netMvInfo.getCreatorId(), netMvInfo.getSource());
                        List<NetArtistInfo> netArtistInfos = result.data;
                        netArtistCurrPage = netArtistMaxPage = 1;
                        // 标题
                        netArtistTitleLabel.setText(netMvInfo.toSimpleString() + " 的歌手");
                        netArtistToolBar.removeAll();
                        netArtistToolBar.add(netArtistBackwardButton);
                        netArtistToolBar.add(Box.createHorizontalGlue());
                        netArtistToolBar.add(netArtistTitleLabel);
                        netArtistToolBar.add(Box.createHorizontalGlue());
                        // 更新数量显示
                        netArtistCountLabel.setText(String.format(PAGINATION_MSG, netArtistCurrPage, netArtistMaxPage));
                        netArtistCountPanel.add(netArtistCountLabel, netArtistCountPanel.getComponentIndex(netArtistCountLabel));
                        netArtistLeftBox.add(netArtistCountPanel);
                        netArtistSourceComboBox.setVisible(false);
                        netArtistPlayAllButton.setVisible(false);
                        netArtistCountPanel.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netArtistList.setModel(emptyListModel);
                        netArtistListModel.clear();
                        netArtistInfos.forEach(artistInfo -> {
                            globalExecutor.submit(() -> updateCollection(artistInfo));
                            // 设置图片加载后重绘的事件
                            artistInfo.setInvokeLater(() -> {
                                updateRenderer(netArtistList);
                                updateRenderer(collectionList);
                                netArtistList.repaint();
                                collectionList.repaint();
                            });
                            netArtistListModel.addElement(artistInfo);
                        });
                        netArtistList.setModel(netArtistListModel);
                        netArtistBackwardButton.setEnabled(true);
                        netArtistLeftBox.remove(netArtistKeywordsPanelScrollPane);
                        if (netArtistListModel.isEmpty()) {
                            netArtistLeftBox.remove(netArtistScrollPane);
                            netArtistLeftBox.add(emptyHintPanel);
                        } else {
                            netArtistLeftBox.remove(emptyHintPanel);
                            netArtistLeftBox.add(netArtistScrollPane);
                        }
                        netArtistScrollPane.getVerticalScrollBar().setValue(0);
                        tabbedPane.setSelectedIndex(TabIndex.NET_ARTIST);
                    } else {
                        clearRequestForUser();
                        // 获取 MV 发布者
                        currUserMvInfo = netMvInfo;
                        CommonResult<NetUserInfo> result = MusicServerUtils.getUserInfo(netMvInfo.getCreatorId(), netMvInfo.getSource());
                        List<NetUserInfo> netUserInfos = result.data;
                        netUserCurrPage = netUserMaxPage = 1;
                        // 标题
                        netUserTitleLabel.setText(netMvInfo.getName() + " 的发布者");
                        netUserToolBar.removeAll();
                        netUserToolBar.add(netUserBackwardButton);
                        netUserToolBar.add(Box.createHorizontalGlue());
                        netUserToolBar.add(netUserTitleLabel);
                        netUserToolBar.add(Box.createHorizontalGlue());
                        // 更新数量显示
                        netUserCountLabel.setText(String.format(PAGINATION_MSG, netUserCurrPage, netUserMaxPage));
                        netUserCountPanel.add(netUserCountLabel, netUserCountPanel.getComponentIndex(netUserCountLabel));
                        netUserLeftBox.add(netUserCountPanel);
                        netUserSourceComboBox.setVisible(false);
                        netUserPlayAllButton.setVisible(false);
                        netUserRecordTypeComboBox.setVisible(false);
                        netUserCountPanel.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netUserList.setModel(emptyListModel);
                        netUserListModel.clear();
                        netUserInfos.forEach(userInfo -> {
                            globalExecutor.submit(() -> updateCollection(userInfo));
                            // 设置图片加载后重绘的事件
                            userInfo.setInvokeLater(() -> {
                                updateRenderer(netUserList);
                                updateRenderer(collectionList);
                                netUserList.repaint();
                                collectionList.repaint();
                            });
                            netUserListModel.addElement(userInfo);
                        });
                        netUserList.setModel(netUserListModel);
                        netUserBackwardButton.setEnabled(true);
                        netUserLeftBox.remove(netUserKeywordsPanelScrollPane);
                        if (netUserListModel.isEmpty()) {
                            netUserLeftBox.remove(netUserScrollPane);
                            netUserLeftBox.add(emptyHintPanel);
                        } else {
                            netUserLeftBox.remove(emptyHintPanel);
                            netUserLeftBox.add(netUserScrollPane);
                        }
                        netUserScrollPane.getVerticalScrollBar().setValue(0);
                        tabbedPane.setSelectedIndex(TabIndex.NET_USER);
                    }
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看评论
        netMvCommentMenuItem.addActionListener(e -> {
            NetMvInfo netMvInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_MV) netMvInfo = netMvList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL) netMvInfo = (NetMvInfo) collectionList.getSelectedValue();
            else netMvInfo = (NetMvInfo) itemRecommendList.getSelectedValue();
            getComments(netMvInfo, true);
        });
        // 复制名称
        netMvCopyNameMenuItem.addActionListener(e -> {
            Object o;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_MV) o = netMvList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL) o = collectionList.getSelectedValue();
            else o = itemRecommendList.getSelectedValue();
            StringSelection stringSelection = new StringSelection(((NetMvInfo) o).toSimpleString());
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });
        // MV 列表右键菜单项
        netMvPopupMenu.add(netMvPlayMenuItem);
        netMvPopupMenu.add(netMvCollectMenuItem);
        netMvPopupMenu.add(netMvDownloadMenuItem);
        netMvPopupMenu.add(netMvSimilarMvMenuItem);
        netMvPopupMenu.add(netMvVideoEpisodeMenuItem);
        netMvPopupMenu.add(netMvCreatorMenuItem);
        netMvPopupMenu.add(netMvCommentMenuItem);
        netMvPopupMenu.add(netMvCopyNameMenuItem);

        // 搜索历史面板
        // 清空搜索历史按钮
        netMvClearHistorySearchButton.addActionListener(e -> {
            netMvHistorySearchInnerPanel2.removeAll();
            netMvKeywordsPanel.remove(netMvHistorySearchPanel);
            netMvKeywordsPanel.repaint();
        });
        netMvClearHistorySearchButton.setPreferredSize(new Dimension(20, 20));
        netMvClearHistorySearchButton.setToolTipText(CLEAR_HISTORY_SEARCH_TIP);
        netMvClearHistorySearchButton.addMouseListener(new ButtonMouseListener(netMvClearHistorySearchButton, THIS));

        netMvHistorySearchInnerPanel1.add(netMvHistorySearchLabel);
        netMvHistorySearchInnerPanel1.add(netMvClearHistorySearchButton);
        netMvHistorySearchInnerPanel1.setLayout(new FlowLayout(FlowLayout.LEFT));
        netMvHistorySearchInnerPanel1.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        netMvHistorySearchInnerPanel1.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netMvHistorySearchInnerPanel2.setLayout(new FlowLayout(FlowLayout.LEFT));
        netMvHistorySearchInnerPanel2.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        netMvHistorySearchPanel.setLayout(new BoxLayout(netMvHistorySearchPanel, BoxLayout.Y_AXIS));
        netMvHistorySearchPanel.add(netMvHistorySearchInnerPanel1);
        netMvHistorySearchPanel.add(netMvHistorySearchInnerPanel2);
        // 关键词面板
        netMvKeywordsPanel.setLayout(new BoxLayout(netMvKeywordsPanel, BoxLayout.Y_AXIS));
//        // 滚动条监听器
//        netMvKeywordsPanelScrollPane.addMouseListener(new ScrollPaneListener(netMvKeywordsPanelScrollPane, THIS));

        // 同时限制面板与滚动条的大小才能保证按钮不超出窗口！！！
        Dimension d = new Dimension(900, 500);
        netMvKeywordsPanel.setPreferredSize(d);
        netMvKeywordsPanelScrollPane.setPreferredSize(d);

        //  MV 最佳大小
        netMvScrollPane.setPreferredSize(new Dimension(200, 600));
        netMvLeftBox.add(netMvScrollPane);
    }

    // 初始化榜单工具栏
    private void netRankingToolBarInit() {
        // 只能输入数字
        netRankingPageTextField.setDocument(new SafeDocument(0, Integer.MAX_VALUE));
        // 后退按钮事件
        netRankingBackwardButton.addActionListener(e -> {
            netMusicListForRankingModel.clear();
            // 从在线音乐列表切换回榜单列表
            netRankingPlayAllButton.setVisible(false);
            netRankingLeftBox.remove(rankingListBox);
            netRankingLeftBox.add(netRankingCountPanel);
            netRankingLeftBox.add(netRankingScrollPane);
            // 更新榜单歌曲数量显示
            netRankingCountLabel.setText(String.format(PAGINATION_MSG, netRankingCurrPage, netRankingMaxPage));
            netRankingBackwardButton.setEnabled(false);
            netRankingSourceComboBox.setVisible(true);
            // 切换后一定要刷新！
            netRankingLeftBox.repaint();
        });
        // 获取榜单事件
        getRankingAction = () -> {
            loadingAndRun(() -> {
                try {
                    // 搜索榜单并显示榜单列表
                    CommonResult<NetRankingInfo> result = MusicServerUtils.getRankings(netRankingSourceComboBox.getSelectedIndex());
                    List<NetRankingInfo> netRankingInfos = result.data;
//                        Integer total = result.total;
//                        netRankingMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    netRankingMaxPage = 1;
                    // 更新数量显示
                    netRankingCountLabel.setText(String.format(PAGINATION_MSG, netRankingCurrPage, netRankingMaxPage));
                    netRankingCountPanel.setVisible(true);
                    netRankingSourceComboBox.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netRankingList.setModel(emptyListModel);
                    netRankingListModel.clear();
                    netRankingInfos.forEach(rankingInfo -> {
                        globalExecutor.submit(() -> updateCollection(rankingInfo));
                        // 设置图片加载后重绘的事件
                        rankingInfo.setInvokeLater(() -> {
                            netRankingList.repaint();
                            collectionList.repaint();
                        });
                        netRankingListModel.addElement(rankingInfo);
                    });
                    netRankingList.setModel(netRankingListModel);
                    if (netRankingListModel.isEmpty()) {
                        netRankingLeftBox.remove(netRankingScrollPane);
                        netRankingLeftBox.add(emptyHintPanel);
                    } else {
                        netRankingLeftBox.remove(emptyHintPanel);
                        netRankingLeftBox.add(netRankingScrollPane);
                    }
                    netRankingScrollPane.getVerticalScrollBar().setValue(0);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        };
        // 搜索榜单内歌曲并显示在在线播放列表
        Runnable searchMusicInRanking = () -> {
            if (!netMusicListForRankingModel.isEmpty()) {
                loadingAndRun(() -> {
                    try {
                        NetRankingInfo rankingInfo = netRankingList.getSelectedValue();
                        CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInRanking(
                                rankingInfo.getId(), rankingInfo.getSource(), limit, netMusicInRankingCurrPage);
                        List<NetMusicInfo> musicInfos = result.data;
                        Integer total = result.total;
                        netMusicInRankingMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netRankingCountLabel.setText(String.format(PAGINATION_MSG, netMusicInRankingCurrPage, netMusicInRankingMaxPage));
                        netRankingCountPanel.add(netRankingCountLabel, netRankingCountPanel.getComponentIndex(netRankingCountLabel));
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netMusicList.setModel(emptyListModel);
                        netMusicListForRankingModel.clear();
                        musicInfos.forEach(musicInfo -> {
                            globalExecutor.submit(() -> updateCollection(musicInfo));
                            netMusicListForRankingModel.addElement(musicInfo);
                        });
                        netMusicList.setModel(netMusicListForRankingModel);
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                        if (netMusicListForRankingModel.isEmpty()) {
                            rankingListCountBox.remove(netMusicScrollPane);
                            rankingListCountBox.add(emptyHintPanel);
                        } else {
                            rankingListCountBox.remove(emptyHintPanel);
                            rankingListCountBox.add(netMusicScrollPane);
                        }
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        };
        // 播放全部
        netRankingPlayAllButton.addActionListener(e -> netRankingPlayAllMenuItem.doClick());
        // 刷新按钮事件
        netRankingRefreshButton.addActionListener(e -> {
            // 当前显示的是榜单列表，刷新榜单
            if (netRankingLeftBox.getComponent(netRankingLeftBox.getComponentCount() - 1)
                    == netRankingScrollPane) {
                getRankingAction.run();
            }
            // 当前显示的是某榜单的歌曲，刷新歌曲
            else {
                searchMusicInRanking.run();
            }
        });
        // 第一页按钮事件
        netRankingStartPageButton.addActionListener(e -> {
            Component lc = netRankingLeftBox.getComponent(netRankingLeftBox.getComponentCount() - 1);
            // 当前显示的是榜单列表，跳到第一页榜单
            if (lc == netRankingScrollPane || lc == emptyHintPanel) {
                if (netRankingCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netRankingCurrPage = 1;
                getRankingAction.run();
            }
            // 当前显示的是某榜单的歌曲，跳到第一页歌曲
            else {
                if (netMusicInRankingCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInRankingCurrPage = 1;
                searchMusicInRanking.run();
            }
        });
        // 上一页按钮事件
        netRankingLastPageButton.addActionListener(e -> {
            Component lc = netRankingLeftBox.getComponent(netRankingLeftBox.getComponentCount() - 1);
            // 当前显示的是榜单列表，跳到上一页榜单
            if (lc == netRankingScrollPane || lc == emptyHintPanel) {
                if (netRankingCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netRankingCurrPage--;
                getRankingAction.run();
            }
            // 当前显示的是某榜单的歌曲，跳到上一页歌曲
            else {
                if (netMusicInRankingCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInRankingCurrPage--;
                searchMusicInRanking.run();
            }
        });
        // 下一页按钮事件
        netRankingNextPageButton.addActionListener(e -> {
            Component lc = netRankingLeftBox.getComponent(netRankingLeftBox.getComponentCount() - 1);
            // 当前显示的是榜单列表，跳到下一页榜单
            if (lc == netRankingScrollPane || lc == emptyHintPanel) {
                if (netRankingCurrPage == netRankingMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netRankingCurrPage++;
                getRankingAction.run();
            }
            // 当前显示的是某榜单的歌曲，跳到下一页歌曲
            else {
                if (netMusicInRankingCurrPage == netMusicInRankingMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInRankingCurrPage++;
                searchMusicInRanking.run();
            }
        });
        // 最后一页按钮事件
        netRankingEndPageButton.addActionListener(e -> {
            Component lc = netRankingLeftBox.getComponent(netRankingLeftBox.getComponentCount() - 1);
            // 当前显示的是榜单列表，跳到最后一页榜单
            if (lc == netRankingScrollPane || lc == emptyHintPanel) {
                if (netRankingCurrPage == netRankingMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netRankingCurrPage = netRankingMaxPage;
                getRankingAction.run();
            }
            // 当前显示的是某榜单的歌曲，跳到最后一页歌曲
            else {
                if (netMusicInRankingCurrPage == netMusicInRankingMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInRankingCurrPage = netMusicInRankingMaxPage;
                searchMusicInRanking.run();
            }
        });
        // 跳页按钮事件
        netRankingGoButton.addActionListener(e -> {
            // 当前显示的是榜单列表，跳页榜单
            if (netRankingLeftBox.getComponent(netRankingLeftBox.getComponentCount() - 1)
                    == netRankingScrollPane) {
                String text = netRankingPageTextField.getText();
                netRankingPageTextField.setText("");
                if ("".equals(text)) return;
                int destPage = Integer.parseInt(text);
                if (destPage < 1 || destPage > netRankingMaxPage) {
                    new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                    return;
                }
                getRankingAction.run();
            }
            // 当前显示的是某榜单的歌曲，跳页歌曲
            else {
                String text = netRankingPageTextField.getText();
                netRankingPageTextField.setText("");
                if ("".equals(text)) return;
                int destPage = Integer.parseInt(text);
                if (destPage < 1 || destPage > netMusicInRankingMaxPage) {
                    new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInRankingCurrPage = destPage;
                searchMusicInRanking.run();
            }
        });
        // 按钮被禁止的图标
        netRankingBackwardButton.setEnabled(false);
        // 按钮初始不可见
        netRankingPlayAllButton.setVisible(false);
        // 按钮大小限制
        Dimension dimension = new Dimension(20, 20);
        netRankingRefreshButton.setPreferredSize(dimension);
        netRankingStartPageButton.setPreferredSize(dimension);
        netRankingLastPageButton.setPreferredSize(dimension);
        netRankingGoButton.setPreferredSize(dimension);
        netRankingNextPageButton.setPreferredSize(dimension);
        netRankingEndPageButton.setPreferredSize(dimension);
        // 按钮悬浮与点击效果
        netRankingBackwardButton.addMouseListener(new ButtonMouseListener(netRankingBackwardButton, THIS));
        netRankingPlayAllButton.addMouseListener(new ButtonMouseListener(netRankingPlayAllButton, THIS));
        netRankingRefreshButton.addMouseListener(new ButtonMouseListener(netRankingRefreshButton, THIS));
        netRankingStartPageButton.addMouseListener(new ButtonMouseListener(netRankingStartPageButton, THIS));
        netRankingLastPageButton.addMouseListener(new ButtonMouseListener(netRankingLastPageButton, THIS));
        netRankingGoButton.addMouseListener(new ButtonMouseListener(netRankingGoButton, THIS));
        netRankingNextPageButton.addMouseListener(new ButtonMouseListener(netRankingNextPageButton, THIS));
        netRankingEndPageButton.addMouseListener(new ButtonMouseListener(netRankingEndPageButton, THIS));
        // 帮助提示
        netRankingBackwardButton.setToolTipText(BACKWARD_TIP);
        netRankingPlayAllButton.setToolTipText(PLAY_ALL_TIP);
        netRankingRefreshButton.setToolTipText(REFRESH_TIP);
        netRankingStartPageButton.setToolTipText(START_PAGE_TIP);
        netRankingLastPageButton.setToolTipText(LAST_PAGE_TIP);
        netRankingGoButton.setToolTipText(GO_TIP);
        netRankingNextPageButton.setToolTipText(NEXT_PAGE_TIP);
        netRankingEndPageButton.setToolTipText(END_PAGE_TIP);

        netRankingToolBar.add(netRankingBackwardButton);
        netRankingToolBar.add(Box.createHorizontalGlue());
        netRankingLeftBox.add(netRankingToolBar);

        for (String name : NetMusicSource.names) netRankingSourceComboBox.addItem(name);
        netRankingSourceComboBox.addItemListener(e -> {
            // 避免事件被处理 2 次！
            if (e.getStateChange() != ItemEvent.SELECTED) return;
            netRankingCurrPage = 1;
            netRankingRefreshButton.doClick();
        });

        // 榜单数量和当前歌曲标签
        netRankingCountPanel.add(netRankingSourceComboBox);
        netRankingCountPanel.add(netRankingPlayAllButton);
        netRankingCountPanel.add(netRankingStartPageButton);
        netRankingCountPanel.add(netRankingLastPageButton);
        netRankingCountPanel.add(netRankingCountLabel);
        netRankingCountPanel.add(netRankingNextPageButton);
        netRankingCountPanel.add(netRankingEndPageButton);
        netRankingCountPanel.add(netRankingRefreshButton);
        netRankingCountPanel.add(netRankingPageTextField);
        netRankingCountPanel.add(netRankingGoButton);
        netRankingCountPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netRankingCountPanel.setVisible(false);
        netRankingLeftBox.add(netRankingCountPanel);
    }

    // 初始化在线榜单列表
    private void netRankingListInit() {
        netRankingList.setModel(netRankingListModel);
        netRankingList.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int index = netRankingList.locationToIndex(e.getPoint());
                Rectangle bounds = netRankingList.getCellBounds(index, index);
                if (bounds == null) return;
                setHoverIndex(bounds.contains(e.getPoint()) ? index : -1);
            }

            private void setHoverIndex(int index) {
                TranslucentNetRankingListRenderer renderer = (TranslucentNetRankingListRenderer) netRankingList.getCellRenderer();
                if (renderer == null) return;
                int hoverIndex = renderer.getHoverIndex();
                if (hoverIndex == index) return;
                renderer.setHoverIndex(index);
                netRankingList.repaint();
            }
        });
        netRankingList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                TranslucentNetRankingListRenderer renderer = (TranslucentNetRankingListRenderer) netRankingList.getCellRenderer();
                if (renderer == null) return;
                renderer.setHoverIndex(-1);
                netRankingList.repaint();
            }
        });
        // 打开榜单
        Runnable openRankingAction = () -> {
            List<Future<?>> taskList = new LinkedList<>();
            loadingAndRun(() -> {
                NetRankingInfo rankingInfo = netRankingList.getSelectedValue();
                // 加载封面图片和描述
                taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                    BufferedImage coverImg = ImageUtils.borderShadow(ImageUtils.dye(loadingImage, currUIStyle.getLabelColor()));
                    rankingCoverAndNameLabel.setIcon(new ImageIcon(coverImg));
                    rankingCoverAndNameLabel.setText(LOADING_MSG);
                    rankingDescriptionLabel.setText(LOADING_MSG);
                    GlobalExecutors.imageExecutor.execute(() -> {
                        try {
                            MusicServerUtils.fillRankingInfo(rankingInfo);
                            rankingCoverAndNameLabel.setText(StringUtils.textToHtml(rankingInfo.getName()));
                            if (rankingInfo.getDescription() != null)
                                rankingDescriptionLabel.setText(StringUtils.textToHtml(rankingInfo.getDescription()));
                            if (rankingInfo.hasCoverImg()) {
                                rankingCoverAndNameLabel.setIcon(new ImageIcon(
                                        ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(rankingInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                ));
                            } else {
                                rankingInfo.setInvokeLater(() -> {
                                    rankingCoverAndNameLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(rankingInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                    netRankingList.repaint();
                                });
                            }
                        } catch (HttpException e) {
                            rankingCoverAndNameLabel.setText(LOAD_FAILED);
                            rankingDescriptionLabel.setText(LOAD_FAILED);
                        }
                    });
                }));


                taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                    try {
                        // 得到榜单的音乐信息
                        CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInRanking(
                                rankingInfo.getId(), rankingInfo.getSource(), limit, netMusicInRankingCurrPage = 1);
                        List<NetMusicInfo> musicInfos = result.data;
                        Integer total = result.total;
                        netMusicInRankingMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新榜单歌曲数量显示
//                            netCurrRankingLabel.setText(StringUtils.textToHtml(RankingInfo.getName()));
                        netRankingCountLabel.setText(String.format(PAGINATION_MSG, netMusicInRankingCurrPage, netMusicInRankingMaxPage));
                        rankingListCountBox.add(netRankingCountPanel);
                        rankingListBox.add(rankingListCountBox);
                        // 榜单列表切换到在线音乐列表
                        netMusicList.setModel(netMusicListForRankingModel);
                        netRankingLeftBox.remove(netRankingScrollPane);
                        netRankingLeftBox.add(rankingListBox);
                        // 添加数据建议弄到更新数量显示之后，不然可能会不显示！
                        netMusicList.setModel(emptyListModel);
                        netMusicListForRankingModel.clear();
                        musicInfos.forEach(musicInfo -> {
                            globalExecutor.submit(() -> updateCollection(musicInfo));
                            netMusicListForRankingModel.addElement(musicInfo);
                        });
                        netMusicList.setModel(netMusicListForRankingModel);
                        rankingDescriptionScrollPane.getVerticalScrollBar().setValue(0);
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                        netRankingBackwardButton.setEnabled(true);
                        netRankingSourceComboBox.setVisible(false);
                        netRankingPlayAllButton.setVisible(true);
                        if (netMusicListForRankingModel.isEmpty()) {
                            rankingListCountBox.remove(netMusicScrollPane);
                            rankingListCountBox.add(emptyHintPanel);
                        } else {
                            rankingListCountBox.remove(emptyHintPanel);
                            rankingListCountBox.add(netMusicScrollPane);
                        }
                        // 切换后一定要刷新！
                        netRankingLeftBox.repaint();
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                }));

                taskList.forEach(task -> {
                    try {
                        task.get();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    } catch (ExecutionException e) {
                        e.printStackTrace();
                    }
                });
            });
        };
        netRankingList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    openRankingAction.run();
                }
            }
        });
        netRankingList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                // 鼠标左键双击打开榜单
                if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    openRankingAction.run();
                }
                // 右键弹出菜单
                else if (e.getButton() == MouseEvent.BUTTON3) {
                    if (netRankingList.getModel().getSize() != 0) {
                        // 得到鼠标光标所在的选项并选中
                        int index = netRankingList.locationToIndex(e.getPoint());
                        if (index == -1) return;
                        if (!netRankingList.isSelectedIndex(index)) netRankingList.setSelectedIndex(index);
                        if (hasBeenCollected(netRankingList.getSelectedValue())) {
                            netRankingCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                            netRankingCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);
                        } else {
                            netRankingCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, currUIStyle.getButtonColor()));
                            netRankingCollectMenuItem.setText(COLLECT_MENU_ITEM_TEXT);
                        }

                        netRankingPopupMenu.show(netRankingList, e.getX(), e.getY());
                    }
                }
            }
        });
        // 打开榜单
        netRankingOpenMenuItem.addActionListener(e -> {
            int index = tabbedPane.getSelectedIndex();
            if (index == TabIndex.NET_RANKING) openRankingAction.run();
            else if (index == TabIndex.PERSONAL) openCollectionItemAction.run();
            else openRecommendItemAction.run();
        });
        // 播放全部
        netRankingPlayAllMenuItem.addActionListener(e -> {
            NetRankingInfo netRankingInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_RANKING) netRankingInfo = netRankingList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netRankingInfo = (NetRankingInfo) collectionList.getSelectedValue();
            else netRankingInfo = (NetRankingInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInRanking(
                        netRankingInfo.getId(), netRankingInfo.getSource(), 1000, 1);
                List<NetMusicInfo> musicInfos = result.data;
                if (musicInfos.isEmpty()) {
                    new TipDialog(THIS, NO_MUSIC_MSG).showDialog();
                    return;
                }
                playQueue.setModel(emptyListModel);
                playQueueModel.clear();
                musicInfos.forEach(musicInfo -> {
                    globalExecutor.submit(() -> updateCollection(musicInfo));
                    playQueueModel.addElement(musicInfo);
                });
                playQueue.setModel(playQueueModel);
                playQueue.setSelectedIndex(0);
                playExecutor.submit(() -> playSelected(playQueue, true));
            });
        });
        // 收藏榜单
        netRankingCollectMenuItem.addActionListener(e -> {
            int index = tabbedPane.getSelectedIndex();
            CustomList list;
            if (index == TabIndex.NET_RANKING) list = netRankingList;
            else if (index == TabIndex.PERSONAL) list = collectionList;
            else list = itemRecommendList;
            ListModel model = collectionList.getModel();
            boolean needRefresh = model == rankingCollectionModel;
            if (netRankingCollectMenuItem.getText().equals(COLLECT_MENU_ITEM_TEXT)) {
                List values = list.getSelectedValuesList();
                if (needRefresh) collectionList.setModel(emptyListModel);
                for (int i = values.size() - 1; i >= 0; i--) {
                    Object o = values.get(i);
                    if (hasBeenCollected(o)) continue;
                    rankingCollectionModel.add(0, o);
                }
                if (needRefresh) collectionList.setModel(model);
                new TipDialog(THIS, COLLECT_SUCCESS_MSG).showDialog();
            } else {
                List values = list.getSelectedValuesList();
                if (needRefresh) collectionList.setModel(emptyListModel);
                values.forEach(o -> {
                    if (list == collectionList || hasBeenCollected(o)) {
                        rankingCollectionModel.removeElement(o);
                    }
                });
                if (needRefresh) collectionList.setModel(model);
                new TipDialog(THIS, CANCEL_COLLECTION_SUCCESS_MSG).showDialog();
            }
        });
        // 查看评论
        netRankingCommentMenuItem.addActionListener(e -> {
            NetRankingInfo netRankingInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_RANKING) netRankingInfo = netRankingList.getSelectedValue();
            else netRankingInfo = (NetRankingInfo) collectionList.getSelectedValue();
            getComments(netRankingInfo, true);
        });
        // 复制名称
        netRankingCopyNameMenuItem.addActionListener(e -> {
            NetRankingInfo netRankingInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_RANKING) netRankingInfo = netRankingList.getSelectedValue();
            else netRankingInfo = (NetRankingInfo) collectionList.getSelectedValue();
            StringSelection stringSelection = new StringSelection(netRankingInfo.toSimpleString());
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });
        // 榜单列表右键菜单项
        netRankingPopupMenu.add(netRankingOpenMenuItem);
        netRankingPopupMenu.add(netRankingPlayAllMenuItem);
        netRankingPopupMenu.add(netRankingCollectMenuItem);
        netRankingPopupMenu.add(netRankingCommentMenuItem);
        netRankingPopupMenu.add(netRankingCopyNameMenuItem);

        // 榜单最佳大小
        netRankingScrollPane.setPreferredSize(new Dimension(200, 600));
        netRankingLeftBox.add(netRankingScrollPane);
    }

    // 初始化用户工具栏
    private void netUserToolBarInit() {
        netUserSearchTextField.addFocusListener(new TextFieldHintListener(netUserSearchTextField, "用户", currUIStyle.getForeColor()));
        netUserSearchTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                if (netUserSearchTextField.isOccupied()) {
                    netUserClearInputButton.setVisible(true);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if (netUserSearchTextField.getText().equals("")) netUserClearInputButton.setVisible(false);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });
        // 只能输入数字
        netUserPageTextField.setDocument(new SafeDocument(0, Integer.MAX_VALUE));
        // 后退按钮事件
        netUserBackwardButton.addActionListener(e -> {
            int lastComponentIndex = netUserLeftBox.getComponentCount() - 1;
            Component c = netUserLeftBox.getComponent(lastComponentIndex);
            if (c != netUserScrollPane && c != emptyHintPanel) {
                netMusicListForUserModel.clear();
                // 用户播放记录下拉框不可见
                netUserRecordTypeComboBox.setVisible(false);
                // 从在线音乐列表切换回用户列表
                netUserPlayAllButton.setVisible(false);
                netUserLeftBox.remove(userListBox);
                netUserLeftBox.add(netUserCountPanel);
                netUserLeftBox.add(netUserScrollPane);
                // 添加回工具栏的搜索
                netUserToolBar.remove(1);
                netUserToolBar.add(netUserSearchTextField);
                netUserToolBar.add(netUserClearInputButton);
                netUserToolBar.add(netUserSearchButton);
                // 添加回工具栏的搜索/标题
                netUserToolBar.removeAll();
                netUserToolBar.add(netUserBackwardButton);
                if (currFollowUserUserInfo == null && currFollowedUserUserInfo == null
                        && currUserPlaylistInfo == null && currUserMvInfo == null && currUserRadioInfo == null
                        && currUserCommentInfo == null && currSubscriberPlaylistInfo == null
                        && currSubscriberRadioInfo == null && currUserArtistInfo == null
                        && currAuthorMusicInfo == null && currAuthorAlbumInfo == null) {
                    // 删除标题标签
                    netUserToolBar.add(netUserSearchTextField);
                    netUserToolBar.add(netUserClearInputButton);
                    netUserToolBar.add(netUserSearchButton);
                    netUserSourceComboBox.setVisible(true);
                } else {
                    netUserToolBar.add(Box.createHorizontalGlue());
                    netUserToolBar.add(netUserTitleLabel);
                    netUserToolBar.add(Box.createHorizontalGlue());
                }
                // 更新用户歌曲数量显示
//                netCurrUserLabel.setText("");
                netUserCountLabel.setText(String.format(PAGINATION_MSG, netUserCurrPage, netUserMaxPage));
//                netUserBackwardButton.setEnabled(false);
            }
            // 后退到关键词面板
            else {
                // 删除标题标签
                netUserToolBar.removeAll();
                netUserToolBar.add(netUserBackwardButton);
                netUserToolBar.add(netUserSearchTextField);
                netUserToolBar.add(netUserClearInputButton);
                netUserToolBar.add(netUserSearchButton);
                clearRequestForUser();

                netUserListModel.clear();
                netUserCountPanel.setVisible(false);
                netUserLeftBox.remove(emptyHintPanel);
                netUserLeftBox.remove(netUserScrollPane);
                netUserLeftBox.add(netUserKeywordsPanelScrollPane);
                netUserBackwardButton.setEnabled(false);
            }
            // 切换后一定要刷新！
            netUserLeftBox.repaint();
        });
        // 清除输入事件
        netUserClearInputButton.addActionListener(e -> {
            netUserSearchTextField.requestFocus();
            netUserSearchTextField.setText("");
            netUserBackwardButton.requestFocus();
        });
        // 搜索用户按钮事件
        netUserSearchButton.addActionListener(e -> {
            netUserCurrKeyword = netUserSearchTextField.getText();
            if (!netUserCurrKeyword.equals("")) {
                // 关键词加入搜索历史
                DialogButton b = new DialogButton(netUserCurrKeyword);
                b.addActionListener(event -> {
                    netUserSearchTextField.requestFocus();
                    netUserSearchTextField.setText(b.getText());
                    netUserClearInputButton.setVisible(true);
                    netUserLeftBox.remove(netUserKeywordsPanelScrollPane);
                    netUserLeftBox.add(netUserScrollPane);
                    netUserSearchButton.doClick();
                });
                // 右击删除历史
                b.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseReleased(MouseEvent e) {
                        if (e.getButton() == MouseEvent.BUTTON3) {
                            netUserHistorySearchInnerPanel2.remove(b);
                            netUserHistorySearchInnerPanel2.repaint();
                            if (netUserHistorySearchInnerPanel2.getComponentCount() == 0) {
                                netUserKeywordsPanel.remove(netUserHistorySearchPanel);
                                netUserKeywordsPanel.repaint();
                            }
                        }
                    }
                });
                b.setToolTipText(REMOVE_HISTORY_KEYWORD_TIP);
                b.setForeColor(currUIStyle.getButtonColor());
                // 先删除重复的关键词
                removeKeywordInHistorySearch(netUserCurrKeyword, HistorySearchType.NET_USER);
                netUserHistorySearchInnerPanel2.add(b, 0);
                // 删除超出上限的最后一个关键词
                int c = netUserHistorySearchInnerPanel2.getComponentCount();
                if (c > maxSearchHistoryCount)
                    netUserHistorySearchInnerPanel2.remove(c - 1);
                // 显示 “搜索历史” 面板
                netUserKeywordsPanel.add(netUserHistorySearchPanel);
                // 更新 LAF，防止按钮样式不正确
                SwingUtilities.updateComponentTreeUI(netUserClearHistorySearchButton);
                netUserHistorySearchPanel.repaint();

                loadingAndRun(() -> {
                    try {
                        // 搜索用户并显示用户列表
                        CommonResult<NetUserInfo> result = MusicServerUtils.searchUsers(
                                netUserSourceComboBox.getSelectedIndex(), netUserCurrKeyword, limit, netUserCurrPage = 1);
                        List<NetUserInfo> netUserInfos = result.data;
                        Integer total = result.total;
                        netUserMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netUserCountLabel.setText(String.format(PAGINATION_MSG, netUserCurrPage, netUserMaxPage));
                        netUserCountPanel.add(netUserCountLabel, netUserCountPanel.getComponentIndex(netUserCountLabel));
                        netUserCountPanel.setVisible(true);
                        netUserSourceComboBox.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netUserList.setModel(emptyListModel);
                        netUserListModel.clear();
                        netUserInfos.forEach(userInfo -> {
                            globalExecutor.submit(() -> updateCollection(userInfo));
                            // 设置图片加载后重绘的事件
                            userInfo.setInvokeLater(() -> {
                                updateRenderer(netUserList);
                                updateRenderer(collectionList);
                                netUserList.repaint();
                                collectionList.repaint();
                            });
                            netUserListModel.addElement(userInfo);
                        });
                        netUserList.setModel(netUserListModel);
                        netUserBackwardButton.setEnabled(true);
                        netUserLeftBox.remove(netUserKeywordsPanelScrollPane);
                        if (netUserListModel.isEmpty()) {
                            netUserLeftBox.remove(netUserScrollPane);
                            netUserLeftBox.add(emptyHintPanel);
                        } else {
                            netUserLeftBox.remove(emptyHintPanel);
                            netUserLeftBox.add(netUserScrollPane);
                        }
                        netUserScrollPane.getVerticalScrollBar().setValue(0);
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        });
        // 搜索用户跳页事件
        Runnable searchUserGoPageAction = () -> {
            boolean followUserRequest = currFollowUserUserInfo != null, followedUserRequest = currFollowedUserUserInfo != null,
                    playlistRequest = currUserPlaylistInfo != null, mvRequest = currUserMvInfo != null, radioRequest = currUserRadioInfo != null,
                    commentRequest = currUserCommentInfo != null, playlistSubRequest = currSubscriberPlaylistInfo != null,
                    radioSubRequest = currSubscriberRadioInfo != null, artistRequest = currUserArtistInfo != null,
                    songRequest = currAuthorMusicInfo != null, albumRequest = currAuthorAlbumInfo != null;
            if (followUserRequest || followedUserRequest || playlistSubRequest || radioSubRequest || artistRequest ||
                    playlistRequest || mvRequest || radioRequest || commentRequest || songRequest || StringUtils.isNotEmpty(netUserCurrKeyword)) {
                loadingAndRun(() -> {
                    try {
                        // 搜索用户并显示用户列表
                        CommonResult<NetUserInfo> result = followUserRequest ? MusicServerUtils.getUserFollows(currFollowUserUserInfo, limit, netUserCurrPage)
                                : followedUserRequest ? MusicServerUtils.getUserFolloweds(currFollowedUserUserInfo, limit, netUserCurrPage)
                                : playlistSubRequest ? MusicServerUtils.getPlaylistSubscribers(currSubscriberPlaylistInfo, limit, netUserCurrPage)
                                : radioSubRequest ? MusicServerUtils.getRadioSubscribers(currSubscriberRadioInfo, limit, netUserCurrPage)
                                : artistRequest ? MusicServerUtils.getArtistFans(currUserArtistInfo, limit, netUserCurrPage)
                                : playlistRequest ? MusicServerUtils.getUserInfo(currUserPlaylistInfo.getCreatorId(), currUserPlaylistInfo.getSource())
                                : mvRequest ? MusicServerUtils.getUserInfo(currUserMvInfo.getCreatorId(), currUserMvInfo.getSource())
                                : radioRequest ? MusicServerUtils.getUserInfo(currUserRadioInfo.getDjId(), currUserRadioInfo.getSource())
                                : commentRequest ? MusicServerUtils.getUserInfo(currUserCommentInfo.getUserId(), currUserCommentInfo.getSource())
                                : songRequest ? MusicServerUtils.getUserInfo(currAuthorMusicInfo.getArtistId(), currAuthorMusicInfo.getSource())
                                : albumRequest ? MusicServerUtils.getUserInfo(currAuthorAlbumInfo.getArtistId(), currAuthorAlbumInfo.getSource())
                                : MusicServerUtils.searchUsers(netUserSourceComboBox.getSelectedIndex(), netUserCurrKeyword, limit, netUserCurrPage);
                        List<NetUserInfo> netUserInfos = result.data;
                        Integer total = result.total;
                        netUserMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        netUserCountLabel.setText(String.format(PAGINATION_MSG, netUserCurrPage, netUserMaxPage));
                        netUserCountPanel.add(netUserCountLabel, netUserCountPanel.getComponentIndex(netUserCountLabel));
                        netUserCountPanel.setVisible(true);
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netUserList.setModel(emptyListModel);
                        netUserListModel.clear();
                        netUserInfos.forEach(userInfo -> {
                            globalExecutor.submit(() -> updateCollection(userInfo));
                            // 设置图片加载后重绘的事件
                            userInfo.setInvokeLater(() -> {
                                updateRenderer(netUserList);
                                updateRenderer(collectionList);
                                netUserList.repaint();
                                collectionList.repaint();
                            });
                            netUserListModel.addElement(userInfo);
                        });
                        netUserList.setModel(netUserListModel);
                        netUserScrollPane.getVerticalScrollBar().setValue(0);
                        if (netUserListModel.isEmpty()) {
                            netUserLeftBox.remove(netUserScrollPane);
                            netUserLeftBox.add(emptyHintPanel);
                        } else {
                            netUserLeftBox.remove(emptyHintPanel);
                            netUserLeftBox.add(netUserScrollPane);
                        }
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        };
        // 搜索用户内歌曲并显示在在线播放列表
        Runnable searchMusicInUser = () -> {
//            if (!netMusicListForUserModel.isEmpty()) {
            loadingAndRun(() -> {
                try {
                    NetUserInfo userInfo = netUserList.getSelectedValue();
                    CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInUser(
                            netUserRecordTypeComboBox.getSelectedIndex(), userInfo, limit, netMusicInUserCurrPage);
                    List<NetMusicInfo> musicInfos = result.data;
                    Integer total = result.total;
                    netMusicInUserMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 更新数量显示
                    netUserCountLabel.setText(String.format(PAGINATION_MSG, netMusicInUserCurrPage, netMusicInUserMaxPage));
                    netUserCountPanel.add(netUserCountLabel, netUserCountPanel.getComponentIndex(netUserCountLabel));
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netMusicList.setModel(emptyListModel);
                    netMusicListForUserModel.clear();
                    musicInfos.forEach(musicInfo -> {
                        globalExecutor.submit(() -> updateCollection(musicInfo));
                        netMusicListForUserModel.addElement(musicInfo);
                    });
                    netMusicList.setModel(netMusicListForUserModel);
                    netMusicScrollPane.getVerticalScrollBar().setValue(0);
                    if (netMusicListForUserModel.isEmpty()) {
                        userListCountBox.remove(netMusicScrollPane);
                        userListCountBox.add(emptyHintPanel);
                    } else {
                        userListCountBox.remove(emptyHintPanel);
                        userListCountBox.add(netMusicScrollPane);
                    }
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
//            }
        };
        recordTypeComboBoxModel.addElement("最近一周");
        recordTypeComboBoxModel.addElement("所有时间");
        orderComboBoxModel.addElement("最新发布");
        orderComboBoxModel.addElement("最多播放");
        netUserRecordTypeComboBox.setModel(recordTypeComboBoxModel);
        // 用户播放记录类型
        netUserRecordTypeComboBox.addItemListener(e -> {
            // 避免事件被处理 2 次！
            if (netUserRecordTypeComboBox.getItemCount() <= 1
                    || netUserRecordTypeComboBox.getSelectedItem() == null
                    || e.getStateChange() != ItemEvent.SELECTED) return;
            netMusicInUserCurrPage = 1;
            searchMusicInUser.run();
        });
        // 播放全部
        netUserPlayAllButton.addActionListener(e -> netUserPlayAllMenuItem.doClick());
        // 刷新按钮事件
        netUserRefreshButton.addActionListener(e -> {
            Component lc = netUserLeftBox.getComponent(netUserLeftBox.getComponentCount() - 1);
            // 当前显示的是用户列表，刷新用户
            if (lc == netUserScrollPane || lc == emptyHintPanel) {
                searchUserGoPageAction.run();
            }
            // 当前显示的是某用户的歌曲，刷新歌曲
            else {
                searchMusicInUser.run();
            }
        });
        // 第一页按钮事件
        netUserStartPageButton.addActionListener(e -> {
            Component lc = netUserLeftBox.getComponent(netUserLeftBox.getComponentCount() - 1);
            // 当前显示的是用户列表，跳到第一页用户
            if (lc == netUserScrollPane || lc == emptyHintPanel) {
                if (netUserCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netUserCurrPage = 1;
                searchUserGoPageAction.run();
            }
            // 当前显示的是某用户的歌曲，跳到第一页歌曲
            else {
                if (netMusicInUserCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInUserCurrPage = 1;
                searchMusicInUser.run();
            }
        });
        // 上一页按钮事件
        netUserLastPageButton.addActionListener(e -> {
            Component lc = netUserLeftBox.getComponent(netUserLeftBox.getComponentCount() - 1);
            // 当前显示的是用户列表，跳到上一页用户
            if (lc == netUserScrollPane || lc == emptyHintPanel) {
                if (netUserCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netUserCurrPage--;
                searchUserGoPageAction.run();
            }
            // 当前显示的是某用户的歌曲，跳到上一页歌曲
            else {
                if (netMusicInUserCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInUserCurrPage--;
                searchMusicInUser.run();
            }
        });
        // 下一页按钮事件
        netUserNextPageButton.addActionListener(e -> {
            Component lc = netUserLeftBox.getComponent(netUserLeftBox.getComponentCount() - 1);
            // 当前显示的是用户列表，跳到下一页用户
            if (lc == netUserScrollPane || lc == emptyHintPanel) {
                if (netUserCurrPage == netUserMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netUserCurrPage++;
                searchUserGoPageAction.run();
            }
            // 当前显示的是某用户的歌曲，跳到下一页歌曲
            else {
                if (netMusicInUserCurrPage == netMusicInUserMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInUserCurrPage++;
                searchMusicInUser.run();
            }
        });
        // 最后一页按钮事件
        netUserEndPageButton.addActionListener(e -> {
            Component lc = netUserLeftBox.getComponent(netUserLeftBox.getComponentCount() - 1);
            // 当前显示的是用户列表，跳到最后一页用户
            if (lc == netUserScrollPane || lc == emptyHintPanel) {
                if (netUserCurrPage == netUserMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netUserCurrPage = netUserMaxPage;
                searchUserGoPageAction.run();
            }
            // 当前显示的是某用户的歌曲，跳到最后一页歌曲
            else {
                if (netMusicInUserCurrPage == netMusicInUserMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInUserCurrPage = netMusicInUserMaxPage;
                searchMusicInUser.run();
            }
        });
        // 跳页按钮事件
        netUserGoButton.addActionListener(e -> {
            Component lc = netUserLeftBox.getComponent(netUserLeftBox.getComponentCount() - 1);
            // 当前显示的是用户列表，跳页用户
            if (lc == netUserScrollPane || lc == emptyHintPanel) {
                String text = netUserPageTextField.getText();
                netUserPageTextField.setText("");
                if ("".equals(text)) return;
                int destPage = Integer.parseInt(text);
                if (destPage < 1 || destPage > netUserMaxPage) {
                    new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                    return;
                }
                netUserCurrPage = destPage;
                searchUserGoPageAction.run();
            }
            // 当前显示的是某用户的歌曲，跳页歌曲
            else {
                String text = netUserPageTextField.getText();
                netUserPageTextField.setText("");
                if ("".equals(text)) return;
                int destPage = Integer.parseInt(text);
                if (destPage < 1 || destPage > netMusicInUserMaxPage) {
                    new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInUserCurrPage = destPage;
                searchMusicInUser.run();
            }
        });
        // 按钮被禁止的图标
        netUserBackwardButton.setEnabled(false);
        // 按钮初始不可见
        netUserClearInputButton.setVisible(false);
        netUserPlayAllButton.setVisible(false);
        netUserRecordTypeComboBox.setVisible(false);
        // 按钮大小限制
        Dimension dimension = new Dimension(20, 20);
        netUserRefreshButton.setPreferredSize(dimension);
        netUserStartPageButton.setPreferredSize(dimension);
        netUserLastPageButton.setPreferredSize(dimension);
        netUserGoButton.setPreferredSize(dimension);
        netUserNextPageButton.setPreferredSize(dimension);
        netUserEndPageButton.setPreferredSize(dimension);
        // 按钮悬浮与点击效果
        netUserBackwardButton.addMouseListener(new ButtonMouseListener(netUserBackwardButton, THIS));
        netUserClearInputButton.addMouseListener(new ButtonMouseListener(netUserClearInputButton, THIS));
        netUserSearchButton.addMouseListener(new ButtonMouseListener(netUserSearchButton, THIS));
        netUserPlayAllButton.addMouseListener(new ButtonMouseListener(netUserPlayAllButton, THIS));
        netUserRefreshButton.addMouseListener(new ButtonMouseListener(netUserRefreshButton, THIS));
        netUserStartPageButton.addMouseListener(new ButtonMouseListener(netUserStartPageButton, THIS));
        netUserLastPageButton.addMouseListener(new ButtonMouseListener(netUserLastPageButton, THIS));
        netUserGoButton.addMouseListener(new ButtonMouseListener(netUserGoButton, THIS));
        netUserNextPageButton.addMouseListener(new ButtonMouseListener(netUserNextPageButton, THIS));
        netUserEndPageButton.addMouseListener(new ButtonMouseListener(netUserEndPageButton, THIS));
        // 帮助提示
        netUserBackwardButton.setToolTipText(BACKWARD_TIP);
        netUserClearInputButton.setToolTipText(CLEAR_INPUT_TIP);
        netUserSearchButton.setToolTipText(SEARCH_TIP);
        netUserPlayAllButton.setToolTipText(PLAY_ALL_TIP);
        netUserRefreshButton.setToolTipText(REFRESH_TIP);
        netUserStartPageButton.setToolTipText(START_PAGE_TIP);
        netUserLastPageButton.setToolTipText(LAST_PAGE_TIP);
        netUserGoButton.setToolTipText(GO_TIP);
        netUserNextPageButton.setToolTipText(NEXT_PAGE_TIP);
        netUserEndPageButton.setToolTipText(END_PAGE_TIP);

        netUserToolBar.add(netUserBackwardButton);
        netUserToolBar.add(netUserSearchTextField);
        netUserToolBar.add(netUserClearInputButton);
        netUserToolBar.add(netUserSearchButton);
        netUserLeftBox.add(netUserToolBar);

        for (String name : NetMusicSource.names) netUserSourceComboBox.addItem(name);
        netUserSourceComboBox.addItemListener(e -> {
            // 避免事件被处理 2 次！
            if (e.getStateChange() != ItemEvent.SELECTED) return;
            netUserCurrKeyword = netUserSearchTextField.getText();
            netUserCurrPage = 1;
            netUserRefreshButton.doClick();
        });

        // 用户数量和当前歌曲标签
        netUserCountPanel.add(netUserSourceComboBox);
        netUserCountPanel.add(netUserRecordTypeComboBox);
        netUserCountPanel.add(netUserPlayAllButton);
        netUserCountPanel.add(netUserStartPageButton);
        netUserCountPanel.add(netUserLastPageButton);
        netUserCountPanel.add(netUserCountLabel);
        netUserCountPanel.add(netUserNextPageButton);
        netUserCountPanel.add(netUserEndPageButton);
        netUserCountPanel.add(netUserRefreshButton);
        netUserCountPanel.add(netUserPageTextField);
        netUserCountPanel.add(netUserGoButton);
        netUserCountPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netUserCountPanel.setVisible(false);
        netUserLeftBox.add(netUserCountPanel);
    }

    // 初始化在线用户列表
    private void netUserListInit() {
        netUserList.setModel(netUserListModel);
        netUserList.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int index = netUserList.locationToIndex(e.getPoint());
                Rectangle bounds = netUserList.getCellBounds(index, index);
                if (bounds == null) return;
                setHoverIndex(bounds.contains(e.getPoint()) ? index : -1);
            }

            private void setHoverIndex(int index) {
                TranslucentNetUserListRenderer renderer = (TranslucentNetUserListRenderer) netUserList.getCellRenderer();
                if (renderer == null) return;
                int hoverIndex = renderer.getHoverIndex();
                if (hoverIndex == index) return;
                renderer.setHoverIndex(index);
                netUserList.repaint();
            }
        });
        netUserList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                TranslucentNetUserListRenderer renderer = (TranslucentNetUserListRenderer) netUserList.getCellRenderer();
                if (renderer == null) return;
                renderer.setHoverIndex(-1);
                netUserList.repaint();
            }
        });
        // 打开用户
        Runnable openUserAction = () -> {
            List<Future<?>> taskList = new LinkedList<>();
            loadingAndRun(() -> {
                NetUserInfo userInfo = netUserList.getSelectedValue();
                // 加载封面图片和描述
                taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                    BufferedImage coverImg = ImageUtils.borderShadow(ImageUtils.dye(loadingImage, currUIStyle.getLabelColor()));
                    ImageIcon icon = new ImageIcon(coverImg);
                    userCoverAndNameLabel.setIcon(icon);
                    userCoverAndNameLabel.setText(LOADING_MSG);
                    userTagLabel.setText(LOADING_MSG);
                    userDescriptionLabel.setText(LOADING_MSG);
                    userDescriptionLabel.setIcon(icon);
                    GlobalExecutors.imageExecutor.execute(() -> {
                        try {
                            MusicServerUtils.fillUserInfo(userInfo);
                            userCoverAndNameLabel.setText(StringUtils.textToHtml(userInfo.getName()));
                            userTagLabel.setText(StringUtils.textToHtml(userInfo.getTag()));
                            if (userInfo.getSign() != null)
                                userDescriptionLabel.setText(StringUtils.textToHtml(userInfo.getSign()));
                            if (userInfo.hasAvatar()) {
                                userCoverAndNameLabel.setIcon(new ImageIcon(
                                        ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(userInfo.getAvatar(), coverImageWidth), MIDDLE_ARC))
                                ));
                            } else {
                                userInfo.setInvokeLater(() -> {
                                    userCoverAndNameLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(userInfo.getAvatar(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                    netUserList.repaint();
                                });
                            }
                            if (userInfo.hasBgImg()) {
                                userDescriptionLabel.setIcon(new ImageIcon(
                                        ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(userInfo.getBgImg(), coverImageWidth), MIDDLE_ARC))
                                ));
                            } else {
                                userInfo.setInvokeLater2(() -> {
                                    userDescriptionLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(userInfo.getBgImg(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                    netUserList.repaint();
                                });
                            }
                        } catch (HttpException e) {
                            userCoverAndNameLabel.setText(LOAD_FAILED);
                            userTagLabel.setText(LOAD_FAILED);
                            userDescriptionLabel.setText(LOAD_FAILED);
                        }
                    });
                }));

                taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                    try {
                        // 网易云/猫耳/哔哩用户才显示下拉框
                        if (userInfo.fromNetCloud()) netUserRecordTypeComboBox.setModel(recordTypeComboBoxModel);
                        else if (userInfo.fromME() || userInfo.fromBI())
                            netUserRecordTypeComboBox.setModel(orderComboBoxModel);

                        // 得到用户的音乐信息
                        CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInUser(
                                netUserRecordTypeComboBox.getSelectedIndex(), userInfo, limit, netMusicInUserCurrPage = 1);
                        List<NetMusicInfo> musicInfos = result.data;
                        int total = result.total;
                        netMusicInUserMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        netUserRecordTypeComboBox.setVisible(userInfo.fromNetCloud() || userInfo.fromME() || userInfo.fromBI());
                        // 更新用户歌曲数量显示
                        netUserCountLabel.setText(String.format(PAGINATION_MSG, netMusicInUserCurrPage, netMusicInUserMaxPage));
                        userListCountBox.add(netUserCountPanel);
                        userListCountBox.add(netMusicScrollPane);
                        userListBox.add(userListCountBox);
                        // 用户列表切换到在线音乐列表
                        netMusicList.setModel(netMusicListForUserModel);
                        netUserLeftBox.remove(netUserScrollPane);
                        netUserLeftBox.add(userListBox);
                        // 删除工具栏的搜索
                        netUserToolBar.remove(netUserSearchTextField);
                        netUserToolBar.remove(netUserClearInputButton);
                        netUserToolBar.remove(netUserSearchButton);
                        netUserToolBar.remove(netUserTitleLabel);
                        netUserToolBar.add(Box.createHorizontalGlue());
                        // 添加数据建议弄到更新数量显示之后，不然可能会不显示！
                        netMusicList.setModel(emptyListModel);
                        netMusicListForUserModel.clear();
                        musicInfos.forEach(musicInfo -> {
                            globalExecutor.submit(() -> updateCollection(musicInfo));
                            netMusicListForUserModel.addElement(musicInfo);
                        });
                        netMusicList.setModel(netMusicListForUserModel);
                        userDescriptionScrollPane.getVerticalScrollBar().setValue(0);
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                        netUserBackwardButton.setEnabled(true);
                        netUserSourceComboBox.setVisible(false);
                        netUserPlayAllButton.setVisible(true);
                        if (netMusicListForUserModel.isEmpty()) {
                            userListCountBox.remove(netMusicScrollPane);
                            userListCountBox.add(emptyHintPanel);
                        } else {
                            userListCountBox.remove(emptyHintPanel);
                            userListCountBox.add(netMusicScrollPane);
                        }
                        // 切换后一定要刷新！
                        netUserLeftBox.repaint();
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                }));

                taskList.forEach(task -> {
                    try {
                        task.get();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    } catch (ExecutionException e) {
                        e.printStackTrace();
                    }
                });
            });
        };
        netUserList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    openUserAction.run();
                }
            }
        });
        netUserList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                // 鼠标左键双击打开用户
                if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    openUserAction.run();
                }
                // 右键弹出菜单
                else if (e.getButton() == MouseEvent.BUTTON3) {
                    if (netUserList.getModel().getSize() != 0) {
                        // 得到鼠标光标所在的选项并选中
                        int index = netUserList.locationToIndex(e.getPoint());
                        if (index == -1) return;
                        if (!netUserList.isSelectedIndex(index)) netUserList.setSelectedIndex(index);
                        if (hasBeenCollected(netUserList.getSelectedValue())) {
                            netUserCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                            netUserCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);
                        } else {
                            netUserCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, currUIStyle.getButtonColor()));
                            netUserCollectMenuItem.setText(COLLECT_MENU_ITEM_TEXT);
                        }

                        netUserPopupMenu.show(netUserList, e.getX(), e.getY());
                    }
                }
            }
        });
        // 打开用户
        netUserOpenMenuItem.addActionListener(e -> {
            int index = tabbedPane.getSelectedIndex();
            if (index == TabIndex.NET_USER) openUserAction.run();
            else if (index == TabIndex.PERSONAL) openCollectionItemAction.run();
            else openRecommendItemAction.run();
        });
        // 播放全部
        netUserPlayAllMenuItem.addActionListener(e -> {
            NetUserInfo netUserInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_USER) netUserInfo = netUserList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL)
                netUserInfo = (NetUserInfo) collectionList.getSelectedValue();
            else netUserInfo = (NetUserInfo) itemRecommendList.getSelectedValue();
            loadingAndRun(() -> {
                CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInUser(
                        netUserRecordTypeComboBox.getSelectedIndex(), netUserInfo, 10000, 1);
                List<NetMusicInfo> musicInfos = result.data;
                if (musicInfos.isEmpty()) {
                    new TipDialog(THIS, NO_MUSIC_MSG).showDialog();
                    return;
                }
                playQueue.setModel(emptyListModel);
                playQueueModel.clear();
                musicInfos.forEach(musicInfo -> {
                    globalExecutor.submit(() -> updateCollection(musicInfo));
                    playQueueModel.addElement(musicInfo);
                });
                playQueue.setModel(playQueueModel);
                playQueue.setSelectedIndex(0);
                playExecutor.submit(() -> playSelected(playQueue, true));
            });
        });
        // 收藏用户
        netUserCollectMenuItem.addActionListener(e -> {
            int index = tabbedPane.getSelectedIndex();
            CustomList list;
            if (index == TabIndex.NET_USER) list = netUserList;
            else if (index == TabIndex.PERSONAL) list = collectionList;
            else list = itemRecommendList;
            ListModel model = collectionList.getModel();
            boolean needRefresh = model == userCollectionModel;
            if (netUserCollectMenuItem.getText().equals(COLLECT_MENU_ITEM_TEXT)) {
                List values = list.getSelectedValuesList();
                if (needRefresh) collectionList.setModel(emptyListModel);
                for (int i = values.size() - 1; i >= 0; i--) {
                    Object o = values.get(i);
                    if (hasBeenCollected(o)) continue;
                    userCollectionModel.add(0, o);
                }
                if (needRefresh) collectionList.setModel(model);
                new TipDialog(THIS, COLLECT_SUCCESS_MSG).showDialog();
            } else {
                List values = list.getSelectedValuesList();
                if (needRefresh) collectionList.setModel(emptyListModel);
                values.forEach(o -> {
                    if (list == collectionList || hasBeenCollected(o)) {
                        userCollectionModel.removeElement(o);
                    }
                });
                if (needRefresh) collectionList.setModel(model);
                new TipDialog(THIS, CANCEL_COLLECTION_SUCCESS_MSG).showDialog();
            }
        });
        // 查看用户歌单
        netUserPlaylistMenuItem.addActionListener(e -> {
            NetUserInfo netUserInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_USER) netUserInfo = netUserList.getSelectedValue();
            else netUserInfo = (NetUserInfo) collectionList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForPlaylist();
                    // 搜索用户歌单
                    CommonResult<NetPlaylistInfo> result = MusicServerUtils.getUserPlaylists(currPlaylistUserInfo = netUserInfo, limit, netPlaylistCurrPage = 1);
                    List<NetPlaylistInfo> netPlaylistInfos = result.data;
                    int total = result.total;
                    netPlaylistMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netPlaylistTitleLabel.setText(netUserInfo.getName() + " 的歌单");
                    netPlaylistToolBar.removeAll();
                    netPlaylistToolBar.add(netPlaylistBackwardButton);
                    netPlaylistToolBar.add(Box.createHorizontalGlue());
                    netPlaylistToolBar.add(netPlaylistTitleLabel);
                    netPlaylistToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netPlaylistCountLabel.setText(String.format(PAGINATION_MSG, netPlaylistCurrPage, netPlaylistMaxPage));
                    netPlaylistCountPanel.add(netPlaylistCountLabel, netPlaylistCountPanel.getComponentIndex(netPlaylistCountLabel));
                    netPlaylistLeftBox.add(netPlaylistCountPanel);
                    netPlaylistSourceComboBox.setVisible(false);
                    netPlaylistPlayAllButton.setVisible(false);
                    netPlaylistCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netPlaylistList.setModel(emptyListModel);
                    netPlaylistListModel.clear();
                    netPlaylistInfos.forEach(playlistInfo -> {
                        globalExecutor.submit(() -> updateCollection(playlistInfo));
                        // 设置图片加载后重绘的事件
                        playlistInfo.setInvokeLater(() -> {
                            netPlaylistList.repaint();
                            collectionList.repaint();
                        });
                        netPlaylistListModel.addElement(playlistInfo);
                    });
                    netPlaylistList.setModel(netPlaylistListModel);
                    netPlaylistBackwardButton.setEnabled(true);
                    netPlaylistLeftBox.remove(netPlaylistKeywordsPanelScrollPane);
                    if (netPlaylistListModel.isEmpty()) {
                        netPlaylistLeftBox.remove(netPlaylistScrollPane);
                        netPlaylistLeftBox.add(emptyHintPanel);
                    } else {
                        netPlaylistLeftBox.remove(emptyHintPanel);
                        netPlaylistLeftBox.add(netPlaylistScrollPane);
                    }
                    netPlaylistScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_PLAYLIST);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看用户专辑
        netUserAlbumMenuItem.addActionListener(e -> {
            NetUserInfo netUserInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_USER) netUserInfo = netUserList.getSelectedValue();
            else netUserInfo = (NetUserInfo) collectionList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForAlbum();
                    // 搜索歌手专辑并显示专辑列表
                    CommonResult<NetAlbumInfo> result = MusicServerUtils.getUserAlbums(currAlbumUserInfo = netUserInfo, limit, netAlbumCurrPage = 1);
                    List<NetAlbumInfo> netAlbumInfos = result.data;
                    Integer total = result.total;
                    netAlbumMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netAlbumTitleLabel.setText(netUserInfo.getName() + " 的专辑");
                    netAlbumToolBar.removeAll();
                    netAlbumToolBar.add(netAlbumBackwardButton);
                    netAlbumToolBar.add(Box.createHorizontalGlue());
                    netAlbumToolBar.add(netAlbumTitleLabel);
                    netAlbumToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netAlbumCountLabel.setText(String.format(PAGINATION_MSG, netAlbumCurrPage, netAlbumMaxPage));
                    netAlbumCountPanel.add(netAlbumCountLabel, netAlbumCountPanel.getComponentIndex(netAlbumCountLabel));
                    netAlbumLeftBox.add(netAlbumCountPanel);
                    netAlbumSourceComboBox.setVisible(false);
                    netAlbumPlayAllButton.setVisible(false);
                    netAlbumCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netAlbumList.setModel(emptyListModel);
                    netAlbumListModel.clear();
                    netAlbumInfos.forEach(albumInfo -> {
                        globalExecutor.submit(() -> updateCollection(albumInfo));
                        // 设置图片加载后重绘的事件
                        albumInfo.setInvokeLater(() -> {
                            updateRenderer(netAlbumList);
                            updateRenderer(collectionList);
                            netAlbumList.repaint();
                            collectionList.repaint();
                        });
                        netAlbumListModel.addElement(albumInfo);
                    });
                    netAlbumList.setModel(netAlbumListModel);
                    netAlbumBackwardButton.setEnabled(true);
                    netAlbumLeftBox.remove(netAlbumKeywordsPanelScrollPane);
                    if (netAlbumListModel.isEmpty()) {
                        netAlbumLeftBox.remove(netAlbumScrollPane);
                        netAlbumLeftBox.add(emptyHintPanel);
                    } else {
                        netAlbumLeftBox.remove(emptyHintPanel);
                        netAlbumLeftBox.add(netAlbumScrollPane);
                    }
                    netAlbumScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_ALBUM);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看用户电台
        netUserRadioMenuItem.addActionListener(e -> {
            NetUserInfo netUserInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_USER) netUserInfo = netUserList.getSelectedValue();
            else netUserInfo = (NetUserInfo) collectionList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    // 搜索用户电台
                    CommonResult<NetRadioInfo> result = MusicServerUtils.getUserRadios(currRadioUserInfo = netUserInfo, limit, netRadioCurrPage = 1);
                    List<NetRadioInfo> netRadioInfos = result.data;
                    int total = result.total;
                    netRadioMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netRadioTitleLabel.setText(netUserInfo.getName() + " 的电台");
                    netRadioToolBar.removeAll();
                    netRadioToolBar.add(netRadioBackwardButton);
                    netRadioToolBar.add(Box.createHorizontalGlue());
                    netRadioToolBar.add(netRadioTitleLabel);
                    netRadioToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netRadioCountLabel.setText(String.format(PAGINATION_MSG, netRadioCurrPage, netRadioMaxPage));
                    netRadioCountPanel.add(netRadioCountLabel, netRadioCountPanel.getComponentIndex(netRadioCountLabel));
                    netRadioLeftBox.add(netRadioCountPanel);
                    netRadioSourceComboBox.setVisible(false);
                    netRadioPlayAllButton.setVisible(false);
                    netRadioCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netRadioList.setModel(emptyListModel);
                    netRadioListModel.clear();
                    netRadioInfos.forEach(radioInfo -> {
                        globalExecutor.submit(() -> updateCollection(radioInfo));
                        // 设置图片加载后重绘的事件
                        radioInfo.setInvokeLater(() -> {
                            updateRenderer(netRadioList);
                            updateRenderer(collectionList);
                            netRadioList.repaint();
                            collectionList.repaint();
                        });
                        netRadioListModel.addElement(radioInfo);
                    });
                    netRadioList.setModel(netRadioListModel);
                    netRadioBackwardButton.setEnabled(true);
                    netRadioLeftBox.remove(netRadioKeywordsPanelScrollPane);
                    if (netRadioListModel.isEmpty()) {
                        netRadioLeftBox.remove(netRadioScrollPane);
                        netRadioLeftBox.add(emptyHintPanel);
                    } else {
                        netRadioLeftBox.remove(emptyHintPanel);
                        netRadioLeftBox.add(netRadioScrollPane);
                    }
                    netRadioScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_RADIO);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看用户视频
        netUserVideoMenuItem.addActionListener(e -> {
            NetUserInfo netUserInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_USER) netUserInfo = netUserList.getSelectedValue();
            else netUserInfo = (NetUserInfo) collectionList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForMv();
                    // 获取用户视频
                    CommonResult<NetMvInfo> result = MusicServerUtils.getUserVideos(currMvUserInfo = netUserInfo,
                            netMvSortTypeComboBox.getSelectedIndex(), netMvCurrPage = 1, limit, cursor = "");
                    List<NetMvInfo> netMvInfos = result.data;
                    Integer total = result.total;
                    cursor = result.cursor;
                    netMvMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netMvTitleLabel.setText(netUserInfo.getName() + " 的视频");
                    netMvToolBar.removeAll();
                    netMvToolBar.add(netMvBackwardButton);
                    netMvToolBar.add(Box.createHorizontalGlue());
                    netMvToolBar.add(netMvTitleLabel);
                    netMvToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netMvCountLabel.setText(String.format(PAGINATION_MSG, netMvCurrPage, netMvMaxPage));
                    netMvCountPanel.add(netMvCountLabel, netMvCountPanel.getComponentIndex(netMvCountLabel));
                    netMvLeftBox.add(netMvCountPanel);
                    netMvCountPanel.setVisible(true);
                    netMvSourceComboBox.setVisible(false);
                    netMvSortTypeComboBox.setVisible(netUserInfo.fromBI());
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netMvList.setModel(emptyListModel);
                    netMvListModel.clear();
                    netMvInfos.forEach(mvInfo -> {
                        globalExecutor.submit(() -> updateCollection(mvInfo));
                        // 设置图片加载后重绘的事件
                        mvInfo.setInvokeLater(() -> {
                            updateRenderer(netMvList);
                            updateRenderer(collectionList);
                            netMvList.repaint();
                            collectionList.repaint();
                        });
                        netMvListModel.addElement(mvInfo);
                    });
                    netMvList.setModel(netMvListModel);
                    netMvBackwardButton.setEnabled(true);
                    netMvLeftBox.remove(netMvKeywordsPanelScrollPane);
                    if (netMvListModel.isEmpty()) {
                        netMvLeftBox.remove(netMvScrollPane);
                        netMvLeftBox.add(emptyHintPanel);
                    } else {
                        netMvLeftBox.remove(emptyHintPanel);
                        netMvLeftBox.add(netMvScrollPane);
                    }
                    netMvScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_MV);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看用户关注
        netUserFollowMenuItem.addActionListener(e -> {
            NetUserInfo netUserInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_USER) netUserInfo = netUserList.getSelectedValue();
            else netUserInfo = (NetUserInfo) collectionList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForUser();
                    // 获取用户关注
                    CommonResult<NetUserInfo> result = MusicServerUtils.getUserFollows(currFollowUserUserInfo = netUserInfo, limit, netUserCurrPage = 1);
                    List<NetUserInfo> netUserInfos = result.data;
                    Integer total = result.total;
                    netUserMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netUserTitleLabel.setText(netUserInfo.getName() + " 的关注");
                    netUserToolBar.removeAll();
                    netUserToolBar.add(netUserBackwardButton);
                    netUserToolBar.add(Box.createHorizontalGlue());
                    netUserToolBar.add(netUserTitleLabel);
                    netUserToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netUserCountLabel.setText(String.format(PAGINATION_MSG, netUserCurrPage, netUserMaxPage));
                    netUserCountPanel.add(netUserCountLabel, netUserCountPanel.getComponentIndex(netUserCountLabel));
                    netUserLeftBox.add(netUserCountPanel);
                    netUserSourceComboBox.setVisible(false);
                    netUserPlayAllButton.setVisible(false);
                    netUserRecordTypeComboBox.setVisible(false);
                    netUserCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netUserList.setModel(emptyListModel);
                    netUserListModel.clear();
                    netUserInfos.forEach(userInfo -> {
                        globalExecutor.submit(() -> updateCollection(userInfo));
                        // 设置图片加载后重绘的事件
                        userInfo.setInvokeLater(() -> {
                            updateRenderer(netUserList);
                            updateRenderer(collectionList);
                            netUserList.repaint();
                            collectionList.repaint();
                        });
                        netUserListModel.addElement(userInfo);
                    });
                    netUserList.setModel(netUserListModel);
                    netUserBackwardButton.setEnabled(true);
                    netUserLeftBox.remove(netUserKeywordsPanelScrollPane);
                    if (netUserListModel.isEmpty()) {
                        netUserLeftBox.remove(netUserScrollPane);
                        netUserLeftBox.add(emptyHintPanel);
                    } else {
                        netUserLeftBox.remove(emptyHintPanel);
                        netUserLeftBox.add(netUserScrollPane);
                    }
                    netUserScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_USER);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看用户粉丝
        netUserFollowedMenuItem.addActionListener(e -> {
            NetUserInfo netUserInfo;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_USER) netUserInfo = netUserList.getSelectedValue();
            else netUserInfo = (NetUserInfo) collectionList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForUser();
                    // 获取用户粉丝
                    CommonResult<NetUserInfo> result = MusicServerUtils.getUserFolloweds(currFollowedUserUserInfo = netUserInfo, limit, netUserCurrPage = 1);
                    List<NetUserInfo> netUserInfos = result.data;
                    Integer total = result.total;
                    netUserMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netUserTitleLabel.setText(netUserInfo.getName() + " 的粉丝");
                    netUserToolBar.removeAll();
                    netUserToolBar.add(netUserBackwardButton);
                    netUserToolBar.add(Box.createHorizontalGlue());
                    netUserToolBar.add(netUserTitleLabel);
                    netUserToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netUserCountLabel.setText(String.format(PAGINATION_MSG, netUserCurrPage, netUserMaxPage));
                    netUserCountPanel.add(netUserCountLabel, netUserCountPanel.getComponentIndex(netUserCountLabel));
                    netUserLeftBox.add(netUserCountPanel);
                    netUserSourceComboBox.setVisible(false);
                    netUserPlayAllButton.setVisible(false);
                    netUserRecordTypeComboBox.setVisible(false);
                    netUserCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netUserList.setModel(emptyListModel);
                    netUserListModel.clear();
                    netUserInfos.forEach(userInfo -> {
                        globalExecutor.submit(() -> updateCollection(userInfo));
                        // 设置图片加载后重绘的事件
                        userInfo.setInvokeLater(() -> {
                            updateRenderer(netUserList);
                            updateRenderer(collectionList);
                            netUserList.repaint();
                            collectionList.repaint();
                        });
                        netUserListModel.addElement(userInfo);
                    });
                    netUserList.setModel(netUserListModel);
                    netUserBackwardButton.setEnabled(true);
                    netUserLeftBox.remove(netUserKeywordsPanelScrollPane);
                    if (netUserListModel.isEmpty()) {
                        netUserLeftBox.remove(netUserScrollPane);
                        netUserLeftBox.add(emptyHintPanel);
                    } else {
                        netUserLeftBox.remove(emptyHintPanel);
                        netUserLeftBox.add(netUserScrollPane);
                    }
                    netUserScrollPane.getVerticalScrollBar().setValue(0);
                    tabbedPane.setSelectedIndex(TabIndex.NET_USER);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 复制名称
        netUserCopyNameMenuItem.addActionListener(e -> {
            Object o;
            int selectedIndex = tabbedPane.getSelectedIndex();
            if (selectedIndex == TabIndex.NET_USER) o = netUserList.getSelectedValue();
            else if (selectedIndex == TabIndex.PERSONAL) o = collectionList.getSelectedValue();
            else o = itemRecommendList.getSelectedValue();
            StringSelection stringSelection = new StringSelection(((NetUserInfo) o).toSimpleString());
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });
        // 用户列表右键菜单项
        netUserPopupMenu.add(netUserOpenMenuItem);
        netUserPopupMenu.add(netUserPlayAllMenuItem);
        netUserPopupMenu.add(netUserCollectMenuItem);
        netUserPopupMenu.add(netUserPlaylistMenuItem);
        netUserPopupMenu.add(netUserAlbumMenuItem);
        netUserPopupMenu.add(netUserRadioMenuItem);
        netUserPopupMenu.add(netUserVideoMenuItem);
        netUserPopupMenu.add(netUserFollowMenuItem);
        netUserPopupMenu.add(netUserFollowedMenuItem);
        netUserPopupMenu.add(netUserCopyNameMenuItem);

        // 搜索历史面板
        // 清空搜索历史按钮
        netUserClearHistorySearchButton.addActionListener(e -> {
            netUserHistorySearchInnerPanel2.removeAll();
            netUserKeywordsPanel.remove(netUserHistorySearchPanel);
            netUserKeywordsPanel.repaint();
        });
        netUserClearHistorySearchButton.setPreferredSize(new Dimension(20, 20));
        netUserClearHistorySearchButton.setToolTipText(CLEAR_HISTORY_SEARCH_TIP);
        netUserClearHistorySearchButton.addMouseListener(new ButtonMouseListener(netUserClearHistorySearchButton, THIS));

        netUserHistorySearchInnerPanel1.add(netUserHistorySearchLabel);
        netUserHistorySearchInnerPanel1.add(netUserClearHistorySearchButton);
        netUserHistorySearchInnerPanel1.setLayout(new FlowLayout(FlowLayout.LEFT));
        netUserHistorySearchInnerPanel1.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        netUserHistorySearchInnerPanel1.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netUserHistorySearchInnerPanel2.setLayout(new FlowLayout(FlowLayout.LEFT));
        netUserHistorySearchInnerPanel2.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 20));
        netUserHistorySearchPanel.setLayout(new BoxLayout(netUserHistorySearchPanel, BoxLayout.Y_AXIS));
        netUserHistorySearchPanel.add(netUserHistorySearchInnerPanel1);
        netUserHistorySearchPanel.add(netUserHistorySearchInnerPanel2);
        // 关键词面板
        netUserKeywordsPanel.setLayout(new BoxLayout(netUserKeywordsPanel, BoxLayout.Y_AXIS));
//        // 滚动条监听器
//        netUserKeywordsPanelScrollPane.addMouseListener(new ScrollPaneListener(netUserKeywordsPanelScrollPane, THIS));

        // 同时限制面板与滚动条的大小才能保证按钮不超出窗口！！！
        Dimension d = new Dimension(900, 500);
        netUserKeywordsPanel.setPreferredSize(d);
        netUserKeywordsPanelScrollPane.setPreferredSize(d);

        // 用户最佳大小
        netUserScrollPane.setPreferredSize(new Dimension(200, 600));
        netUserLeftBox.add(netUserScrollPane);
    }

    // cursor 用于请求下一页数据
    private String cursor;

    // 获取评论
    private void getComments(Object info, boolean first) {
        loadingAndRun(() -> {
            try {
                // 获取评论并显示评论列表
                CommonResult<NetCommentInfo> result = MusicServerUtils.getComments(
                        currCommentObjectInfo = info, (String) netCommentTypeComboBox.getSelectedItem(),
                        commentLimit, first ? netCommentCurrPage = 1 : netCommentCurrPage, first ? cursor = "" : cursor);
                List<NetCommentInfo> netCommentInfos = result.data;
                Integer total = result.total;
                cursor = result.cursor;
                netCommentMaxPage = Math.max(total % commentLimit == 0 ? total / commentLimit : total / commentLimit + 1, 1);
                // 更新标题和数量显示
                String s = null;
                if (info instanceof NetMusicInfo) s = ((NetMusicInfo) info).toSimpleString();
                else if (info instanceof NetPlaylistInfo) s = ((NetPlaylistInfo) info).toSimpleString();
                else if (info instanceof NetAlbumInfo) s = ((NetAlbumInfo) info).toSimpleString();
                else if (info instanceof NetRadioInfo) s = ((NetRadioInfo) info).toSimpleString();
                else if (info instanceof NetMvInfo) s = ((NetMvInfo) info).toSimpleString();
                else if (info instanceof NetRankingInfo) s = ((NetRankingInfo) info).toSimpleString();
                netCommentTitleLabel.setText(s + " 的评论");
                netCommentCountLabel.setText(String.format(PAGINATION_MSG, netCommentCurrPage, netCommentMaxPage));
                netCommentCountPanel.setVisible(true);
                // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                netCommentList.setModel(emptyListModel);
                netCommentListModel.clear();
                netCommentInfos.forEach(commentInfo -> {
                    // 设置图片加载后重绘的事件
                    commentInfo.setInvokeLater(() -> {
                        updateRenderer(netCommentList);
                        netCommentList.repaint();
                    });
                    netCommentListModel.addElement(commentInfo);
                });
                netCommentList.setModel(netCommentListModel);
                if (netCommentListModel.isEmpty()) {
                    netCommentBox.remove(netCommentScrollPane);
                    netCommentBox.add(emptyHintPanel);
                } else {
                    netCommentBox.remove(emptyHintPanel);
                    netCommentBox.add(netCommentScrollPane);
                }
                netCommentScrollPane.getVerticalScrollBar().setValue(0);
                if (first) {
                    SwingUtilities.updateComponentTreeUI(netCommentToolBar);
                    javax.swing.plaf.ComboBoxUI ui = netCommentTypeComboBox.getUI();
                    SwingUtilities.updateComponentTreeUI(netCommentCountPanel);
                    netCommentTypeComboBox.setUI(ui);
                    // 删除 Tab 面板、歌词面板、乐谱面板，加入评论面板
                    globalPanel.remove(infoAndLrcBox);
                    globalPanel.remove(tabbedPane);
                    globalPanel.remove(netSheetBox);
                    globalPanel.add(netCommentBox, BorderLayout.CENTER);
                    netSheetListModel.clear();
                    if (currPane != MusicPane.SHEET) lastPane = currPane;
                    currPane = MusicPane.COMMENT;
                }
            } catch (IORuntimeException ioRuntimeException) {
                // 无网络连接
                new TipDialog(THIS, NO_NET_MSG).showDialog();
            } catch (HttpException httpException) {
                // 请求超时
                new TipDialog(THIS, TIME_OUT_MSG).showDialog();
            } catch (JSONException jsonException) {
                // 接口异常
                new TipDialog(THIS, API_ERROR_MSG).showDialog();
            }
        });
    }

    // 获取乐谱
    void getSheets(NetMusicInfo info, boolean first) {
        loadingAndRun(() -> {
            try {
                // 获取乐谱并显示乐谱列表
                CommonResult<NetSheetInfo> result = MusicServerUtils.getSheets(currSheetMusicInfo = info);
                List<NetSheetInfo> netSheetInfos = result.data;
                netSheetCurrPage = netSheetMaxPage = 1;
                // 更新标题和数量显示
                netSheetTitleLabel.setText(info.toSimpleString() + " 的乐谱");
                netSheetCountLabel.setText(String.format(PAGINATION_MSG, netSheetCurrPage, netSheetMaxPage));
                netSheetCountPanel.setVisible(true);
                // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                netSheetList.setModel(emptyListModel);
                netSheetListModel.clear();
                netSheetInfos.forEach(SheetInfo -> {
                    // 设置图片加载后重绘的事件
                    SheetInfo.setInvokeLater(() -> {
                        updateRenderer(netSheetList);
                        netSheetList.repaint();
                        netSheetScrollPane.getViewport().add(netSheetList);
                    });
                    netSheetListModel.addElement(SheetInfo);
                });
                netSheetList.setModel(netSheetListModel);
                if (netSheetListModel.isEmpty()) {
                    netSheetBox.remove(netSheetScrollPane);
                    netSheetBox.add(emptyHintPanel);
                } else {
                    netSheetBox.remove(emptyHintPanel);
                    netSheetBox.add(netSheetScrollPane);
                }
                netSheetScrollPane.getVerticalScrollBar().setValue(0);
                if (first) {
                    SwingUtilities.updateComponentTreeUI(netSheetToolBar);
                    SwingUtilities.updateComponentTreeUI(netSheetCountPanel);
                    // 删除 Tab 面板、歌词面板、评论面板，加入乐谱面板
                    globalPanel.remove(infoAndLrcBox);
                    globalPanel.remove(tabbedPane);
                    globalPanel.remove(netCommentBox);
                    globalPanel.add(netSheetBox, BorderLayout.CENTER);
                    netCommentListModel.clear();
                    if (currPane != MusicPane.COMMENT) lastPane = currPane;
                    currPane = MusicPane.SHEET;
                }
            } catch (IORuntimeException ioRuntimeException) {
                // 无网络连接
                new TipDialog(THIS, NO_NET_MSG).showDialog();
            } catch (HttpException httpException) {
                // 请求超时
                new TipDialog(THIS, TIME_OUT_MSG).showDialog();
            } catch (JSONException jsonException) {
                // 接口异常
                new TipDialog(THIS, API_ERROR_MSG).showDialog();
            }
        });
    }

    // 初始化评论工具栏
    private void netCommentToolBarInit() {
        // 只能输入数字
        netCommentPageTextField.setDocument(new SafeDocument(0, Integer.MAX_VALUE));
        // 后退按钮事件
        netCommentBackwardButton.addActionListener(e -> {
            netCommentList.setModel(emptyListModel);
            if (!netCommentListModel.isEmpty()) netCommentListModel.clear();
            globalPanel.remove(netCommentBox);
            if (lastPane == MusicPane.MUSIC) {
                globalPanel.add(tabbedPane, BorderLayout.CENTER);
            } else if (lastPane == MusicPane.LYRIC) {
                lrcScrollAnimation = true;
                globalPanel.add(infoAndLrcBox, BorderLayout.CENTER);
            }
            globalPanel.repaint();
            currPane = lastPane;
        });
        // 添加评论类型
        netCommentTypeComboBox.addItem("热门评论");
        netCommentTypeComboBox.addItem("最新评论");
        // 评论类型
        netCommentTypeComboBox.addItemListener(e -> {
            // 避免事件被处理 2 次！
            if (netCommentTypeComboBox.getItemCount() <= 1
                    || netCommentTypeComboBox.getSelectedItem() == null
                    || e.getStateChange() != ItemEvent.SELECTED) return;
            netCommentCurrPage = 1;
            getComments(currCommentObjectInfo, false);
        });
        // 刷新按钮事件
        netCommentRefreshButton.addActionListener(e -> {
            getComments(currCommentObjectInfo, false);
        });
        // 第一页按钮事件
        netCommentStartPageButton.addActionListener(e -> {
            if (netCommentCurrPage == 1) {
                new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                return;
            }
            netCommentCurrPage = 1;
            getComments(currCommentObjectInfo, false);
        });
        // 上一页按钮事件
        netCommentLastPageButton.addActionListener(e -> {
            if (netCommentCurrPage == 1) {
                new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                return;
            }
            netCommentCurrPage--;
            getComments(currCommentObjectInfo, false);
        });
        // 下一页按钮事件
        netCommentNextPageButton.addActionListener(e -> {
            if (netCommentCurrPage == netCommentMaxPage) {
                new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                return;
            }
            netCommentCurrPage++;
            getComments(currCommentObjectInfo, false);
        });
        // 最后一页按钮事件
        netCommentEndPageButton.addActionListener(e -> {
            if (netCommentCurrPage == netCommentMaxPage) {
                new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                return;
            }
            netCommentCurrPage = netCommentMaxPage;
            getComments(currCommentObjectInfo, false);
        });
        // 跳页按钮事件
        netCommentGoButton.addActionListener(e -> {
            String text = netCommentPageTextField.getText();
            netCommentPageTextField.setText("");
            if ("".equals(text)) return;
            int destPage = Integer.parseInt(text);
            if (destPage < 1 || destPage > netCommentMaxPage) {
                new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                return;
            }
            netCommentCurrPage = destPage;
            getComments(currCommentObjectInfo, false);
        });
        // 按钮大小限制
        Dimension dimension = new Dimension(20, 20);
        netCommentRefreshButton.setPreferredSize(dimension);
        netCommentStartPageButton.setPreferredSize(dimension);
        netCommentLastPageButton.setPreferredSize(dimension);
        netCommentGoButton.setPreferredSize(dimension);
        netCommentNextPageButton.setPreferredSize(dimension);
        netCommentEndPageButton.setPreferredSize(dimension);
        // 按钮悬浮与点击效果
        netCommentBackwardButton.addMouseListener(new ButtonMouseListener(netCommentBackwardButton, THIS));
        netCommentRefreshButton.addMouseListener(new ButtonMouseListener(netCommentRefreshButton, THIS));
        netCommentStartPageButton.addMouseListener(new ButtonMouseListener(netCommentStartPageButton, THIS));
        netCommentLastPageButton.addMouseListener(new ButtonMouseListener(netCommentLastPageButton, THIS));
        netCommentGoButton.addMouseListener(new ButtonMouseListener(netCommentGoButton, THIS));
        netCommentNextPageButton.addMouseListener(new ButtonMouseListener(netCommentNextPageButton, THIS));
        netCommentEndPageButton.addMouseListener(new ButtonMouseListener(netCommentEndPageButton, THIS));
        // 帮助提示
        netCommentBackwardButton.setToolTipText(BACKWARD_TIP);
        netCommentRefreshButton.setToolTipText(REFRESH_TIP);
        netCommentStartPageButton.setToolTipText(START_PAGE_TIP);
        netCommentLastPageButton.setToolTipText(LAST_PAGE_TIP);
        netCommentGoButton.setToolTipText(GO_TIP);
        netCommentNextPageButton.setToolTipText(NEXT_PAGE_TIP);
        netCommentEndPageButton.setToolTipText(END_PAGE_TIP);

        netCommentToolBar.setBorder(BorderFactory.createEmptyBorder(0, 37, 0, 0));
        netCommentToolBar.add(netCommentBackwardButton);
        netCommentToolBar.add(Box.createHorizontalGlue());
        netCommentToolBar.add(netCommentTitleLabel);
        netCommentToolBar.add(Box.createHorizontalGlue());
        netCommentBox.add(netCommentToolBar);

        // 评论数量和当前歌曲标签
        netCommentCountPanel.add(netCommentTypeComboBox);
        netCommentCountPanel.add(netCommentStartPageButton);
        netCommentCountPanel.add(netCommentLastPageButton);
        netCommentCountPanel.add(netCommentCountLabel);
        netCommentCountPanel.add(netCommentNextPageButton);
        netCommentCountPanel.add(netCommentEndPageButton);
        netCommentCountPanel.add(netCommentRefreshButton);
        netCommentCountPanel.add(netCommentPageTextField);
        netCommentCountPanel.add(netCommentGoButton);
        netCommentCountPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netCommentCountPanel.setVisible(false);
        netCommentBox.add(netCommentCountPanel);
    }

    // 初始化在线评论列表
    private void netCommentListInit() {
        netCommentList.setModel(netCommentListModel);
        netCommentList.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int index = netCommentList.locationToIndex(e.getPoint());
                Rectangle bounds = netCommentList.getCellBounds(index, index);
                if (bounds == null) return;
                setHoverIndex(bounds.contains(e.getPoint()) ? index : -1);
            }

            private void setHoverIndex(int index) {
                TranslucentNetCommentListRenderer renderer = (TranslucentNetCommentListRenderer) netCommentList.getCellRenderer();
                if (renderer == null) return;
                int hoverIndex = renderer.getHoverIndex();
                if (hoverIndex == index) return;
                renderer.setHoverIndex(index);
                netCommentList.repaint();
            }
        });
        netCommentList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                TranslucentNetCommentListRenderer renderer = (TranslucentNetCommentListRenderer) netCommentList.getCellRenderer();
                if (renderer == null) return;
                renderer.setHoverIndex(-1);
                netCommentList.repaint();
            }
        });
        netCommentList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                // 右键弹出菜单
                if (e.getButton() == MouseEvent.BUTTON3) {
                    if (netCommentList.getModel().getSize() != 0) {
                        // 得到鼠标光标所在的选项并选中
                        int index = netCommentList.locationToIndex(e.getPoint());
                        if (index != -1 && !netCommentList.isSelectedIndex(index)
                                || netCommentList.isSelectedIndex(index) && netCommentList.getSelectedIndices().length == 1) {
                            netCommentList.setSelectedIndex(index);
                        }
                        netCommentSaveProfileMenuItem.setEnabled(netCommentList.getSelectedValue().hasProfileUrl());
//                        netCommentSaveProfileMenuItem.setForeground(netCommentSaveProfileMenuItem.isEnabled() ? currUIStyle.getMenuItemColor() : Color.LIGHT_GRAY);
//                        SwingUtilities.updateComponentTreeUI(netCommentPopupMenu);
                        netCommentPopupMenu.show(netCommentList, e.getX(), e.getY());
                    }
                }
            }
        });
        // 复制评论
        netCommentCopyMenuItem.addActionListener(e -> {
            NetCommentInfo netCommentInfo = netCommentList.getSelectedValue();
            StringSelection stringSelection = new StringSelection(netCommentInfo.toSimpleString());
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });
        // 导出用户头像
        netCommentSaveProfileMenuItem.addActionListener(e -> {
            NetCommentInfo netCommentInfo = netCommentList.getSelectedValue();
            if (netCommentInfo.hasProfileUrl()) {
                FileChooser fileChooser = new FileChooser();
                fileChooser.setTitle("保存图片");
                ObservableList<FileChooser.ExtensionFilter> filters = fileChooser.getExtensionFilters();
                // 添加可保存的图片格式
                for (String suffix : Format.WRITE_IMAGE_TYPE_SUPPORTED) {
                    filters.add(new FileChooser.ExtensionFilter(suffix.toUpperCase(), "*." + suffix));
                }
                Platform.runLater(() -> {
                    File outputFile = fileChooser.showSaveDialog(null);
                    if (outputFile != null) {
                        ImageUtils.toFile(netCommentInfo.getProfileUrl(), outputFile);
                    }
                });
            }
        });
        // 查看用户
        netCommentUserMenuItem.addActionListener(e -> {
            NetCommentInfo netCommentInfo = netCommentList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForUser();
                    // 获取评论用户
                    currUserCommentInfo = netCommentInfo;
                    CommonResult<NetUserInfo> result = MusicServerUtils.getUserInfo(netCommentInfo.getUserId(), netCommentInfo.getSource());
                    List<NetUserInfo> netUserInfos = result.data;
                    netUserCurrPage = netUserMaxPage = 1;
                    // 标题
                    netUserTitleLabel.setText("发起评论的用户");
                    netUserToolBar.removeAll();
                    netUserToolBar.add(netUserBackwardButton);
                    netUserToolBar.add(Box.createHorizontalGlue());
                    netUserToolBar.add(netUserTitleLabel);
                    netUserToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netUserCountLabel.setText(String.format(PAGINATION_MSG, netUserCurrPage, netUserMaxPage));
                    netUserCountPanel.add(netUserCountLabel, netUserCountPanel.getComponentIndex(netUserCountLabel));
                    netUserLeftBox.add(netUserCountPanel);
                    netUserSourceComboBox.setVisible(false);
                    netUserPlayAllButton.setVisible(false);
                    netUserRecordTypeComboBox.setVisible(false);
                    netUserCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netUserList.setModel(emptyListModel);
                    netUserListModel.clear();
                    netUserInfos.forEach(userInfo -> {
                        globalExecutor.submit(() -> updateCollection(userInfo));
                        // 设置图片加载后重绘的事件
                        userInfo.setInvokeLater(() -> {
                            updateRenderer(netUserList);
                            updateRenderer(collectionList);
                            netUserList.repaint();
                            collectionList.repaint();
                        });
                        netUserListModel.addElement(userInfo);
                    });
                    netUserList.setModel(netUserListModel);
                    netUserBackwardButton.setEnabled(true);
                    netUserLeftBox.remove(netUserKeywordsPanelScrollPane);
                    if (netUserListModel.isEmpty()) {
                        netUserLeftBox.remove(netUserScrollPane);
                        netUserLeftBox.add(emptyHintPanel);
                    } else {
                        netUserLeftBox.remove(emptyHintPanel);
                        netUserLeftBox.add(netUserScrollPane);
                    }
                    netUserScrollPane.getVerticalScrollBar().setValue(0);
                    netUserLeftBox.remove(userListBox);
                    netCommentBackwardButton.doClick();
                    if (currPane == MusicPane.LYRIC) changePaneButton.doClick();
                    tabbedPane.setSelectedIndex(TabIndex.NET_USER);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看用户歌单
        netCommentPlaylistMenuItem.addActionListener(e -> {
            NetCommentInfo netCommentInfo = netCommentList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForPlaylist();
                    // 搜索用户歌单
                    CommonResult<NetPlaylistInfo> result = MusicServerUtils.getUserPlaylists(currPlaylistCommentInfo = netCommentInfo, limit, netPlaylistCurrPage = 1);
                    List<NetPlaylistInfo> netPlaylistInfos = result.data;
                    int total = result.total;
                    netPlaylistMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netPlaylistTitleLabel.setText(netCommentInfo.getUsername() + " 的歌单");
                    netPlaylistToolBar.removeAll();
                    netPlaylistToolBar.add(netPlaylistBackwardButton);
                    netPlaylistToolBar.add(Box.createHorizontalGlue());
                    netPlaylistToolBar.add(netPlaylistTitleLabel);
                    netPlaylistToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netPlaylistCountLabel.setText(String.format(PAGINATION_MSG, netPlaylistCurrPage, netPlaylistMaxPage));
                    netPlaylistCountPanel.add(netPlaylistCountLabel, netPlaylistCountPanel.getComponentIndex(netPlaylistCountLabel));
                    netPlaylistLeftBox.add(netPlaylistCountPanel);
                    netPlaylistSourceComboBox.setVisible(false);
                    netPlaylistPlayAllButton.setVisible(false);
                    netPlaylistCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netPlaylistList.setModel(emptyListModel);
                    netPlaylistListModel.clear();
                    netPlaylistInfos.forEach(playlistInfo -> {
                        globalExecutor.submit(() -> updateCollection(playlistInfo));
                        // 设置图片加载后重绘的事件
                        playlistInfo.setInvokeLater(() -> {
                            netPlaylistList.repaint();
                            collectionList.repaint();
                        });
                        netPlaylistListModel.addElement(playlistInfo);
                    });
                    netPlaylistList.setModel(netPlaylistListModel);
                    netPlaylistBackwardButton.setEnabled(true);
                    netPlaylistLeftBox.remove(netPlaylistKeywordsPanelScrollPane);
                    if (netPlaylistListModel.isEmpty()) {
                        netPlaylistLeftBox.remove(netPlaylistScrollPane);
                        netPlaylistLeftBox.add(emptyHintPanel);
                    } else {
                        netPlaylistLeftBox.remove(emptyHintPanel);
                        netPlaylistLeftBox.add(netPlaylistScrollPane);
                    }
                    netPlaylistScrollPane.getVerticalScrollBar().setValue(0);
                    netPlaylistLeftBox.remove(playlistListBox);
                    netCommentBackwardButton.doClick();
                    if (currPane == MusicPane.LYRIC) changePaneButton.doClick();
                    tabbedPane.setSelectedIndex(TabIndex.NET_PLAYLIST);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 查看用户专辑
        netCommentAlbumMenuItem.addActionListener(e -> {
            NetCommentInfo netCommentInfo = netCommentList.getSelectedValue();
            loadingAndRun(() -> {
                try {
                    clearRequestForAlbum();
                    // 搜索用户专辑并显示专辑列表
                    CommonResult<NetAlbumInfo> result = MusicServerUtils.getUserAlbums(currAlbumCommentInfo = netCommentInfo, limit, netAlbumCurrPage = 1);
                    List<NetAlbumInfo> netAlbumInfos = result.data;
                    Integer total = result.total;
                    netAlbumMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 标题
                    netAlbumTitleLabel.setText(netCommentInfo.getUsername() + " 的专辑");
                    netAlbumToolBar.removeAll();
                    netAlbumToolBar.add(netAlbumBackwardButton);
                    netAlbumToolBar.add(Box.createHorizontalGlue());
                    netAlbumToolBar.add(netAlbumTitleLabel);
                    netAlbumToolBar.add(Box.createHorizontalGlue());
                    // 更新数量显示
                    netAlbumCountLabel.setText(String.format(PAGINATION_MSG, netAlbumCurrPage, netAlbumMaxPage));
                    netAlbumCountPanel.add(netAlbumCountLabel, netAlbumCountPanel.getComponentIndex(netAlbumCountLabel));
                    netAlbumLeftBox.add(netAlbumCountPanel);
                    netAlbumSourceComboBox.setVisible(false);
                    netAlbumPlayAllButton.setVisible(false);
                    netAlbumCountPanel.setVisible(true);
                    // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                    netAlbumList.setModel(emptyListModel);
                    netAlbumListModel.clear();
                    netAlbumInfos.forEach(albumInfo -> {
                        globalExecutor.submit(() -> updateCollection(albumInfo));
                        // 设置图片加载后重绘的事件
                        albumInfo.setInvokeLater(() -> {
                            updateRenderer(netAlbumList);
                            updateRenderer(collectionList);
                            netAlbumList.repaint();
                            collectionList.repaint();
                        });
                        netAlbumListModel.addElement(albumInfo);
                    });
                    netAlbumList.setModel(netAlbumListModel);
                    netAlbumBackwardButton.setEnabled(true);
                    netAlbumLeftBox.remove(netAlbumKeywordsPanelScrollPane);
                    if (netAlbumListModel.isEmpty()) {
                        netAlbumLeftBox.remove(netAlbumScrollPane);
                        netAlbumLeftBox.add(emptyHintPanel);
                    } else {
                        netAlbumLeftBox.remove(emptyHintPanel);
                        netAlbumLeftBox.add(netAlbumScrollPane);
                    }
                    netAlbumScrollPane.getVerticalScrollBar().setValue(0);
                    netAlbumLeftBox.remove(albumListBox);
                    netCommentBackwardButton.doClick();
                    if (currPane == MusicPane.LYRIC) changePaneButton.doClick();
                    tabbedPane.setSelectedIndex(TabIndex.NET_ALBUM);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 评论列表右键菜单项
        netCommentPopupMenu.add(netCommentCopyMenuItem);
        netCommentPopupMenu.add(netCommentSaveProfileMenuItem);
        netCommentPopupMenu.add(netCommentUserMenuItem);
        netCommentPopupMenu.add(netCommentPlaylistMenuItem);
        netCommentPopupMenu.add(netCommentAlbumMenuItem);

        // 评论最佳大小
        netCommentScrollPane.setPreferredSize(new Dimension(200, 600));
        // 评论滚动速度
        netCommentScrollPane.getVerticalScrollBar().setUnitIncrement(20);
        netCommentBox.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 10));
        netCommentBox.add(netCommentScrollPane);
    }

    // 初始化乐谱工具栏
    private void netSheetToolBarInit() {
        // 只能输入数字
        netSheetPageTextField.setDocument(new SafeDocument(0, Integer.MAX_VALUE));
        // 后退按钮事件
        netSheetBackwardButton.addActionListener(e -> {
            netSheetList.setModel(emptyListModel);
            if (!netSheetListModel.isEmpty()) netSheetListModel.clear();
            globalPanel.remove(netSheetBox);
            if (lastPane == MusicPane.MUSIC) {
                globalPanel.add(tabbedPane, BorderLayout.CENTER);
            } else if (lastPane == MusicPane.LYRIC) {
                lrcScrollAnimation = true;
                globalPanel.add(infoAndLrcBox, BorderLayout.CENTER);
            }
            globalPanel.repaint();
            currPane = lastPane;
        });
        // 刷新按钮事件
        netSheetRefreshButton.addActionListener(e -> {
            getSheets(currSheetMusicInfo, false);
        });
        // 第一页按钮事件
        netSheetStartPageButton.addActionListener(e -> {
            if (netSheetCurrPage == 1) {
                new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                return;
            }
            netSheetCurrPage = 1;
            getSheets(currSheetMusicInfo, false);
        });
        // 上一页按钮事件
        netSheetLastPageButton.addActionListener(e -> {
            if (netSheetCurrPage == 1) {
                new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                return;
            }
            netSheetCurrPage--;
            getSheets(currSheetMusicInfo, false);
        });
        // 下一页按钮事件
        netSheetNextPageButton.addActionListener(e -> {
            if (netSheetCurrPage == netSheetMaxPage) {
                new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                return;
            }
            netSheetCurrPage++;
            getSheets(currSheetMusicInfo, false);
        });
        // 最后一页按钮事件
        netSheetEndPageButton.addActionListener(e -> {
            if (netSheetCurrPage == netSheetMaxPage) {
                new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                return;
            }
            netSheetCurrPage = netSheetMaxPage;
            getSheets(currSheetMusicInfo, false);
        });
        // 跳页按钮事件
        netSheetGoButton.addActionListener(e -> {
            String text = netSheetPageTextField.getText();
            netSheetPageTextField.setText("");
            if ("".equals(text)) return;
            int destPage = Integer.parseInt(text);
            if (destPage < 1 || destPage > netSheetMaxPage) {
                new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                return;
            }
            netSheetCurrPage = destPage;
            getSheets(currSheetMusicInfo, false);
        });
        // 按钮大小限制
        Dimension dimension = new Dimension(20, 20);
        netSheetRefreshButton.setPreferredSize(dimension);
        netSheetStartPageButton.setPreferredSize(dimension);
        netSheetLastPageButton.setPreferredSize(dimension);
        netSheetGoButton.setPreferredSize(dimension);
        netSheetNextPageButton.setPreferredSize(dimension);
        netSheetEndPageButton.setPreferredSize(dimension);
        // 按钮悬浮与点击效果
        netSheetBackwardButton.addMouseListener(new ButtonMouseListener(netSheetBackwardButton, THIS));
        netSheetRefreshButton.addMouseListener(new ButtonMouseListener(netSheetRefreshButton, THIS));
        netSheetStartPageButton.addMouseListener(new ButtonMouseListener(netSheetStartPageButton, THIS));
        netSheetLastPageButton.addMouseListener(new ButtonMouseListener(netSheetLastPageButton, THIS));
        netSheetGoButton.addMouseListener(new ButtonMouseListener(netSheetGoButton, THIS));
        netSheetNextPageButton.addMouseListener(new ButtonMouseListener(netSheetNextPageButton, THIS));
        netSheetEndPageButton.addMouseListener(new ButtonMouseListener(netSheetEndPageButton, THIS));
        // 帮助提示
        netSheetBackwardButton.setToolTipText(BACKWARD_TIP);
        netSheetRefreshButton.setToolTipText(REFRESH_TIP);
        netSheetStartPageButton.setToolTipText(START_PAGE_TIP);
        netSheetLastPageButton.setToolTipText(LAST_PAGE_TIP);
        netSheetGoButton.setToolTipText(GO_TIP);
        netSheetNextPageButton.setToolTipText(NEXT_PAGE_TIP);
        netSheetEndPageButton.setToolTipText(END_PAGE_TIP);

        netSheetToolBar.setBorder(BorderFactory.createEmptyBorder(0, 37, 0, 0));
        netSheetToolBar.add(netSheetBackwardButton);
        netSheetToolBar.add(Box.createHorizontalGlue());
        netSheetToolBar.add(netSheetTitleLabel);
        netSheetToolBar.add(Box.createHorizontalGlue());
        netSheetBox.add(netSheetToolBar);

        // 乐谱数量和当前歌曲标签
        netSheetCountPanel.add(netSheetStartPageButton);
        netSheetCountPanel.add(netSheetLastPageButton);
        netSheetCountPanel.add(netSheetCountLabel);
        netSheetCountPanel.add(netSheetNextPageButton);
        netSheetCountPanel.add(netSheetEndPageButton);
        netSheetCountPanel.add(netSheetRefreshButton);
        netSheetCountPanel.add(netSheetPageTextField);
        netSheetCountPanel.add(netSheetGoButton);
        netSheetCountPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        netSheetCountPanel.setVisible(false);
        netSheetBox.add(netSheetCountPanel);
    }

    // 初始化在线乐谱列表
    private void netSheetListInit() {
        netSheetList.setModel(netSheetListModel);
        netSheetList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    netSheetBrowseMenuItem.doClick();
                }
            }
        });
        netSheetList.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int index = netSheetList.locationToIndex(e.getPoint());
                Rectangle bounds = netSheetList.getCellBounds(index, index);
                if (bounds == null) return;
                setHoverIndex(bounds.contains(e.getPoint()) ? index : -1);
            }

            private void setHoverIndex(int index) {
                TranslucentNetSheetListRenderer renderer = (TranslucentNetSheetListRenderer) netSheetList.getCellRenderer();
                if (renderer == null) return;
                int hoverIndex = renderer.getHoverIndex();
                if (hoverIndex == index) return;
                renderer.setHoverIndex(index);
                netSheetList.repaint();
            }
        });
        netSheetList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                TranslucentNetSheetListRenderer renderer = (TranslucentNetSheetListRenderer) netSheetList.getCellRenderer();
                if (renderer == null) return;
                renderer.setHoverIndex(-1);
                netSheetList.repaint();
            }
        });
        netSheetList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                // 鼠标左键双击打开乐谱
                if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    netSheetBrowseMenuItem.doClick();
                }
                // 右键弹出菜单
                else if (e.getButton() == MouseEvent.BUTTON3) {
                    if (netSheetList.getModel().getSize() != 0) {
                        // 得到鼠标光标所在的选项并选中
                        int index = netSheetList.locationToIndex(e.getPoint());
                        if (index != -1 && !netSheetList.isSelectedIndex(index)
                                || netSheetList.isSelectedIndex(index) && netSheetList.getSelectedIndices().length == 1) {
                            netSheetList.setSelectedIndex(index);
                        }
                        netSheetPopupMenu.show(netSheetList, e.getX(), e.getY());
                    }
                }
            }
        });
        // 查看乐谱
        netSheetBrowseMenuItem.addActionListener(e -> {
            try {
                NetSheetInfo netSheetInfo = netSheetList.getSelectedValue();
//                CommonResult<String> results = MusicServerUtils.getSheetImgUrls(netSheetInfo);
//                List<String> imgUrls = results.data;
//                Integer total = results.total;
//                if (imgUrls.isEmpty()) {
//                    new TipDialog(THIS, NO_IMG_MSG).showDialog();
//                    return;
//                }
                imageViewDialog = new ImageViewDialog(THIS, 30) {
                    @Override
                    public CommonResult<String> requestImgUrls(int pn, int limit, String cursor) {
                        return MusicServerUtils.getSheetImgUrls(netSheetInfo);
                    }

                    @Override
                    public void requestFailed() {
                        new TipDialog(THIS, NO_IMG_MSG).showDialog();
                    }
                };
                imageViewDialog.showDialog();
                imageViewDialog = null;
            } catch (IORuntimeException ioRuntimeException) {
                // 无网络连接
                new TipDialog(THIS, NO_NET_MSG).showDialog();
            } catch (HttpException httpException) {
                // 请求超时
                new TipDialog(THIS, TIME_OUT_MSG).showDialog();
            } catch (JSONException jsonException) {
                // 接口异常
                new TipDialog(THIS, API_ERROR_MSG).showDialog();
            }
        });
        // 复制乐谱名称
        netSheetCopyNameMenuItem.addActionListener(e -> {
            NetSheetInfo netSheetInfo = netSheetList.getSelectedValue();
            StringSelection stringSelection = new StringSelection(netSheetInfo.toString());
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });
        // 乐谱列表右键菜单项
        netSheetPopupMenu.add(netSheetBrowseMenuItem);
        netSheetPopupMenu.add(netSheetCopyNameMenuItem);

        // 乐谱最佳大小
        netSheetScrollPane.setPreferredSize(new Dimension(200, 600));
        // 乐谱滚动速度
        netSheetScrollPane.getVerticalScrollBar().setUnitIncrement(20);
        netSheetBox.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 10));
        netSheetBox.add(netSheetScrollPane);
    }

    // 初始化推荐工具条
    private void recommendToolBarInit() {
        // 只能输入数字
        netRecommendPageTextField.setDocument(new SafeDocument(0, Integer.MAX_VALUE));
        // 推荐后退按钮事件
        recommendBackwardButton.addActionListener(e -> {
            // 返回到歌单/专辑/歌手/电台
            // 先清空在线音乐列表
            ((DefaultListModel) netMusicList.getModel()).clear();
            // 从在线音乐列表切换回歌单/专辑/歌手/电台列表
            if (currRecommendTab != RecommendTabIndex.HOT_MUSIC_RECOMMEND
                    && currRecommendTab != RecommendTabIndex.NEW_RADIO_RECOMMEND)
                netRecommendTagComboBox.setVisible(true);
            netRecommendPlayAllButton.setVisible(false);
            recommendLeftBox.remove(recommendItemListBox);
            recommendLeftBox.remove(musicRecommendToolBar);
            recommendLeftBox.add(recommendCountPanel);
            recommendLeftBox.add(itemRecommendScrollPane);
            // 添加回推荐工具栏，不需要加载更多才删除之前的工具栏
            recommendLeftBox.remove(musicRecommendToolBar);
            recommendLeftBox.add(recommendToolBar, 0);
            // 更新歌单/专辑/歌手/电台数量显示
            recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
            // 解决数量标签文字显示不全问题
            recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
            recommendBackwardButton.setEnabled(false);
            netRecommendSourceComboBox.setVisible(true);
            // 切换后一定要刷新！
            recommendLeftBox.repaint();
        });
        // 推荐模块跳页事件，可复用
        Runnable recommendGoPageAction = () -> {
            // 搜索推荐歌单/专辑/歌手/电台里的歌
            if (recommendBackwardButton.isEnabled()) {
                loadingAndRun(() -> {
                    // 搜索歌曲并显示在在线播放列表
                    try {
                        Object o = itemRecommendList.getSelectedValue();
                        // 这是歌单里的歌
                        if (o instanceof NetPlaylistInfo) {
                            NetPlaylistInfo playlistInfo = (NetPlaylistInfo) o;
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInPlaylist(
                                    playlistInfo.getId(), playlistInfo.getSource(), limit, netMusicInRecommendCurrPage);
                            List<NetMusicInfo> musicInfos = result.data;
                            int total = result.total;
                            netMusicInRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            recommendCountLabel.setText(String.format(PAGINATION_MSG, netMusicInRecommendCurrPage, netMusicInRecommendMaxPage));
                            // 解决数量标签文字显示不全问题
                            recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                            // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForPlaylistRecommendModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForPlaylistRecommendModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForPlaylistRecommendModel);
                            if (netMusicListForPlaylistRecommendModel.isEmpty()) {
                                recommendItemListCountBox.remove(netMusicScrollPane);
                                recommendItemListCountBox.add(emptyHintPanel);
                            } else {
                                recommendItemListCountBox.remove(emptyHintPanel);
                                recommendItemListCountBox.add(netMusicScrollPane);
                            }
                            recommendLeftBox.repaint();
                        }
                        // 这是专辑里的歌
                        else if (o instanceof NetAlbumInfo) {
                            NetAlbumInfo albumInfo = (NetAlbumInfo) o;
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInAlbum(
                                    albumInfo.getId(), albumInfo.getSource(), limit, netMusicInRecommendCurrPage);
                            List<NetMusicInfo> musicInfos = result.data;
                            int total = result.total;
                            netMusicInRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            recommendCountLabel.setText(String.format(PAGINATION_MSG, netMusicInRecommendCurrPage, netMusicInRecommendMaxPage));
                            // 解决数量标签文字显示不全问题
                            recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                            // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForAlbumRecommendModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForAlbumRecommendModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForAlbumRecommendModel);
                            if (netMusicListForAlbumRecommendModel.isEmpty()) {
                                recommendItemListCountBox.remove(netMusicScrollPane);
                                recommendItemListCountBox.add(emptyHintPanel);
                            } else {
                                recommendItemListCountBox.remove(emptyHintPanel);
                                recommendItemListCountBox.add(netMusicScrollPane);
                            }
                            recommendLeftBox.repaint();
                        }
                        // 这是歌手里的歌
                        else if (o instanceof NetArtistInfo) {
                            NetArtistInfo artistInfo = (NetArtistInfo) o;
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInArtist(
                                    artistInfo.getId(), artistInfo.getSource(), limit, netMusicInRecommendCurrPage);
                            List<NetMusicInfo> musicInfos = result.data;
                            int total = result.total;
                            netMusicInRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            recommendCountLabel.setText(String.format(PAGINATION_MSG, netMusicInRecommendCurrPage, netMusicInRecommendMaxPage));
                            // 解决数量标签文字显示不全问题
                            recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                            // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForArtistRecommendModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForArtistRecommendModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForArtistRecommendModel);
                            if (netMusicListForArtistRecommendModel.isEmpty()) {
                                recommendItemListCountBox.remove(netMusicScrollPane);
                                recommendItemListCountBox.add(emptyHintPanel);
                            } else {
                                recommendItemListCountBox.remove(emptyHintPanel);
                                recommendItemListCountBox.add(netMusicScrollPane);
                            }
                            recommendLeftBox.repaint();
                        }
                        // 这是电台里的歌
                        else if (o instanceof NetRadioInfo) {
                            NetRadioInfo radioInfo = (NetRadioInfo) o;
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInRadio(
                                    radioInfo, limit, netMusicInRecommendCurrPage);
                            List<NetMusicInfo> musicInfos = result.data;
                            Integer total = result.total;
                            netMusicInRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            recommendCountLabel.setText(String.format(PAGINATION_MSG, netMusicInRecommendCurrPage, netMusicInRecommendMaxPage));
                            // 解决数量标签文字显示不全问题
                            recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                            // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForRadioRecommendModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForRadioRecommendModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForRadioRecommendModel);
                            if (netMusicListForRadioRecommendModel.isEmpty()) {
                                recommendItemListCountBox.remove(netMusicScrollPane);
                                recommendItemListCountBox.add(emptyHintPanel);
                            } else {
                                recommendItemListCountBox.remove(emptyHintPanel);
                                recommendItemListCountBox.add(netMusicScrollPane);
                            }
                            recommendLeftBox.repaint();
                        }
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
            // 搜索推荐歌单
            else if (currRecommendTab == RecommendTabIndex.PLAYLIST_RECOMMEND) {
                loadingAndRun(() -> {
                    // 搜索歌曲并显示在在线播放列表
                    try {
                        CommonResult<NetPlaylistInfo> result = MusicServerUtils.getRecommendPlaylists(
                                netRecommendSourceComboBox.getSelectedIndex(), (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage);
                        List<NetPlaylistInfo> netPlaylistInfos = result.data;
                        int total = result.total;
                        netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                        // 解决数量标签文字显示不全问题
                        recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        itemRecommendList.setModel(emptyListModel);
                        playlistRecommendListModel.clear();
                        netPlaylistInfos.forEach(netPlaylistInfo -> {
                            globalExecutor.submit(() -> updateCollection(netPlaylistInfo));
                            // 设置图片加载后重绘的事件
                            netPlaylistInfo.setInvokeLater(() -> {
                                itemRecommendList.repaint();
                                collectionList.repaint();
                            });
                            playlistRecommendListModel.addElement(netPlaylistInfo);
                        });
                        itemRecommendList.setModel(playlistRecommendListModel);
                        itemRecommendScrollPane.getVerticalScrollBar().setValue(0);
                        if (playlistRecommendListModel.isEmpty()) {
                            recommendLeftBox.remove(itemRecommendScrollPane);
                            recommendLeftBox.add(emptyHintPanel);
                        } else {
                            recommendLeftBox.remove(emptyHintPanel);
                            recommendLeftBox.add(itemRecommendScrollPane);
                        }
                        recommendLeftBox.repaint();
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
            // 搜索精品歌单
            else if (currRecommendTab == RecommendTabIndex.HIGH_QUALITY_PLAYLIST_RECOMMEND) {
                loadingAndRun(() -> {
                    // 搜索歌曲并显示在在线播放列表
                    try {
                        CommonResult<NetPlaylistInfo> result = MusicServerUtils.getHighQualityPlaylists(
                                netRecommendSourceComboBox.getSelectedIndex(), (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage);
                        List<NetPlaylistInfo> netPlaylistInfos = result.data;
                        int total = result.total;
                        netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                        // 解决数量标签文字显示不全问题
                        recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        itemRecommendList.setModel(emptyListModel);
                        playlistRecommendListModel.clear();
                        netPlaylistInfos.forEach(netPlaylistInfo -> {
                            globalExecutor.submit(() -> updateCollection(netPlaylistInfo));
                            // 设置图片加载后重绘的事件
                            netPlaylistInfo.setInvokeLater(() -> {
                                itemRecommendList.repaint();
                                collectionList.repaint();
                            });
                            playlistRecommendListModel.addElement(netPlaylistInfo);
                        });
                        itemRecommendList.setModel(playlistRecommendListModel);
                        itemRecommendScrollPane.getVerticalScrollBar().setValue(0);
                        if (playlistRecommendListModel.isEmpty()) {
                            recommendLeftBox.remove(itemRecommendScrollPane);
                            recommendLeftBox.add(emptyHintPanel);
                        } else {
                            recommendLeftBox.remove(emptyHintPanel);
                            recommendLeftBox.add(itemRecommendScrollPane);
                        }
                        recommendLeftBox.repaint();
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
            // 搜索飙升歌曲
            else if (currRecommendTab == RecommendTabIndex.HOT_MUSIC_RECOMMEND) {
                loadingAndRun(() -> {
                    // 搜索歌曲并显示在在线播放列表
                    try {
                        CommonResult<NetMusicInfo> result = MusicServerUtils.getHotMusicRecommend(
                                netRecommendSourceComboBox.getSelectedIndex(), (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage);
                        List<NetMusicInfo> netMusicInfos = result.data;
                        int total = result.total;
                        netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                        // 解决数量标签文字显示不全问题
                        recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netMusicList.setModel(emptyListModel);
                        netMusicRecommendListModel.clear();
                        netMusicInfos.forEach(netMusicInfo -> netMusicRecommendListModel.addElement(netMusicInfo));
                        netMusicList.setModel(netMusicRecommendListModel);
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                        if (netMusicRecommendListModel.isEmpty()) {
                            recommendLeftBox.remove(netMusicScrollPane);
                            recommendLeftBox.add(emptyHintPanel);
                        } else {
                            recommendLeftBox.remove(emptyHintPanel);
                            recommendLeftBox.add(netMusicScrollPane);
                        }
                        recommendLeftBox.repaint();
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
            // 搜索新歌速递
            else if (currRecommendTab == RecommendTabIndex.NEW_MUSIC_RECOMMEND) {
                loadingAndRun(() -> {
                    // 搜索歌曲并显示在在线播放列表
                    try {
                        CommonResult<NetMusicInfo> result = MusicServerUtils.getNewMusic(
                                netRecommendSourceComboBox.getSelectedIndex(), (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage);
                        List<NetMusicInfo> netMusicInfos = result.data;
                        int total = result.total;
                        netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                        // 解决数量标签文字显示不全问题
                        recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netMusicList.setModel(emptyListModel);
                        netMusicRecommendListModel.clear();
                        netMusicInfos.forEach(netMusicInfo -> netMusicRecommendListModel.addElement(netMusicInfo));
                        netMusicList.setModel(netMusicRecommendListModel);
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                        if (netMusicRecommendListModel.isEmpty()) {
                            recommendLeftBox.remove(netMusicScrollPane);
                            recommendLeftBox.add(emptyHintPanel);
                        } else {
                            recommendLeftBox.remove(emptyHintPanel);
                            recommendLeftBox.add(netMusicScrollPane);
                        }
                        recommendLeftBox.repaint();
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
            // 搜索新碟上架
            else if (currRecommendTab == RecommendTabIndex.NEW_ALBUM_RECOMMEND) {
                loadingAndRun(() -> {
                    // 搜索歌曲并显示在在线播放列表
                    try {
                        CommonResult<NetAlbumInfo> result = MusicServerUtils.getNewAlbums(
                                netRecommendSourceComboBox.getSelectedIndex(), (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage);
                        List<NetAlbumInfo> netAlbumInfos = result.data;
                        int total = result.total;
                        netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                        // 解决数量标签文字显示不全问题
                        recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        itemRecommendList.setModel(emptyListModel);
                        albumRecommendListModel.clear();
                        netAlbumInfos.forEach(netAlbumInfo -> {
                            globalExecutor.submit(() -> updateCollection(netAlbumInfo));
                            // 设置图片加载后重绘的事件
                            netAlbumInfo.setInvokeLater(() -> {
                                updateRenderer(itemRecommendList);
                                updateRenderer(collectionList);
                                itemRecommendList.repaint();
                                collectionList.repaint();
                            });
                            albumRecommendListModel.addElement(netAlbumInfo);
                        });
                        itemRecommendList.setModel(albumRecommendListModel);
                        itemRecommendScrollPane.getVerticalScrollBar().setValue(0);
                        if (albumRecommendListModel.isEmpty()) {
                            recommendLeftBox.remove(itemRecommendScrollPane);
                            recommendLeftBox.add(emptyHintPanel);
                        } else {
                            recommendLeftBox.remove(emptyHintPanel);
                            recommendLeftBox.add(itemRecommendScrollPane);
                        }
                        recommendLeftBox.repaint();
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
            // 搜索歌手排行
            else if (currRecommendTab == RecommendTabIndex.ARTIST_LIST_RECOMMEND) {
                loadingAndRun(() -> {
                    // 搜索歌曲并显示在在线播放列表
                    try {
                        CommonResult<NetArtistInfo> result = MusicServerUtils.getArtistLists(
                                netRecommendSourceComboBox.getSelectedIndex(), (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage);
                        List<NetArtistInfo> netArtistInfos = result.data;
                        int total = result.total;
                        netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                        // 解决数量标签文字显示不全问题
                        recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        itemRecommendList.setModel(emptyListModel);
                        artistRecommendListModel.clear();
                        netArtistInfos.forEach(netArtistInfo -> {
                            globalExecutor.submit(() -> updateCollection(netArtistInfo));
                            // 设置图片加载后重绘的事件
                            netArtistInfo.setInvokeLater(() -> {
                                itemRecommendList.repaint();
                                collectionList.repaint();
                            });
                            artistRecommendListModel.addElement(netArtistInfo);
                        });
                        itemRecommendList.setModel(artistRecommendListModel);
                        itemRecommendScrollPane.getVerticalScrollBar().setValue(0);
                        if (artistRecommendListModel.isEmpty()) {
                            recommendLeftBox.remove(itemRecommendScrollPane);
                            recommendLeftBox.add(emptyHintPanel);
                        } else {
                            recommendLeftBox.remove(emptyHintPanel);
                            recommendLeftBox.add(itemRecommendScrollPane);
                        }
                        recommendLeftBox.repaint();
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
            // 搜索新晋电台
            else if (currRecommendTab == RecommendTabIndex.NEW_RADIO_RECOMMEND) {
                loadingAndRun(() -> {
                    // 搜索歌曲并显示在在线播放列表
                    try {
                        CommonResult<NetRadioInfo> result = MusicServerUtils.getNewRadios(
                                netRecommendSourceComboBox.getSelectedIndex(), limit, netRecommendCurrPage);
                        List<NetRadioInfo> netRadioInfos = result.data;
                        int total = result.total;
                        netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                        // 解决数量标签文字显示不全问题
                        recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        itemRecommendList.setModel(emptyListModel);
                        radioRecommendListModel.clear();
                        netRadioInfos.forEach(netRadioInfo -> {
                            globalExecutor.submit(() -> updateCollection(netRadioInfo));
                            // 设置图片加载后重绘的事件
                            netRadioInfo.setInvokeLater(() -> {
                                itemRecommendList.repaint();
                                collectionList.repaint();
                            });
                            radioRecommendListModel.addElement(netRadioInfo);
                        });
                        itemRecommendList.setModel(radioRecommendListModel);
                        itemRecommendScrollPane.getVerticalScrollBar().setValue(0);
                        if (radioRecommendListModel.isEmpty()) {
                            recommendLeftBox.remove(itemRecommendScrollPane);
                            recommendLeftBox.add(emptyHintPanel);
                        } else {
                            recommendLeftBox.remove(emptyHintPanel);
                            recommendLeftBox.add(itemRecommendScrollPane);
                        }
                        recommendLeftBox.repaint();
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
            // 搜索热门电台
            else if (currRecommendTab == RecommendTabIndex.HOT_RADIO_RECOMMEND) {
                loadingAndRun(() -> {
                    // 搜索歌曲并显示在在线播放列表
                    try {
                        CommonResult<NetRadioInfo> result = MusicServerUtils.getHotRadios(
                                netRecommendSourceComboBox.getSelectedIndex(), (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage);
                        List<NetRadioInfo> netRadioInfos = result.data;
                        int total = result.total;
                        netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                        // 解决数量标签文字显示不全问题
                        recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        itemRecommendList.setModel(emptyListModel);
                        radioRecommendListModel.clear();
                        netRadioInfos.forEach(netRadioInfo -> {
                            globalExecutor.submit(() -> updateCollection(netRadioInfo));
                            // 设置图片加载后重绘的事件
                            netRadioInfo.setInvokeLater(() -> {
                                updateRenderer(itemRecommendList);
                                updateRenderer(collectionList);
                                itemRecommendList.repaint();
                                collectionList.repaint();
                            });
                            radioRecommendListModel.addElement(netRadioInfo);
                        });
                        itemRecommendList.setModel(radioRecommendListModel);
                        itemRecommendScrollPane.getVerticalScrollBar().setValue(0);
                        if (radioRecommendListModel.isEmpty()) {
                            recommendLeftBox.remove(itemRecommendScrollPane);
                            recommendLeftBox.add(emptyHintPanel);
                        } else {
                            recommendLeftBox.remove(emptyHintPanel);
                            recommendLeftBox.add(itemRecommendScrollPane);
                        }
                        recommendLeftBox.repaint();
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
            // 搜索推荐节目
            else if (currRecommendTab == RecommendTabIndex.PROGRAM_RECOMMEND) {
                loadingAndRun(() -> {
                    // 搜索歌曲并显示在在线播放列表
                    try {
                        CommonResult<NetMusicInfo> result = MusicServerUtils.getRecommendPrograms(
                                netRecommendSourceComboBox.getSelectedIndex(), (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage);
                        List<NetMusicInfo> netMusicInfos = result.data;
                        int total = result.total;
                        netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                        // 解决数量标签文字显示不全问题
                        recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        netMusicList.setModel(emptyListModel);
                        netMusicRecommendListModel.clear();
                        netMusicInfos.forEach(netMusicInfo -> netMusicRecommendListModel.addElement(netMusicInfo));
                        netMusicList.setModel(netMusicRecommendListModel);
                        netMusicScrollPane.getVerticalScrollBar().setValue(0);
                        if (netMusicRecommendListModel.isEmpty()) {
                            recommendLeftBox.remove(netMusicScrollPane);
                            recommendLeftBox.add(emptyHintPanel);
                        } else {
                            recommendLeftBox.remove(emptyHintPanel);
                            recommendLeftBox.add(netMusicScrollPane);
                        }
                        recommendLeftBox.repaint();
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
            // 搜索推荐 MV
            else if (currRecommendTab == RecommendTabIndex.MV_RECOMMEND) {
                loadingAndRun(() -> {
                    // 搜索歌曲并显示在在线播放列表
                    try {
                        CommonResult<NetMvInfo> result = MusicServerUtils.getRecommendMvs(
                                netRecommendSourceComboBox.getSelectedIndex(), (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage);
                        List<NetMvInfo> netMvInfos = result.data;
                        int total = result.total;
                        netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                        // 更新数量显示
                        recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                        // 解决数量标签文字显示不全问题
                        recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                        // 添加数据建议在更新数量显示之后，不然有时候会出现显示不出来的情况！
                        itemRecommendList.setModel(emptyListModel);
                        mvRecommendListModel.clear();
                        netMvInfos.forEach(netMvInfo -> {
                            globalExecutor.submit(() -> updateCollection(netMvInfo));
                            // 设置图片加载后重绘的事件
                            netMvInfo.setInvokeLater(() -> {
                                updateRenderer(itemRecommendList);
                                updateRenderer(collectionList);
                                itemRecommendList.repaint();
                                collectionList.repaint();
                            });
                            mvRecommendListModel.addElement(netMvInfo);
                        });
                        itemRecommendList.setModel(mvRecommendListModel);
                        itemRecommendScrollPane.getVerticalScrollBar().setValue(0);
                        if (mvRecommendListModel.isEmpty()) {
                            recommendLeftBox.remove(itemRecommendScrollPane);
                            recommendLeftBox.add(emptyHintPanel);
                        } else {
                            recommendLeftBox.remove(emptyHintPanel);
                            recommendLeftBox.add(itemRecommendScrollPane);
                        }
                        recommendLeftBox.repaint();
                    } catch (IORuntimeException ioRuntimeException) {
                        // 无网络连接
                        new TipDialog(THIS, NO_NET_MSG).showDialog();
                    } catch (HttpException httpException) {
                        // 请求超时
                        new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                    } catch (JSONException jsonException) {
                        // 接口异常
                        new TipDialog(THIS, API_ERROR_MSG).showDialog();
                    }
                });
            }
        };
        // 推荐标签下拉框
        netRecommendTagComboBox.addItemListener(e -> {
            // 避免事件被处理 2 次！
            if (netRecommendTagComboBox.getItemCount() <= 1
                    || netRecommendTagComboBox.getSelectedItem() == null
                    || e.getStateChange() != ItemEvent.SELECTED) return;
            netRecommendCurrPage = 1;
            recommendGoPageAction.run();
        });
        // 播放全部
        netRecommendPlayAllButton.addActionListener(e -> {
            Object o = itemRecommendList.getSelectedValue();
            if (o instanceof NetPlaylistInfo) netPlaylistPlayAllButton.doClick();
            else if (o instanceof NetAlbumInfo) netAlbumPlayAllButton.doClick();
            else if (o instanceof NetArtistInfo) netArtistPlayAllButton.doClick();
            else if (o instanceof NetRadioInfo) netRadioPlayAllButton.doClick();
        });
        // 刷新按钮事件
        netRecommendRefreshButton.addActionListener(e -> {
            // 当前显示的是推荐列表，刷新推荐
            if (!recommendBackwardButton.isEnabled()) {
                recommendGoPageAction.run();
            }
            // 当前显示的是推荐里的歌曲，刷新歌曲
            else {
                recommendGoPageAction.run();
            }
        });
        // 第一页按钮事件
        netRecommendStartPageButton.addActionListener(e -> {
            // 当前显示的是推荐列表，跳到第一页推荐
            if (!recommendBackwardButton.isEnabled()) {
                if (netRecommendCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netRecommendCurrPage = 1;
                recommendGoPageAction.run();
            }
            // 当前显示的是推荐里的歌曲，跳到第一页歌曲
            else {
                if (netMusicInRecommendCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInRecommendCurrPage = 1;
                recommendGoPageAction.run();
            }
        });
        // 上一页按钮事件
        netRecommendLastPageButton.addActionListener(e -> {
            // 当前显示的是推荐列表，跳到上一页推荐
            if (!recommendBackwardButton.isEnabled()) {
                if (netRecommendCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netRecommendCurrPage--;
                recommendGoPageAction.run();
            }
            // 当前显示的是推荐里的歌曲，跳到上一页歌曲
            else {
                if (netMusicInRecommendCurrPage == 1) {
                    new TipDialog(THIS, FIRST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInRecommendCurrPage--;
                recommendGoPageAction.run();
            }
        });
        // 下一页按钮事件
        netRecommendNextPageButton.addActionListener(e -> {
            // 当前显示的是推荐列表，跳到下一页推荐
            if (!recommendBackwardButton.isEnabled()) {
                // netRecommendMaxPage 为 -1 时，页数未知
                if (netRecommendCurrPage == netRecommendMaxPage && netRecommendMaxPage > 0) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netRecommendCurrPage++;
                recommendGoPageAction.run();
            }
            // 当前显示的是某推荐里的歌曲，跳到下一页歌曲
            else {
                if (netMusicInRecommendCurrPage == netMusicInRecommendMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInRecommendCurrPage++;
                recommendGoPageAction.run();
            }
        });
        // 最后一页按钮事件
        netRecommendEndPageButton.addActionListener(e -> {
            // 当前显示的是推荐列表，跳到最后一页推荐
            if (!recommendBackwardButton.isEnabled()) {
                // netRecommendMaxPage 为 -1 时，页数未知
                if (netRecommendCurrPage == netRecommendMaxPage && netRecommendMaxPage > 0) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netRecommendCurrPage = netRecommendMaxPage;
                recommendGoPageAction.run();
            }
            // 当前显示的是某推荐里的歌曲，跳到最后一页歌曲
            else {
                if (netMusicInRecommendCurrPage == netMusicInRecommendMaxPage) {
                    new TipDialog(THIS, LAST_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInRecommendCurrPage = netMusicInRecommendMaxPage;
                recommendGoPageAction.run();
            }
        });
        // 跳页按钮事件
        netRecommendGoButton.addActionListener(e -> {
            // 当前显示的是推荐列表，跳页推荐
            if (!recommendBackwardButton.isEnabled()) {
                String text = netRecommendPageTextField.getText();
                netRecommendPageTextField.setText("");
                if ("".equals(text)) return;
                int destPage = Integer.parseInt(text);
                // netRecommendMaxPage 为 -1 时，页数未知
                if (destPage < 1 || destPage > netRecommendMaxPage && netRecommendMaxPage > 0) {
                    new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                    return;
                }
                netRecommendCurrPage = destPage;
                recommendGoPageAction.run();
            }
            // 当前显示的是某电台的歌曲，跳页歌曲
            else {
                String text = netRecommendPageTextField.getText();
                netRecommendPageTextField.setText("");
                if ("".equals(text)) return;
                int destPage = Integer.parseInt(text);
                if (destPage < 1 || destPage > netMusicInRecommendMaxPage) {
                    new TipDialog(THIS, ILLEGAL_PAGE_MSG).showDialog();
                    return;
                }
                netMusicInRecommendCurrPage = destPage;
                recommendGoPageAction.run();
            }
        });
        // 推荐歌单事件
        playlistRecommendButton.addActionListener(e -> {
            currRecommendTab = RecommendTabIndex.PLAYLIST_RECOMMEND;
            updateTabButtonStyle();
            loadingAndRun(() -> {
                try {
                    // 显示分类标签
                    if (Tags.recPlaylistTag.isEmpty()) MusicServerUtils.initRecPlaylistTag();
                    ((DefaultComboBoxModel) netRecommendTagComboBox.getModel()).removeAllElements();
                    for (String tag : Tags.recPlaylistTag.keySet()) {
                        if (shouldShowTag(Tags.recPlaylistTag, Tags.recPlaylistMap, tag))
                            netRecommendTagComboBox.addItem(tag);
                    }

                    CommonResult<NetPlaylistInfo> result = MusicServerUtils.getRecommendPlaylists(netRecommendSourceComboBox.getSelectedIndex(),
                            netRecommendTagComboBox.getItemCount() <= 1 ? "默认" : (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage = 1);
                    List<NetPlaylistInfo> netPlaylistInfos = result.data;
                    Integer total = result.total;
                    netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 更新数量显示
                    recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                    // 解决数量标签文字显示不全问题
                    recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                    if (!recommendCountPanel.isVisible()) recommendCountPanel.setVisible(true);
                    itemRecommendList.setModel(emptyListModel);
                    playlistRecommendListModel.clear();
                    netPlaylistInfos.forEach(netPlaylistInfo -> {
                        globalExecutor.submit(() -> updateCollection(netPlaylistInfo));
                        // 设置图片加载后重绘的事件
                        netPlaylistInfo.setInvokeLater(() -> {
                            itemRecommendList.repaint();
                            collectionList.repaint();
                        });
                        playlistRecommendListModel.addElement(netPlaylistInfo);
                    });
                    itemRecommendList.setModel(playlistRecommendListModel);
                    itemRecommendScrollPane.getVerticalScrollBar().setValue(0);
                    // 删掉推荐单曲列表，加载歌单 Model
                    recommendLeftBox.remove(netMusicScrollPane);
                    if (playlistRecommendListModel.isEmpty()) {
                        recommendLeftBox.remove(itemRecommendScrollPane);
                        recommendLeftBox.add(emptyHintPanel);
                    } else {
                        recommendLeftBox.remove(emptyHintPanel);
                        recommendLeftBox.add(itemRecommendScrollPane);
                    }
                    // 不需要加载更多，删除加载更多的工具栏
                    recommendLeftBox.remove(musicRecommendToolBar);
                    netRecommendTagComboBox.setVisible(true);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 精品歌单事件
        highQualityPlaylistButton.addActionListener(e -> {
            currRecommendTab = RecommendTabIndex.HIGH_QUALITY_PLAYLIST_RECOMMEND;
            updateTabButtonStyle();
            loadingAndRun(() -> {
                try {
                    // 显示分类标签
                    if (Tags.playlistTag.isEmpty()) MusicServerUtils.initPlaylistTag();
                    ((DefaultComboBoxModel) netRecommendTagComboBox.getModel()).removeAllElements();
                    for (String tag : Tags.playlistTag.keySet()) {
                        if (shouldShowTag(Tags.playlistTag, Tags.playlistMap, tag))
                            netRecommendTagComboBox.addItem(tag);
                    }

                    CommonResult<NetPlaylistInfo> result = MusicServerUtils.getHighQualityPlaylists(netRecommendSourceComboBox.getSelectedIndex(),
                            netRecommendTagComboBox.getItemCount() <= 1 ? "默认" : (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage = 1);
                    List<NetPlaylistInfo> netPlaylistInfos = result.data;
                    Integer total = result.total;
                    netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 更新数量显示
                    recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                    // 解决数量标签文字显示不全问题
                    recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                    itemRecommendList.setModel(emptyListModel);
                    playlistRecommendListModel.clear();
                    netPlaylistInfos.forEach(netPlaylistInfo -> {
                        globalExecutor.submit(() -> updateCollection(netPlaylistInfo));
                        // 设置图片加载后重绘的事件
                        netPlaylistInfo.setInvokeLater(() -> {
                            itemRecommendList.repaint();
                            collectionList.repaint();
                        });
                        playlistRecommendListModel.addElement(netPlaylistInfo);
                    });
                    itemRecommendList.setModel(playlistRecommendListModel);
                    itemRecommendScrollPane.getVerticalScrollBar().setValue(0);
                    // 删掉推荐单曲列表，加载歌单 Model
                    recommendLeftBox.remove(netMusicScrollPane);
                    if (playlistRecommendListModel.isEmpty()) {
                        recommendLeftBox.remove(itemRecommendScrollPane);
                        recommendLeftBox.add(emptyHintPanel);
                    } else {
                        recommendLeftBox.remove(emptyHintPanel);
                        recommendLeftBox.add(itemRecommendScrollPane);
                    }
                    // 不需要加载更多，删除加载更多的工具栏
                    recommendLeftBox.remove(musicRecommendToolBar);
                    netRecommendTagComboBox.setVisible(true);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 飙升歌曲事件
        hotMusicButton.addActionListener(e -> {
            currRecommendTab = RecommendTabIndex.HOT_MUSIC_RECOMMEND;
            updateTabButtonStyle();
            loadingAndRun(() -> {
                try {
                    // 显示分类标签
                    if (Tags.hotSongTag.isEmpty()) MusicServerUtils.initHotSongTag();
                    ((DefaultComboBoxModel) netRecommendTagComboBox.getModel()).removeAllElements();
                    for (String tag : Tags.hotSongTag.keySet()) {
                        if (shouldShowTag(Tags.hotSongTag, Tags.hotSongMap, tag))
                            netRecommendTagComboBox.addItem(tag);
                    }

                    CommonResult<NetMusicInfo> result = MusicServerUtils.getHotMusicRecommend(netRecommendSourceComboBox.getSelectedIndex(),
                            netRecommendTagComboBox.getItemCount() <= 1 ? "默认" : (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage = 1);
                    List<NetMusicInfo> netMusicInfos = result.data;
                    int total = result.total;
                    netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 更新数量显示
                    recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                    // 解决数量标签文字显示不全问题
                    recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                    netMusicList.setModel(emptyListModel);
                    netMusicRecommendListModel.clear();
                    netMusicInfos.forEach(netMusicInfo -> netMusicRecommendListModel.addElement(netMusicInfo));
                    netMusicList.setModel(netMusicRecommendListModel);
                    netMusicScrollPane.getVerticalScrollBar().setValue(0);
                    // 删掉歌单列表/专辑列表
                    recommendLeftBox.remove(itemRecommendScrollPane);
                    if (netMusicRecommendListModel.isEmpty()) {
                        recommendLeftBox.remove(netMusicScrollPane);
                        recommendLeftBox.add(emptyHintPanel);
                    } else {
                        recommendLeftBox.remove(emptyHintPanel);
                        recommendLeftBox.add(netMusicScrollPane);
                    }
                    // 不需要加载更多，删除加载更多的工具栏
                    recommendLeftBox.remove(musicRecommendToolBar);
                    netRecommendTagComboBox.setVisible(true);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 推荐新单曲事件
        netMusicRecommendButton.addActionListener(e -> {
            currRecommendTab = RecommendTabIndex.NEW_MUSIC_RECOMMEND;
            updateTabButtonStyle();
            loadingAndRun(() -> {
                try {
                    // 显示分类标签
                    if (Tags.newSongTag.isEmpty()) MusicServerUtils.initNewSongTag();
                    ((DefaultComboBoxModel) netRecommendTagComboBox.getModel()).removeAllElements();
                    for (String tag : Tags.newSongTag.keySet()) {
                        if (shouldShowTag(Tags.newSongTag, Tags.newSongMap, tag))
                            netRecommendTagComboBox.addItem(tag);
                    }

                    CommonResult<NetMusicInfo> result = MusicServerUtils.getNewMusic(netRecommendSourceComboBox.getSelectedIndex(),
                            netRecommendTagComboBox.getItemCount() <= 1 ? "默认" : (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage = 1);
                    List<NetMusicInfo> netMusicInfos = result.data;
                    int total = result.total;
                    netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 更新数量显示
                    recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                    // 解决数量标签文字显示不全问题
                    recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                    netMusicList.setModel(emptyListModel);
                    netMusicRecommendListModel.clear();
                    netMusicInfos.forEach(netMusicInfo -> netMusicRecommendListModel.addElement(netMusicInfo));
                    netMusicList.setModel(netMusicRecommendListModel);
                    netMusicScrollPane.getVerticalScrollBar().setValue(0);
                    // 删掉歌单列表/专辑列表
                    recommendLeftBox.remove(itemRecommendScrollPane);
                    if (netMusicRecommendListModel.isEmpty()) {
                        recommendLeftBox.remove(netMusicScrollPane);
                        recommendLeftBox.add(emptyHintPanel);
                    } else {
                        recommendLeftBox.remove(emptyHintPanel);
                        recommendLeftBox.add(netMusicScrollPane);
                    }
                    // 不需要加载更多，删除加载更多的工具栏
                    recommendLeftBox.remove(musicRecommendToolBar);
                    netRecommendTagComboBox.setVisible(true);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 新碟上架事件
        newAlbumRecommendButton.addActionListener(e -> {
            currRecommendTab = RecommendTabIndex.NEW_ALBUM_RECOMMEND;
            updateTabButtonStyle();
            loadingAndRun(() -> {
                try {
                    // 显示分类标签
                    if (Tags.newAlbumTag.isEmpty()) MusicServerUtils.initNewAlbumTag();
                    ((DefaultComboBoxModel) netRecommendTagComboBox.getModel()).removeAllElements();
                    for (String tag : Tags.newAlbumTag.keySet()) {
                        if (shouldShowTag(Tags.newAlbumTag, Tags.newAlbumMap, tag))
                            netRecommendTagComboBox.addItem(tag);
                    }

                    CommonResult<NetAlbumInfo> result = MusicServerUtils.getNewAlbums(netRecommendSourceComboBox.getSelectedIndex(),
                            netRecommendTagComboBox.getItemCount() <= 1 ? "默认" : (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage = 1);
                    List<NetAlbumInfo> netAlbumInfos = result.data;
                    int total = result.total;
                    netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 更新数量显示
                    recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                    // 解决数量标签文字显示不全问题
                    recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                    itemRecommendList.setModel(emptyListModel);
                    albumRecommendListModel.clear();
                    netAlbumInfos.forEach(netAlbumInfo -> {
                        globalExecutor.submit(() -> updateCollection(netAlbumInfo));
                        // 设置图片加载后重绘的事件
                        netAlbumInfo.setInvokeLater(() -> {
                            updateRenderer(itemRecommendList);
                            updateRenderer(collectionList);
                            itemRecommendList.repaint();
                            collectionList.repaint();
                        });
                        albumRecommendListModel.addElement(netAlbumInfo);
                    });
                    itemRecommendList.setModel(albumRecommendListModel);
                    itemRecommendScrollPane.getVerticalScrollBar().setValue(0);
                    // 删掉推荐单曲列表
                    recommendLeftBox.remove(netMusicScrollPane);
                    if (albumRecommendListModel.isEmpty()) {
                        recommendLeftBox.remove(itemRecommendScrollPane);
                        recommendLeftBox.add(emptyHintPanel);
                    } else {
                        recommendLeftBox.remove(emptyHintPanel);
                        recommendLeftBox.add(itemRecommendScrollPane);
                    }
                    recommendBackwardButton.setEnabled(false);
                    netRecommendTagComboBox.setVisible(true);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 歌手排行事件
        artistListRecommendButton.addActionListener(e -> {
            currRecommendTab = RecommendTabIndex.ARTIST_LIST_RECOMMEND;
            updateTabButtonStyle();
            loadingAndRun(() -> {
                try {
                    // 显示分类标签
                    if (Tags.artistTag.isEmpty()) MusicServerUtils.initArtistTag();
                    ((DefaultComboBoxModel) netRecommendTagComboBox.getModel()).removeAllElements();
                    for (String tag : Tags.artistTag.keySet()) {
                        if (shouldShowTag(Tags.artistTag, Tags.artistMap, tag))
                            netRecommendTagComboBox.addItem(tag);
                    }

                    CommonResult<NetArtistInfo> result = MusicServerUtils.getArtistLists(netRecommendSourceComboBox.getSelectedIndex(),
                            netRecommendTagComboBox.getItemCount() <= 1 ? "默认" : (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage = 1);
                    List<NetArtistInfo> netArtistInfos = result.data;
                    int total = result.total;
                    netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 更新数量显示
                    recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                    // 解决数量标签文字显示不全问题
                    recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                    itemRecommendList.setModel(emptyListModel);
                    artistRecommendListModel.clear();
                    netArtistInfos.forEach(netArtistInfo -> {
                        globalExecutor.submit(() -> updateCollection(netArtistInfo));
                        // 设置图片加载后重绘的事件
                        netArtistInfo.setInvokeLater(() -> {
                            itemRecommendList.repaint();
                            collectionList.repaint();
                        });
                        artistRecommendListModel.addElement(netArtistInfo);
                    });
                    itemRecommendList.setModel(artistRecommendListModel);
                    itemRecommendScrollPane.getVerticalScrollBar().setValue(0);
                    // 删掉推荐单曲列表
                    recommendLeftBox.remove(netMusicScrollPane);
                    if (artistRecommendListModel.isEmpty()) {
                        recommendLeftBox.remove(itemRecommendScrollPane);
                        recommendLeftBox.add(emptyHintPanel);
                    } else {
                        recommendLeftBox.remove(emptyHintPanel);
                        recommendLeftBox.add(itemRecommendScrollPane);
                    }
                    // 不需要加载更多，删除加载更多的工具栏
                    recommendLeftBox.remove(musicRecommendToolBar);
                    netRecommendTagComboBox.setVisible(true);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 新晋电台事件
        newRadioRecommendButton.addActionListener(e -> {
            currRecommendTab = RecommendTabIndex.NEW_RADIO_RECOMMEND;
            updateTabButtonStyle();
            loadingAndRun(() -> {
                try {
                    CommonResult<NetRadioInfo> result = MusicServerUtils.getNewRadios(netRecommendSourceComboBox.getSelectedIndex(), limit, netRecommendCurrPage = 1);
                    List<NetRadioInfo> netRadioInfos = result.data;
                    int total = result.total;
                    netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 更新数量显示
                    recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                    // 解决数量标签文字显示不全问题
                    recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                    itemRecommendList.setModel(emptyListModel);
                    radioRecommendListModel.clear();
                    netRadioInfos.forEach(netRadioInfo -> {
                        globalExecutor.submit(() -> updateCollection(netRadioInfo));
                        // 设置图片加载后重绘的事件
                        netRadioInfo.setInvokeLater(() -> {
                            itemRecommendList.repaint();
                            collectionList.repaint();
                        });
                        radioRecommendListModel.addElement(netRadioInfo);
                    });
                    itemRecommendList.setModel(radioRecommendListModel);
                    itemRecommendScrollPane.getVerticalScrollBar().setValue(0);
                    // 删掉推荐单曲列表
                    recommendLeftBox.remove(netMusicScrollPane);
                    if (radioRecommendListModel.isEmpty()) {
                        recommendLeftBox.remove(itemRecommendScrollPane);
                        recommendLeftBox.add(emptyHintPanel);
                    } else {
                        recommendLeftBox.remove(emptyHintPanel);
                        recommendLeftBox.add(itemRecommendScrollPane);
                    }
                    recommendBackwardButton.setEnabled(false);
                    netRecommendTagComboBox.setVisible(false);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 热门电台事件
        hotRadioRecommendButton.addActionListener(e -> {
            currRecommendTab = RecommendTabIndex.HOT_RADIO_RECOMMEND;
            updateTabButtonStyle();
            loadingAndRun(() -> {
                try {
                    // 显示分类标签
                    if (Tags.radioTag.isEmpty()) MusicServerUtils.initRadioTag();
                    ((DefaultComboBoxModel) netRecommendTagComboBox.getModel()).removeAllElements();
                    for (String tag : Tags.radioTag.keySet()) {
                        if (shouldShowTag(Tags.radioTag, Tags.radioMap, tag))
                            netRecommendTagComboBox.addItem(tag);
                    }

                    CommonResult<NetRadioInfo> result = MusicServerUtils.getHotRadios(netRecommendSourceComboBox.getSelectedIndex(),
                            netRecommendTagComboBox.getItemCount() <= 1 ? "默认" : (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage = 1);
                    List<NetRadioInfo> netRadioInfos = result.data;
                    int total = result.total;
                    netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 更新数量显示
                    recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                    // 解决数量标签文字显示不全问题
                    recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                    itemRecommendList.setModel(emptyListModel);
                    radioRecommendListModel.clear();
                    netRadioInfos.forEach(netRadioInfo -> {
                        globalExecutor.submit(() -> updateCollection(netRadioInfo));
                        // 设置图片加载后重绘的事件
                        netRadioInfo.setInvokeLater(() -> {
                            updateRenderer(itemRecommendList);
                            updateRenderer(collectionList);
                            itemRecommendList.repaint();
                            collectionList.repaint();
                        });
                        radioRecommendListModel.addElement(netRadioInfo);
                    });
                    itemRecommendList.setModel(radioRecommendListModel);
                    itemRecommendScrollPane.getVerticalScrollBar().setValue(0);
                    // 删掉推荐单曲列表
                    recommendLeftBox.remove(netMusicScrollPane);
                    if (radioRecommendListModel.isEmpty()) {
                        recommendLeftBox.remove(itemRecommendScrollPane);
                        recommendLeftBox.add(emptyHintPanel);
                    } else {
                        recommendLeftBox.remove(emptyHintPanel);
                        recommendLeftBox.add(itemRecommendScrollPane);
                    }
                    recommendBackwardButton.setEnabled(false);
                    netRecommendTagComboBox.setVisible(true);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 推荐节目事件
        programRecommendButton.addActionListener(e -> {
            currRecommendTab = RecommendTabIndex.PROGRAM_RECOMMEND;
            updateTabButtonStyle();
            loadingAndRun(() -> {
                try {
                    // 显示分类标签
                    if (Tags.programTag.isEmpty()) MusicServerUtils.initProgramTag();
                    ((DefaultComboBoxModel) netRecommendTagComboBox.getModel()).removeAllElements();
                    for (String tag : Tags.programTag.keySet()) {
                        if (shouldShowTag(Tags.programTag, Tags.programMap, tag))
                            netRecommendTagComboBox.addItem(tag);
                    }

                    CommonResult<NetMusicInfo> result = MusicServerUtils.getRecommendPrograms(netRecommendSourceComboBox.getSelectedIndex(),
                            netRecommendTagComboBox.getItemCount() <= 1 ? "默认" : (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage = 1);
                    List<NetMusicInfo> netMusicInfos = result.data;
                    int total = result.total;
                    netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 更新数量显示
                    recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                    // 解决数量标签文字显示不全问题
                    recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                    netMusicList.setModel(emptyListModel);
                    netMusicRecommendListModel.clear();
                    netMusicInfos.forEach(netMusicInfo -> netMusicRecommendListModel.addElement(netMusicInfo));
                    netMusicList.setModel(netMusicRecommendListModel);
                    netMusicScrollPane.getVerticalScrollBar().setValue(0);
                    // 删掉歌单列表/专辑列表
                    recommendLeftBox.remove(itemRecommendScrollPane);
                    if (netMusicRecommendListModel.isEmpty()) {
                        recommendLeftBox.remove(netMusicScrollPane);
                        recommendLeftBox.add(emptyHintPanel);
                    } else {
                        recommendLeftBox.remove(emptyHintPanel);
                        recommendLeftBox.add(netMusicScrollPane);
                    }
                    // 不需要加载更多，删除加载更多的工具栏
                    recommendLeftBox.remove(musicRecommendToolBar);
                    netRecommendTagComboBox.setVisible(true);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    jsonException.printStackTrace();
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        // 推荐 MV 事件
        mvRecommendButton.addActionListener(e -> {
            currRecommendTab = RecommendTabIndex.MV_RECOMMEND;
            updateTabButtonStyle();
            loadingAndRun(() -> {
                try {
                    // 显示分类标签
                    if (Tags.mvTag.isEmpty()) MusicServerUtils.initMvTag();
                    ((DefaultComboBoxModel) netRecommendTagComboBox.getModel()).removeAllElements();
                    for (String tag : Tags.mvTag.keySet()) {
                        if (shouldShowTag(Tags.mvTag, Tags.mvMap, tag))
                            netRecommendTagComboBox.addItem(tag);
                    }

                    CommonResult<NetMvInfo> result = MusicServerUtils.getRecommendMvs(
                            netRecommendSourceComboBox.getSelectedIndex(), netRecommendTagComboBox.getItemCount() <= 1 ? "默认" : (String) netRecommendTagComboBox.getSelectedItem(), limit, netRecommendCurrPage = 1);
                    List<NetMvInfo> netMvInfos = result.data;
                    int total = result.total;
                    netRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                    // 更新数量显示
                    recommendCountLabel.setText(String.format(PAGINATION_MSG, netRecommendCurrPage, netRecommendMaxPage));
                    // 解决数量标签文字显示不全问题
                    recommendCountPanel.add(recommendCountLabel, recommendCountPanel.getComponentIndex(recommendCountLabel));
                    itemRecommendList.setModel(emptyListModel);
                    mvRecommendListModel.clear();
                    netMvInfos.forEach(netMvInfo -> {
                        globalExecutor.submit(() -> updateCollection(netMvInfo));
                        // 设置图片加载后重绘的事件
                        netMvInfo.setInvokeLater(() -> {
                            updateRenderer(itemRecommendList);
                            updateRenderer(collectionList);
                            itemRecommendList.repaint();
                            collectionList.repaint();
                        });
                        mvRecommendListModel.addElement(netMvInfo);
                    });
                    itemRecommendList.setModel(mvRecommendListModel);
                    itemRecommendScrollPane.getVerticalScrollBar().setValue(0);
                    // 删掉推荐单曲列表
                    recommendLeftBox.remove(netMusicScrollPane);
                    if (mvRecommendListModel.isEmpty()) {
                        recommendLeftBox.remove(itemRecommendScrollPane);
                        recommendLeftBox.add(emptyHintPanel);
                    } else {
                        recommendLeftBox.remove(emptyHintPanel);
                        recommendLeftBox.add(itemRecommendScrollPane);
                    }
                    recommendBackwardButton.setEnabled(false);
                    netRecommendTagComboBox.setVisible(true);
                } catch (IORuntimeException ioRuntimeException) {
                    // 无网络连接
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } catch (HttpException httpException) {
                    // 请求超时
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } catch (JSONException jsonException) {
                    // 接口异常
                    new TipDialog(THIS, API_ERROR_MSG).showDialog();
                }
            });
        });
        recommendBackwardButton.setEnabled(false);
        // 按钮不可见
        netRecommendTagComboBox.setVisible(false);
        netRecommendPlayAllButton.setVisible(false);
        // 控制按钮大小
        Dimension dimension = new Dimension(20, 20);
        netRecommendRefreshButton.setPreferredSize(dimension);
        netRecommendStartPageButton.setPreferredSize(dimension);
        netRecommendLastPageButton.setPreferredSize(dimension);
        netRecommendGoButton.setPreferredSize(dimension);
        netRecommendNextPageButton.setPreferredSize(dimension);
        netRecommendEndPageButton.setPreferredSize(dimension);
        // 按钮悬浮与点击效果
        playlistRecommendButton.addMouseListener(new ButtonMouseListener(playlistRecommendButton, THIS));
        highQualityPlaylistButton.addMouseListener(new ButtonMouseListener(highQualityPlaylistButton, THIS));
        hotMusicButton.addMouseListener(new ButtonMouseListener(hotMusicButton, THIS));
        netMusicRecommendButton.addMouseListener(new ButtonMouseListener(netMusicRecommendButton, THIS));
        newAlbumRecommendButton.addMouseListener(new ButtonMouseListener(newAlbumRecommendButton, THIS));
        artistListRecommendButton.addMouseListener(new ButtonMouseListener(artistListRecommendButton, THIS));
        newRadioRecommendButton.addMouseListener(new ButtonMouseListener(newRadioRecommendButton, THIS));
        hotRadioRecommendButton.addMouseListener(new ButtonMouseListener(hotRadioRecommendButton, THIS));
        programRecommendButton.addMouseListener(new ButtonMouseListener(programRecommendButton, THIS));
        mvRecommendButton.addMouseListener(new ButtonMouseListener(mvRecommendButton, THIS));
        recommendBackwardButton.addMouseListener(new ButtonMouseListener(recommendBackwardButton, THIS));
        netRecommendPlayAllButton.addMouseListener(new ButtonMouseListener(netRecommendPlayAllButton, THIS));
        netRecommendRefreshButton.addMouseListener(new ButtonMouseListener(netRecommendRefreshButton, THIS));
        netRecommendStartPageButton.addMouseListener(new ButtonMouseListener(netRecommendStartPageButton, THIS));
        netRecommendLastPageButton.addMouseListener(new ButtonMouseListener(netRecommendLastPageButton, THIS));
        netRecommendGoButton.addMouseListener(new ButtonMouseListener(netRecommendGoButton, THIS));
        netRecommendNextPageButton.addMouseListener(new ButtonMouseListener(netRecommendNextPageButton, THIS));
        netRecommendEndPageButton.addMouseListener(new ButtonMouseListener(netRecommendEndPageButton, THIS));
        // 提示语
        recommendBackwardButton.setToolTipText(BACKWARD_TIP);
        netRecommendPlayAllButton.setToolTipText(PLAY_ALL_TIP);
        netRecommendRefreshButton.setToolTipText(REFRESH_TIP);
        netRecommendStartPageButton.setToolTipText(START_PAGE_TIP);
        netRecommendLastPageButton.setToolTipText(LAST_PAGE_TIP);
        netRecommendGoButton.setToolTipText(GO_TIP);
        netRecommendNextPageButton.setToolTipText(NEXT_PAGE_TIP);
        netRecommendEndPageButton.setToolTipText(END_PAGE_TIP);
        // 按钮文字
        playlistRecommendButton.setText(RECOMMEND_PLAYLIST_TIP);
        highQualityPlaylistButton.setText(HIGH_QUALITY_PLAYLIST_TIP);
        hotMusicButton.setText(HOT_MUSIC_TIP);
        netMusicRecommendButton.setText(RECOMMEND_NET_MUSIC_TIP);
        newAlbumRecommendButton.setText(RECOMMEND_NEW_ALBUM_TIP);
        artistListRecommendButton.setText(RECOMMEND_ARTIST_LIST_TIP);
        newRadioRecommendButton.setText(RECOMMEND_NEW_RADIO_TIP);
        hotRadioRecommendButton.setText(RECOMMEND_HOT_RADIO_TIP);
        programRecommendButton.setText(RECOMMEND_PROGRAM_TIP);
        mvRecommendButton.setText(RECOMMEND_MV_TIP);
        // 按钮文字与图标的位置
        int gap = 15;
        playlistRecommendButton.setHorizontalTextPosition(SwingConstants.RIGHT);
        playlistRecommendButton.setIconTextGap(gap);
        highQualityPlaylistButton.setHorizontalTextPosition(SwingConstants.RIGHT);
        highQualityPlaylistButton.setIconTextGap(gap);
        hotMusicButton.setHorizontalTextPosition(SwingConstants.RIGHT);
        hotMusicButton.setIconTextGap(gap);
        netMusicRecommendButton.setHorizontalTextPosition(SwingConstants.RIGHT);
        netMusicRecommendButton.setIconTextGap(gap);
        newAlbumRecommendButton.setHorizontalTextPosition(SwingConstants.RIGHT);
        newAlbumRecommendButton.setIconTextGap(gap);
        artistListRecommendButton.setHorizontalTextPosition(SwingConstants.RIGHT);
        artistListRecommendButton.setIconTextGap(gap);
        newRadioRecommendButton.setHorizontalTextPosition(SwingConstants.RIGHT);
        newRadioRecommendButton.setIconTextGap(gap);
        hotRadioRecommendButton.setHorizontalTextPosition(SwingConstants.RIGHT);
        hotRadioRecommendButton.setIconTextGap(gap);
        programRecommendButton.setHorizontalTextPosition(SwingConstants.RIGHT);
        programRecommendButton.setIconTextGap(gap);
        mvRecommendButton.setHorizontalTextPosition(SwingConstants.RIGHT);
        mvRecommendButton.setIconTextGap(gap);

        // 推荐工具栏网格布局
        recommendToolBar.setLayout(new GridLayout(2, 5));
        recommendToolBar.add(playlistRecommendButton);
        recommendToolBar.add(highQualityPlaylistButton);
        recommendToolBar.add(hotMusicButton);
        recommendToolBar.add(netMusicRecommendButton);
        recommendToolBar.add(newAlbumRecommendButton);
        recommendToolBar.add(artistListRecommendButton);
        recommendToolBar.add(newRadioRecommendButton);
        recommendToolBar.add(hotRadioRecommendButton);
        recommendToolBar.add(programRecommendButton);
        recommendToolBar.add(mvRecommendButton);
        recommendLeftBox.add(recommendToolBar);

        // 推荐歌单/专辑中歌曲的工具栏，暂时不放入
        musicRecommendToolBar.add(recommendBackwardButton);
        musicRecommendToolBar.add(Box.createHorizontalGlue());

        for (String name : NetMusicSource.names) netRecommendSourceComboBox.addItem(name);
        netRecommendSourceComboBox.addItemListener(e -> {
            // 避免事件被处理 2 次！
            if (e.getStateChange() != ItemEvent.SELECTED) return;

            // 加载对应源的标签
            ((DefaultComboBoxModel) netRecommendTagComboBox.getModel()).removeAllElements();
            if (currRecommendTab == RecommendTabIndex.PLAYLIST_RECOMMEND) {
                for (String tag : Tags.recPlaylistTag.keySet()) {
                    if (shouldShowTag(Tags.recPlaylistTag, Tags.recPlaylistMap, tag))
                        netRecommendTagComboBox.addItem(tag);
                }
            } else if (currRecommendTab == RecommendTabIndex.HIGH_QUALITY_PLAYLIST_RECOMMEND) {
                for (String tag : Tags.playlistTag.keySet()) {
                    if (shouldShowTag(Tags.playlistTag, Tags.playlistMap, tag))
                        netRecommendTagComboBox.addItem(tag);
                }
            } else if (currRecommendTab == RecommendTabIndex.HOT_MUSIC_RECOMMEND) {
                for (String tag : Tags.hotSongTag.keySet()) {
                    if (shouldShowTag(Tags.hotSongTag, Tags.hotSongMap, tag))
                        netRecommendTagComboBox.addItem(tag);
                }
            } else if (currRecommendTab == RecommendTabIndex.NEW_MUSIC_RECOMMEND) {
                for (String tag : Tags.newSongTag.keySet()) {
                    if (shouldShowTag(Tags.newSongTag, Tags.newSongMap, tag))
                        netRecommendTagComboBox.addItem(tag);
                }
            } else if (currRecommendTab == RecommendTabIndex.NEW_ALBUM_RECOMMEND) {
                for (String tag : Tags.newAlbumTag.keySet()) {
                    if (shouldShowTag(Tags.newAlbumTag, Tags.newAlbumMap, tag))
                        netRecommendTagComboBox.addItem(tag);
                }
            } else if (currRecommendTab == RecommendTabIndex.ARTIST_LIST_RECOMMEND) {
                for (String tag : Tags.artistTag.keySet()) {
                    if (shouldShowTag(Tags.artistTag, Tags.artistMap, tag))
                        netRecommendTagComboBox.addItem(tag);
                }
            } else if (currRecommendTab == RecommendTabIndex.HOT_RADIO_RECOMMEND) {
                for (String tag : Tags.radioTag.keySet()) {
                    if (shouldShowTag(Tags.radioTag, Tags.radioMap, tag))
                        netRecommendTagComboBox.addItem(tag);
                }
            } else if (currRecommendTab == RecommendTabIndex.PROGRAM_RECOMMEND) {
                for (String tag : Tags.programTag.keySet()) {
                    if (shouldShowTag(Tags.programTag, Tags.programMap, tag))
                        netRecommendTagComboBox.addItem(tag);
                }
            } else if (currRecommendTab == RecommendTabIndex.MV_RECOMMEND) {
                for (String tag : Tags.mvTag.keySet()) {
                    if (shouldShowTag(Tags.mvTag, Tags.mvMap, tag))
                        netRecommendTagComboBox.addItem(tag);
                }
            }

            netRecommendCurrPage = 1;
            netRecommendRefreshButton.doClick();
        });

        // 数量标签
        recommendCountPanel.add(netRecommendSourceComboBox);
        recommendCountPanel.add(netRecommendTagComboBox);
        recommendCountPanel.add(netRecommendPlayAllButton);
        recommendCountPanel.add(netRecommendStartPageButton);
        recommendCountPanel.add(netRecommendLastPageButton);
        recommendCountPanel.add(recommendCountLabel);
        recommendCountPanel.add(netRecommendNextPageButton);
        recommendCountPanel.add(netRecommendEndPageButton);
        recommendCountPanel.add(netRecommendRefreshButton);
        recommendCountPanel.add(netRecommendPageTextField);
        recommendCountPanel.add(netRecommendGoButton);
        recommendCountPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        recommendCountPanel.setVisible(false);
        recommendLeftBox.add(recommendCountPanel);
    }

    // 初始化推荐歌单/专辑/歌手/电台列表
    private void itemRecommendListInit() {
        itemRecommendList.setModel(playlistRecommendListModel);
        itemRecommendList.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int index = itemRecommendList.locationToIndex(e.getPoint());
                Rectangle bounds = itemRecommendList.getCellBounds(index, index);
                if (bounds == null) return;
                setHoverIndex(bounds.contains(e.getPoint()) ? index : -1);
            }

            private void setHoverIndex(int index) {
                TranslucentItemRecommendListRenderer renderer = (TranslucentItemRecommendListRenderer) itemRecommendList.getCellRenderer();
                if (renderer == null) return;
                int hoverIndex = renderer.getHoverIndex();
                if (hoverIndex == index) return;
                renderer.setHoverIndex(index);
                itemRecommendList.repaint();
            }
        });
        itemRecommendList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                TranslucentItemRecommendListRenderer renderer = (TranslucentItemRecommendListRenderer) itemRecommendList.getCellRenderer();
                if (renderer == null) return;
                renderer.setHoverIndex(-1);
                itemRecommendList.repaint();
            }
        });
        openRecommendItemAction = () -> {
            Object o = itemRecommendList.getSelectedValue();
            // 打开的是 MV
            if (o instanceof NetMvInfo) {
                playMv(MvType.MV_RECOMMEND_LIST);
                return;
            }
            loadingAndRun(() -> {
                List<Future<?>> taskList = new LinkedList<>();
                // 打开的是歌单
                if (o instanceof NetPlaylistInfo) {
                    NetPlaylistInfo playlistInfo = (NetPlaylistInfo) o;
                    // 加载封面图片和描述
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        BufferedImage coverImg = ImageUtils.borderShadow(ImageUtils.dye(loadingImage, currUIStyle.getLabelColor()));
                        recommendItemCoverAndNameLabel.setIcon(new ImageIcon(coverImg));
                        recommendItemCoverAndNameLabel.setText(LOADING_MSG);
                        recommendItemTagLabel.setText(LOADING_MSG);
                        recommendItemTagLabel.setVisible(true);
                        recommendItemDescriptionLabel.setText(LOADING_MSG);
                        GlobalExecutors.imageExecutor.execute(() -> {
                            try {
                                MusicServerUtils.fillPlaylistInfo(playlistInfo);
                                recommendItemCoverAndNameLabel.setText(StringUtils.textToHtml(playlistInfo.getName()));
                                if (playlistInfo.getTag() != null)
                                    recommendItemTagLabel.setText(StringUtils.textToHtml("".equals(playlistInfo.getTag()) ? "" : "标签：" + playlistInfo.getTag()));
                                if (playlistInfo.getDescription() != null)
                                    recommendItemDescriptionLabel.setText(StringUtils.textToHtml(playlistInfo.getDescription()));
                                if (playlistInfo.hasCoverImg()) {
                                    recommendItemCoverAndNameLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(playlistInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                } else {
                                    playlistInfo.setInvokeLater(() -> {
                                        recommendItemCoverAndNameLabel.setIcon(new ImageIcon(
                                                ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(playlistInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                        ));
                                        itemRecommendList.repaint();
                                    });
                                }
                            } catch (HttpException e) {
                                recommendItemCoverAndNameLabel.setText(LOAD_FAILED);
                                recommendItemTagLabel.setText(LOAD_FAILED);
                                recommendItemDescriptionLabel.setText(LOAD_FAILED);
                            }
                        });
                    }));

                    // 得到歌单的音乐信息
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        try {
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInPlaylist(
                                    playlistInfo.getId(), playlistInfo.getSource(), limit, netMusicInRecommendCurrPage = 1);
                            List<NetMusicInfo> musicInfos = result.data;
                            int total = result.total;
                            netMusicInRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            // 更新歌单歌曲数量显示
//                                currItemRecommendLabel.setText(StringUtils.textToHtml(playlistInfo.getName()));
                            recommendCountLabel.setText(String.format(PAGINATION_MSG, netMusicInRecommendCurrPage, netMusicInRecommendMaxPage));
                            recommendItemListCountBox.add(recommendCountPanel);
                            recommendItemListBox.add(recommendItemListCountBox);
                            // 歌单列表切换到在线音乐列表
                            netMusicList.setModel(netMusicListForPlaylistRecommendModel);
                            recommendLeftBox.remove(itemRecommendScrollPane);
                            recommendLeftBox.add(recommendItemListBox);
                            // 推荐工具栏添加，需要更新 LAF
                            recommendLeftBox.add(musicRecommendToolBar, 0);
                            SwingUtilities.updateComponentTreeUI(musicRecommendToolBar);
                            // 添加数据建议弄到更新数量显示之后，不然可能会不显示！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForPlaylistRecommendModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForPlaylistRecommendModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForPlaylistRecommendModel);
                            recommendItemDescriptionScrollPane.getVerticalScrollBar().setValue(0);
                            netMusicScrollPane.getVerticalScrollBar().setValue(0);
                            recommendLeftBox.remove(recommendToolBar);
                            recommendBackwardButton.setEnabled(true);
                            netRecommendSourceComboBox.setVisible(false);
                            netRecommendPlayAllButton.setVisible(true);
                            netRecommendTagComboBox.setVisible(false);
                            if (netMusicListForPlaylistRecommendModel.isEmpty()) {
                                recommendItemListCountBox.remove(netMusicScrollPane);
                                recommendItemListCountBox.add(emptyHintPanel);
                            } else {
                                recommendItemListCountBox.remove(emptyHintPanel);
                                recommendItemListCountBox.add(netMusicScrollPane);
                            }
                            // 切换后一定要刷新！
                            recommendLeftBox.repaint();
                        } catch (IORuntimeException runtimeException) {
                            // 无网络连接
                            new TipDialog(THIS, NO_NET_MSG).showDialog();
                        } catch (HttpException httpException) {
                            // 请求超时
                            new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                        } catch (JSONException jsonException) {
                            // 接口问题
                            new TipDialog(THIS, API_ERROR_MSG).showDialog();
                        }
                    }));
                }
                // 打开的是专辑
                else if (o instanceof NetAlbumInfo) {
                    NetAlbumInfo albumInfo = (NetAlbumInfo) o;
                    // 加载封面图片和描述
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        BufferedImage coverImg = ImageUtils.borderShadow(ImageUtils.dye(loadingImage, currUIStyle.getLabelColor()));
                        recommendItemCoverAndNameLabel.setIcon(new ImageIcon(coverImg));
                        recommendItemCoverAndNameLabel.setText(LOADING_MSG);
                        recommendItemTagLabel.setText("");
                        recommendItemTagLabel.setVisible(false);
                        recommendItemDescriptionLabel.setText(LOADING_MSG);
                        GlobalExecutors.imageExecutor.execute(() -> {
                            try {
                                MusicServerUtils.fillAlbumInfo(albumInfo);
                                recommendItemCoverAndNameLabel.setText(StringUtils.textToHtml(albumInfo.getName()));
                                if (albumInfo.getDescription() != null)
                                    recommendItemDescriptionLabel.setText(StringUtils.textToHtml(albumInfo.getDescription()));
                                if (albumInfo.hasCoverImg()) {
                                    recommendItemCoverAndNameLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(albumInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                } else {
                                    albumInfo.setInvokeLater(() -> {
                                        recommendItemCoverAndNameLabel.setIcon(new ImageIcon(
                                                ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(albumInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                        ));
                                        itemRecommendList.repaint();
                                    });
                                }
                            } catch (HttpException e) {
                                recommendItemCoverAndNameLabel.setText(LOAD_FAILED);
                                recommendItemDescriptionLabel.setText(LOAD_FAILED);
                            }
                        });
                    }));

                    // 得到专辑的音乐信息
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        try {
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInAlbum(
                                    albumInfo.getId(), albumInfo.getSource(), limit, netMusicInRecommendCurrPage = 1);
                            List<NetMusicInfo> musicInfos = result.data;
                            int total = result.total;
                            netMusicInRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            // 更新专辑歌曲数量显示
//                                currItemRecommendLabel.setText(StringUtils.textToHtml(albumInfo.getName()));
                            recommendCountLabel.setText(String.format(PAGINATION_MSG, netMusicInRecommendCurrPage, netMusicInRecommendMaxPage));
                            recommendItemListCountBox.add(recommendCountPanel);
                            recommendItemListBox.add(recommendItemListCountBox);
                            // 专辑列表切换到在线音乐列表
                            netMusicList.setModel(netMusicListForAlbumRecommendModel);
                            recommendLeftBox.remove(itemRecommendScrollPane);
                            recommendLeftBox.add(recommendItemListBox);
                            // 推荐工具栏添加，需要更新 LAF
                            recommendLeftBox.add(musicRecommendToolBar, 0);
                            SwingUtilities.updateComponentTreeUI(musicRecommendToolBar);
                            // 添加数据建议弄到更新数量显示之后，不然可能会不显示！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForAlbumRecommendModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForAlbumRecommendModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForAlbumRecommendModel);
                            recommendItemDescriptionScrollPane.getVerticalScrollBar().setValue(0);
                            netMusicScrollPane.getVerticalScrollBar().setValue(0);
                            recommendLeftBox.remove(recommendToolBar);
                            recommendBackwardButton.setEnabled(true);
                            netRecommendSourceComboBox.setVisible(false);
                            netRecommendPlayAllButton.setVisible(true);
                            netRecommendTagComboBox.setVisible(false);
                            if (netMusicListForAlbumRecommendModel.isEmpty()) {
                                recommendItemListCountBox.remove(netMusicScrollPane);
                                recommendItemListCountBox.add(emptyHintPanel);
                            } else {
                                recommendItemListCountBox.remove(emptyHintPanel);
                                recommendItemListCountBox.add(netMusicScrollPane);
                            }
                            // 切换后一定要刷新！
                            recommendLeftBox.repaint();
                        } catch (IORuntimeException runtimeException) {
                            // 无网络连接
                            new TipDialog(THIS, NO_NET_MSG).showDialog();
                        } catch (HttpException httpException) {
                            // 请求超时
                            new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                        } catch (JSONException jsonException) {
                            // 接口问题
                            new TipDialog(THIS, API_ERROR_MSG).showDialog();
                        }
                    }));
                }
                // 打开的是歌手
                else if (o instanceof NetArtistInfo) {
                    NetArtistInfo artistInfo = (NetArtistInfo) o;
                    // 加载封面图片和描述
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        BufferedImage coverImg = ImageUtils.borderShadow(ImageUtils.dye(loadingImage, currUIStyle.getLabelColor()));
                        recommendItemCoverAndNameLabel.setIcon(new ImageIcon(coverImg));
                        recommendItemCoverAndNameLabel.setText(LOADING_MSG);
                        recommendItemTagLabel.setText(LOADING_MSG);
                        recommendItemTagLabel.setVisible(true);
                        recommendItemDescriptionLabel.setText(LOADING_MSG);
                        GlobalExecutors.imageExecutor.execute(() -> {
                            try {
                                MusicServerUtils.fillArtistInfo(artistInfo);
                                recommendItemCoverAndNameLabel.setText(StringUtils.textToHtml(artistInfo.getName()));
                                if (artistInfo.getTag() != null)
                                    recommendItemTagLabel.setText(StringUtils.textToHtml("".equals(artistInfo.getTag()) ? "" : artistInfo.getTag()));
                                if (artistInfo.getDescription() != null)
                                    recommendItemDescriptionLabel.setText(StringUtils.textToHtml(artistInfo.getDescription()));
                                if (artistInfo.hasCoverImg()) {
                                    recommendItemCoverAndNameLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(artistInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                } else {
                                    artistInfo.setInvokeLater(() -> {
                                        recommendItemCoverAndNameLabel.setIcon(new ImageIcon(
                                                ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(artistInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                        ));
                                        itemRecommendList.repaint();
                                    });
                                }
                            } catch (HttpException e) {
                                recommendItemCoverAndNameLabel.setText(LOAD_FAILED);
                                recommendItemTagLabel.setText(LOAD_FAILED);
                                recommendItemDescriptionLabel.setText(LOAD_FAILED);
                            }
                        });
                    }));

                    // 得到歌手的音乐信息
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        try {
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInArtist(
                                    artistInfo.getId(), artistInfo.getSource(), limit, netMusicInRecommendCurrPage = 1);
                            List<NetMusicInfo> musicInfos = result.data;
                            int total = result.total;
                            netMusicInRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            // 更新歌手歌曲数量显示
//                                currItemRecommendLabel.setText(StringUtils.textToHtml(artistInfo.getName()));
                            recommendCountLabel.setText(String.format(PAGINATION_MSG, netMusicInRecommendCurrPage, netMusicInRecommendMaxPage));
                            recommendItemListCountBox.add(recommendCountPanel);
                            recommendItemListBox.add(recommendItemListCountBox);
                            // 歌手列表切换到在线音乐列表
                            netMusicList.setModel(netMusicListForArtistRecommendModel);
                            recommendLeftBox.remove(itemRecommendScrollPane);
                            recommendLeftBox.add(recommendItemListBox);
                            // 推荐工具栏添加，需要更新 LAF
                            recommendLeftBox.add(musicRecommendToolBar, 0);
                            SwingUtilities.updateComponentTreeUI(musicRecommendToolBar);
                            // 添加数据建议弄到更新数量显示之后，不然可能会不显示！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForArtistRecommendModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForArtistRecommendModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForArtistRecommendModel);
                            recommendItemDescriptionScrollPane.getVerticalScrollBar().setValue(0);
                            netMusicScrollPane.getVerticalScrollBar().setValue(0);
                            recommendLeftBox.remove(recommendToolBar);
                            recommendBackwardButton.setEnabled(true);
                            netRecommendSourceComboBox.setVisible(false);
                            netRecommendPlayAllButton.setVisible(true);
                            netRecommendTagComboBox.setVisible(false);
                            if (netMusicListForArtistRecommendModel.isEmpty()) {
                                recommendItemListCountBox.remove(netMusicScrollPane);
                                recommendItemListCountBox.add(emptyHintPanel);
                            } else {
                                recommendItemListCountBox.remove(emptyHintPanel);
                                recommendItemListCountBox.add(netMusicScrollPane);
                            }
                            // 切换后一定要刷新！
                            recommendLeftBox.repaint();
                        } catch (IORuntimeException runtimeException) {
                            // 无网络连接
                            new TipDialog(THIS, NO_NET_MSG).showDialog();
                        } catch (HttpException httpException) {
                            // 请求超时
                            new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                        } catch (JSONException jsonException) {
                            // 接口问题
                            new TipDialog(THIS, API_ERROR_MSG).showDialog();
                        }
                    }));
                }
                // 打开的是电台
                else if (o instanceof NetRadioInfo) {
                    NetRadioInfo radioInfo = (NetRadioInfo) o;
                    // 加载封面图片和描述
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        BufferedImage coverImg = ImageUtils.borderShadow(ImageUtils.dye(loadingImage, currUIStyle.getLabelColor()));
                        recommendItemCoverAndNameLabel.setIcon(new ImageIcon(coverImg));
                        recommendItemCoverAndNameLabel.setText(LOADING_MSG);
                        recommendItemTagLabel.setText(LOADING_MSG);
                        recommendItemTagLabel.setVisible(true);
                        recommendItemDescriptionLabel.setText(LOADING_MSG);
                        GlobalExecutors.imageExecutor.execute(() -> {
                            try {
                                MusicServerUtils.fillRadioInfo(radioInfo);
                                recommendItemCoverAndNameLabel.setText(StringUtils.textToHtml(radioInfo.getName()));
                                if (radioInfo.getTag() != null)
                                    recommendItemTagLabel.setText(StringUtils.textToHtml("".equals(radioInfo.getTag()) ? "" : "标签：" + radioInfo.getTag()));
                                if (radioInfo.getDescription() != null)
                                    recommendItemDescriptionLabel.setText(StringUtils.textToHtml(radioInfo.getDescription()));
                                if (radioInfo.hasCoverImg()) {
                                    recommendItemCoverAndNameLabel.setIcon(new ImageIcon(
                                            ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(radioInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                    ));
                                } else {
                                    radioInfo.setInvokeLater(() -> {
                                        recommendItemCoverAndNameLabel.setIcon(new ImageIcon(
                                                ImageUtils.borderShadow(ImageUtils.setRadius(ImageUtils.width(radioInfo.getCoverImg(), coverImageWidth), MIDDLE_ARC))
                                        ));
                                        itemRecommendList.repaint();
                                    });
                                }
                            } catch (HttpException e) {
                                recommendItemCoverAndNameLabel.setText(LOAD_FAILED);
                                recommendItemTagLabel.setText(LOAD_FAILED);
                                recommendItemDescriptionLabel.setText(LOAD_FAILED);
                            }
                        });
                    }));

                    // 得到电台的音乐信息
                    taskList.add(GlobalExecutors.requestExecutor.submit(() -> {
                        try {
                            CommonResult<NetMusicInfo> result = MusicServerUtils.getMusicInfoInRadio(
                                    radioInfo, limit, netMusicInRecommendCurrPage = 1);
                            List<NetMusicInfo> musicInfos = result.data;
                            int total = result.total;
                            netMusicInRecommendMaxPage = Math.max(total % limit == 0 ? total / limit : total / limit + 1, 1);
                            // 更新电台歌曲数量显示
//                                currItemRecommendLabel.setText(StringUtils.textToHtml(radioInfo.getName()));
                            recommendCountLabel.setText(String.format(PAGINATION_MSG, netMusicInRecommendCurrPage, netMusicInRecommendMaxPage));
                            recommendItemListCountBox.add(recommendCountPanel);
                            recommendItemListBox.add(recommendItemListCountBox);
                            // 电台列表切换到在线音乐列表
                            netMusicList.setModel(netMusicListForRadioRecommendModel);
                            recommendLeftBox.remove(itemRecommendScrollPane);
                            recommendLeftBox.add(recommendItemListBox);
                            // 推荐工具栏添加，需要更新 LAF
                            recommendLeftBox.add(musicRecommendToolBar, 0);
                            SwingUtilities.updateComponentTreeUI(musicRecommendToolBar);
                            // 添加数据建议弄到更新数量显示之后，不然可能会不显示！
                            netMusicList.setModel(emptyListModel);
                            netMusicListForRadioRecommendModel.clear();
                            musicInfos.forEach(musicInfo -> {
                                globalExecutor.submit(() -> updateCollection(musicInfo));
                                netMusicListForRadioRecommendModel.addElement(musicInfo);
                            });
                            netMusicList.setModel(netMusicListForRadioRecommendModel);
                            recommendItemDescriptionScrollPane.getVerticalScrollBar().setValue(0);
                            netMusicScrollPane.getVerticalScrollBar().setValue(0);
                            recommendLeftBox.remove(recommendToolBar);
                            recommendBackwardButton.setEnabled(true);
                            netRecommendSourceComboBox.setVisible(false);
                            netRecommendPlayAllButton.setVisible(true);
                            netRecommendTagComboBox.setVisible(false);
                            if (netMusicListForRadioRecommendModel.isEmpty()) {
                                recommendItemListCountBox.remove(netMusicScrollPane);
                                recommendItemListCountBox.add(emptyHintPanel);
                            } else {
                                recommendItemListCountBox.remove(emptyHintPanel);
                                recommendItemListCountBox.add(netMusicScrollPane);
                            }
                            // 切换后一定要刷新！
                            recommendLeftBox.repaint();
                        } catch (IORuntimeException runtimeException) {
                            // 无网络连接
                            new TipDialog(THIS, NO_NET_MSG).showDialog();
                        } catch (HttpException httpException) {
                            // 请求超时
                            new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                        } catch (JSONException jsonException) {
                            // 接口问题
                            new TipDialog(THIS, API_ERROR_MSG).showDialog();
                        }
                    }));
                }

                taskList.forEach(task -> {
                    try {
                        task.get();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    } catch (ExecutionException e) {
                        e.printStackTrace();
                    }
                });
            });
        };
        itemRecommendList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    openRecommendItemAction.run();
                }
            }
        });
        itemRecommendList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                // 鼠标左键双击打开歌单/专辑/歌手/电台/MV
                if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    openRecommendItemAction.run();
                }

                // 右键推荐列表
                else if (e.getButton() == MouseEvent.BUTTON3) {
                    if (itemRecommendList.getModel().getSize() != 0) {
                        // 得到鼠标光标所在的选项并选中
                        int index = itemRecommendList.locationToIndex(e.getPoint());
                        if (index == -1) return;
                        if (!itemRecommendList.isSelectedIndex(index)) itemRecommendList.setSelectedIndex(index);
                        Object o = itemRecommendList.getSelectedValue();
                        CustomMenuItem menuItem = null;
                        if (o instanceof NetPlaylistInfo) menuItem = netPlaylistCollectMenuItem;
                        else if (o instanceof NetAlbumInfo) menuItem = netAlbumCollectMenuItem;
                        else if (o instanceof NetArtistInfo) menuItem = netArtistCollectMenuItem;
                        else if (o instanceof NetRadioInfo) menuItem = netRadioCollectMenuItem;
                        else if (o instanceof NetMvInfo) menuItem = netMvCollectMenuItem;
                        if (hasBeenCollected(o)) {
                            menuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                            menuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);
                        } else {
                            menuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, currUIStyle.getButtonColor()));
                            menuItem.setText(COLLECT_MENU_ITEM_TEXT);
                        }

                        if (currRecommendTab == RecommendTabIndex.PLAYLIST_RECOMMEND
                                || currRecommendTab == RecommendTabIndex.HIGH_QUALITY_PLAYLIST_RECOMMEND) {
                            netPlaylistPopupMenu.show(itemRecommendList, e.getX(), e.getY());
                        } else if (currRecommendTab == RecommendTabIndex.NEW_ALBUM_RECOMMEND) {
                            netAlbumPopupMenu.show(itemRecommendList, e.getX(), e.getY());
                        } else if (currRecommendTab == RecommendTabIndex.ARTIST_LIST_RECOMMEND) {
                            netArtistPopupMenu.show(itemRecommendList, e.getX(), e.getY());
                        } else if (currRecommendTab == RecommendTabIndex.HOT_RADIO_RECOMMEND
                                || currRecommendTab == RecommendTabIndex.NEW_RADIO_RECOMMEND) {
                            netRadioPopupMenu.show(itemRecommendList, e.getX(), e.getY());
                        } else if (currRecommendTab == RecommendTabIndex.MV_RECOMMEND) {
                            netMvPopupMenu.show(itemRecommendList, e.getX(), e.getY());
                        }
                    }
                }
            }
        });
        // 最佳大小
        itemRecommendScrollPane.setPreferredSize(new Dimension(200, 3000));
        recommendLeftBox.add(itemRecommendScrollPane);
    }

    // 判断标签是不是可以显示
    private boolean shouldShowTag(Map<String, String[]> tags, int[] map, String tag) {
        if ("默认".equals(tag)) return true;
        int si = netRecommendSourceComboBox.getSelectedIndex();
        String[] vals = tags.get(tag);
        for (int i = 0, len = map.length; i < len; i++) {
            if (map[i] == si && StringUtils.isNotEmpty(vals[i])) return true;
        }
        return false;
    }

    // 初始化下载工具条
    private void downloadToolBarInit() {
        // 按钮悬浮和点击效果
        restartSelectedTasksButton.addMouseListener(new ButtonMouseListener(restartSelectedTasksButton, THIS));
        cancelSelectedTasksButton.addMouseListener(new ButtonMouseListener(cancelSelectedTasksButton, THIS));
        removeSelectedTasksButton.addMouseListener(new ButtonMouseListener(removeSelectedTasksButton, THIS));
        restartAllTasksButton.addMouseListener(new ButtonMouseListener(restartAllTasksButton, THIS));
        cancelAllTasksButton.addMouseListener(new ButtonMouseListener(cancelAllTasksButton, THIS));
        removeAllTasksButton.addMouseListener(new ButtonMouseListener(removeAllTasksButton, THIS));

        // 重新开始选中任务
        restartSelectedTasksButton.addActionListener(e -> {
            restartTaskMenuItem.doClick();
        });
        // 取消选中任务
        cancelSelectedTasksButton.addActionListener(e -> {
            cancelTaskMenuItem.doClick();
        });
        // 删除选中任务
        removeSelectedTasksButton.addActionListener(e -> {
            removeTaskMenuItem.doClick();
        });
        // 重新开始全部任务
        restartAllTasksButton.addActionListener(e -> {
            ConfirmDialog dialog = new ConfirmDialog(this, ASK_RESTART_ALL_TASKS_MSG, "是", "否");
            dialog.showDialog();
            if (dialog.getResponse() == JOptionPane.YES_OPTION) {
                Enumeration<Task> tasks = downloadListModel.elements();
                while (tasks.hasMoreElements()) {
                    Task task = tasks.nextElement();
                    if (!task.isProcessing()) task.start();
                }
            }
        });
        // 取消全部任务
        cancelAllTasksButton.addActionListener(e -> {
            ConfirmDialog dialog = new ConfirmDialog(this, ASK_CANCEL_ALL_TASKS_MSG, "是", "否");
            dialog.showDialog();
            if (dialog.getResponse() == JOptionPane.YES_OPTION) {
                Enumeration<Task> tasks = downloadListModel.elements();
                while (tasks.hasMoreElements()) {
                    Task task = tasks.nextElement();
                    if (task.isProcessing()) task.stop();
                }
            }
        });
        // 删除全部任务
        removeAllTasksButton.addActionListener(e -> {
            ConfirmDialog dialog = new ConfirmDialog(this, ASK_REMOVE_ALL_TASKS_MSG, "是", "否");
            dialog.showDialog();
            if (dialog.getResponse() == JOptionPane.YES_OPTION) {
                downloadListModel.clear();
                new TipDialog(THIS, CLEAR_SUCCESS_MSG).showDialog();
            }
        });

        // 标签间距
        taskCountLabel.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));
        // 帮助提示
        restartSelectedTasksButton.setToolTipText(RESTART_SELECTED_TASKS_TIP);
        cancelSelectedTasksButton.setToolTipText(CANCEL_SELECTED_TASKS_TIP);
        removeSelectedTasksButton.setToolTipText(REMOVE_SELECTED_TASKS_TIP);
        restartAllTasksButton.setToolTipText(RESTART_ALL_TASKS_TIP);
        cancelAllTasksButton.setToolTipText(CANCEL_ALL_TASKS_TIP);
        removeAllTasksButton.setToolTipText(REMOVE_ALL_TASKS_TIP);

        downloadToolBar.add(restartSelectedTasksButton);
        downloadToolBar.add(restartAllTasksButton);
        downloadToolBar.add(cancelSelectedTasksButton);
        downloadToolBar.add(cancelAllTasksButton);
        downloadToolBar.add(removeSelectedTasksButton);
        downloadToolBar.add(removeAllTasksButton);
        downloadToolBar.add(taskCountLabel);
        // 加胶水让工具栏左对齐
        downloadToolBar.add(Box.createHorizontalGlue());
        downloadLeftBox.add(downloadToolBar);
    }

    // 初始化下载列表
    private void downloadListInit() {
        ListDataListener countListener = new ListDataListener() {
            @Override
            public void intervalAdded(ListDataEvent e) {
                int size = downloadListModel.getSize();
                taskCountLabel.setText(String.format("共 %s 项任务", size));
                if (size == 1) {
                    downloadLeftBox.remove(emptyHintPanel);
                    downloadLeftBox.add(downloadListScrollPane);
                }
            }

            @Override
            public void intervalRemoved(ListDataEvent e) {
                int size = downloadListModel.getSize();
                taskCountLabel.setText(String.format("共 %s 项任务", size));
                if (size == 0) {
                    downloadLeftBox.remove(downloadListScrollPane);
                    downloadLeftBox.add(emptyHintPanel);
                    downloadLeftBox.repaint();
                }
            }

            @Override
            public void contentsChanged(ListDataEvent e) {

            }
        };
        downloadListModel.addListDataListener(countListener);
        downloadList.setModel(downloadListModel);
        downloadList.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int index = downloadList.locationToIndex(e.getPoint());
                Rectangle bounds = downloadList.getCellBounds(index, index);
                if (bounds == null) return;
                setHoverIndex(bounds.contains(e.getPoint()) ? index : -1);
            }

            private void setHoverIndex(int index) {
                TranslucentDownloadListRenderer renderer = (TranslucentDownloadListRenderer) downloadList.getCellRenderer();
                if (renderer == null) return;
                int hoverIndex = renderer.getHoverIndex();
                if (hoverIndex == index) return;
                renderer.setHoverIndex(index);
                downloadList.repaint();
            }
        });
        downloadList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                TranslucentDownloadListRenderer renderer = (TranslucentDownloadListRenderer) downloadList.getCellRenderer();
                if (renderer == null) return;
                renderer.setHoverIndex(-1);
                downloadList.repaint();
            }
        });
        downloadList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    downloadPlayMenuItem.doClick();
                }
            }
        });
        downloadList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                // 鼠标左键双击播放
                if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    downloadPlayMenuItem.doClick();
                }
                // 鼠标右键弹出菜单
                if (e.getButton() == MouseEvent.BUTTON3) {
                    if (downloadList.getModel().getSize() != 0) {
                        // 得到鼠标光标所在的选项并选中
                        int index = downloadList.locationToIndex(e.getPoint());
                        if (index != -1 && !downloadList.isSelectedIndex(index)
                                || downloadList.isSelectedIndex(index) && downloadList.getSelectedIndices().length == 1) {
                            downloadList.setSelectedIndex(index);
                        }
                        // 多选任务时，只要有一个任务满足条件就启用
                        List<Task> tasks = downloadList.getSelectedValuesList();
                        cancelTaskMenuItem.setEnabled(false);
                        restartTaskMenuItem.setEnabled(false);
                        Task t = tasks.get(0);
                        downloadNextPlayMenuItem.setEnabled(t.isMusic());
                        downloadEditInfoMenuItem.setEnabled(t.isFinished() && t.isMusic() && t.getNetMusicInfo().isMp3());
                        for (Task task : tasks) {
                            if (task.isProcessing()) cancelTaskMenuItem.setEnabled(true);
                            else restartTaskMenuItem.setEnabled(true);
                            if (cancelTaskMenuItem.isEnabled() && restartTaskMenuItem.isEnabled()) break;
                        }
                        downloadPopupMenu.show(downloadList, e.getX(), e.getY());
                    }
                }
            }
        });
        // 播放菜单项
        downloadPlayMenuItem.addActionListener(e -> {
            Task task = downloadList.getSelectedValue();
            if (task.isFinished()) {
                if (task.isMusic()) playExecutor.submit(() -> playSelected(downloadList, false));
                else playMv(MvType.DOWNLOAD_LIST);
            } else {
                new TipDialog(THIS, WAIT_FOR_TASK_COMPLETED_MSG).showDialog();
            }
        });
        // 下一首播放
        downloadNextPlayMenuItem.addActionListener(e -> nextPlay(downloadList));
        // 打开文件所在位置菜单项
        downloadLocateFileMenuItem.addActionListener(e -> {
            Task task = downloadList.getSelectedValue();
            File file = new File(task.getDest());
            TerminateUtils.explorer(file.exists() ? file.getAbsolutePath() :
                    task.isMusic() ? new File(SimplePath.DOWNLOAD_MUSIC_PATH).getAbsolutePath() :
                            new File(SimplePath.DOWNLOAD_MV_PATH).getAbsolutePath());
        });
        // 编辑歌曲信息菜单项
        downloadEditInfoMenuItem.addActionListener(e -> {
            Task task = downloadList.getSelectedValue();
            if (task.isMusic()) {
                AudioFile file = new AudioFile(task.getDest());
                if (file.exists()) {
                    MusicUtils.fillAudioFileInfo(file);
                    editInfo(file);
                } else new TipDialog(THIS, FILE_NOT_FOUND_MSG).showDialog();
            }
        });
        // 取消任务菜单项
        cancelTaskMenuItem.addActionListener(e -> {
            List<Task> tasks = downloadList.getSelectedValuesList();
            for (Task task : tasks) {
                if (task.isProcessing()) task.stop();
            }
        });
        // 重新开始任务菜单项
        restartTaskMenuItem.addActionListener(e -> {
            List<Task> tasks = downloadList.getSelectedValuesList();
            for (Task task : tasks) {
                if (!task.isProcessing()) task.start();
            }
        });
        // 删除任务菜单项
        removeTaskMenuItem.addActionListener(e -> {
            List<Task> tasks = downloadList.getSelectedValuesList();
            if (tasks.isEmpty()) return;
            ConfirmDialog dialog = new ConfirmDialog(this, ASK_REMOVE_SELECTED_TASKS_MSG, "是", "否", true, ASK_REMOVE_FILE_MSG);
            dialog.showDialog();
            if (dialog.getResponse() != JOptionPane.YES_OPTION) return;
            boolean checked = dialog.isChecked();
            downloadList.setModel(emptyListModel);
            for (Task task : tasks) {
                if (task.isProcessing()) task.stop();
                downloadListModel.removeElement(task);
                if (!checked) continue;
                FileUtils.delete(task.getDest());
            }
            downloadList.setModel(downloadListModel);
            new TipDialog(THIS, REMOVE_SUCCESS_MSG).showDialog();
        });

        downloadPopupMenu.add(downloadPlayMenuItem);
        downloadPopupMenu.add(downloadNextPlayMenuItem);
        downloadPopupMenu.add(downloadLocateFileMenuItem);
        downloadPopupMenu.add(downloadEditInfoMenuItem);
        downloadPopupMenu.add(cancelTaskMenuItem);
        downloadPopupMenu.add(restartTaskMenuItem);
        downloadPopupMenu.add(removeTaskMenuItem);

        downloadListScrollPane.setPreferredSize(new Dimension(600, 300));
        downloadLeftBox.add(downloadListScrollPane);
    }

    // 初始化播放队列工具条
    private void playQueueToolBarInit() {
        // 按钮悬浮和点击效果
        playQueueRemoveToolButton.addMouseListener(new ButtonMouseListener(playQueueRemoveToolButton, THIS));
        playQueueClearToolButton.addMouseListener(new ButtonMouseListener(playQueueClearToolButton, THIS));
        playQueueDuplicateToolButton.addMouseListener(new ButtonMouseListener(playQueueDuplicateToolButton, THIS));
        playQueueReverseToolButton.addMouseListener(new ButtonMouseListener(playQueueReverseToolButton, THIS));
        playQueueMoveUpToolButton.addMouseListener(new ButtonMouseListener(playQueueMoveUpToolButton, THIS));
        playQueueMoveDownToolButton.addMouseListener(new ButtonMouseListener(playQueueMoveDownToolButton, THIS));

        // 从播放队列删除
        playQueueRemoveToolButton.addActionListener(e -> {
            List selectedValues = playQueue.getSelectedValuesList();
            if (!selectedValues.isEmpty()) {
                ConfirmDialog confirmDialog = new ConfirmDialog(THIS,
                        ASK_REMOVE_SONGS_FROM_PLAY_QUEUE_MSG, "是", "否");
                confirmDialog.showDialog();
                int response = confirmDialog.getResponse();
                // 删除选中的歌曲
                if (response == JOptionPane.YES_OPTION) {
                    // 解决删除元素带来的性能问题
                    playQueue.setModel(emptyListModel);
                    for (Object o : selectedValues) {
                        if (player.isPlayingObject(o)) unload();
                        playQueueModel.removeElement(o);
                    }
                    playQueue.setModel(playQueueModel);
                    updateCurrSong();
                    new TipDialog(THIS, REMOVE_SUCCESS_MSG).showDialog();
                }
            }
        });
        // 清空播放队列
        playQueueClearToolButton.addActionListener(e -> {
            ConfirmDialog confirmDialog = new ConfirmDialog(THIS, ASK_CLEAR_PLAY_QUEUE_MSG, "是", "否");
            confirmDialog.showDialog();
            int response = confirmDialog.getResponse();
            if (response == JOptionPane.YES_OPTION) {
                if (!player.isEmpty()) unload();
                playQueueModel.clear();
                updateCurrSong();
                new TipDialog(THIS, CLEAR_SUCCESS_MSG).showDialog();
            }
        });
        // 去重
        playQueueDuplicateToolButton.addActionListener(e -> {
            ConfirmDialog confirmDialog = new ConfirmDialog(THIS, ASK_DUPLICATE_MSG, "是", "否");
            confirmDialog.showDialog();
            int response = confirmDialog.getResponse();
            if (response == JOptionPane.YES_OPTION) {
                Set<Object> set = new HashSet<>();
                // 解决删除元素带来的性能问题
                playQueue.setModel(emptyListModel);
                for (int i = 0; i < playQueueModel.getSize(); i++) {
                    Object elem = playQueueModel.get(i);
                    if (!set.contains(elem)) set.add(elem);
                    else playQueueModel.remove(i--);
                }
                playQueue.setModel(playQueueModel);
                updateCurrSong();
                new TipDialog(THIS, DUPLICATE_SUCCESS_MSG).showDialog();
            }
        });
        // 倒序
        playQueueReverseToolButton.addActionListener(e -> {
            ConfirmDialog confirmDialog = new ConfirmDialog(THIS, ASK_REVERSE_MSG, "是", "否");
            confirmDialog.showDialog();
            int response = confirmDialog.getResponse();
            if (response == JOptionPane.YES_OPTION) {
                Set<Object> set = new HashSet<>();
                // 解决修改元素带来的性能问题
                playQueue.setModel(emptyListModel);
                for (int i = 0, s = playQueueModel.size(), half = s / 2; i < half; i++) {
                    Object t = playQueueModel.get(i);
                    playQueueModel.set(i, playQueueModel.get(s - 1 - i));
                    playQueueModel.set(s - 1 - i, t);
                }
                playQueue.setModel(playQueueModel);
                updateCurrSong();
                new TipDialog(THIS, REVERSE_SUCCESS_MSG).showDialog();
            }
        });
        // 上移下移
        playQueueMoveUpToolButton.addActionListener(e -> {
            int selectedIndex = playQueue.getSelectedIndex();
            if (selectedIndex != -1 && selectedIndex != 0) {
                Object o1 = playQueueModel.get(selectedIndex - 1);
                Object o2 = playQueueModel.get(selectedIndex);
                playQueueModel.set(selectedIndex - 1, o2);
                playQueueModel.set(selectedIndex, o1);
                playQueue.setSelectedIndex(selectedIndex - 1);
                if (player.isPlayingObject(o1)) currSong = selectedIndex;
                else if (player.isPlayingObject(o2)) currSong = selectedIndex - 1;
            }
        });
        playQueueMoveDownToolButton.addActionListener(e -> {
            int selectedIndex = playQueue.getSelectedIndex();
            if (selectedIndex != -1 && selectedIndex != playQueueModel.getSize() - 1) {
                Object o1 = playQueueModel.get(selectedIndex);
                Object o2 = playQueueModel.get(selectedIndex + 1);
                playQueueModel.set(selectedIndex, o2);
                playQueueModel.set(selectedIndex + 1, o1);
                playQueue.setSelectedIndex(selectedIndex + 1);
                if (player.isPlayingObject(o1)) currSong = selectedIndex + 1;
                else if (player.isPlayingObject(o2)) currSong = selectedIndex;
            }
        });

        // 帮助提示
        playQueueRemoveToolButton.setToolTipText(REMOVE_FROM_PLAY_QUEUE_TIP);
        playQueueClearToolButton.setToolTipText(CLEAR_PLAY_QUEUE_TIP);
        playQueueDuplicateToolButton.setToolTipText(DUPLICATE_TIP);
        playQueueReverseToolButton.setToolTipText(REVERSE_TIP);
        playQueueMoveUpToolButton.setToolTipText(MOVE_UP_TIP);
        playQueueMoveDownToolButton.setToolTipText(MOVE_DOWN_TIP);

        playQueueToolBar.add(playQueueRemoveToolButton);
        playQueueToolBar.add(playQueueClearToolButton);
        playQueueToolBar.add(playQueueDuplicateToolButton);
        playQueueToolBar.add(playQueueReverseToolButton);
        playQueueToolBar.add(playQueueMoveUpToolButton);
        playQueueToolBar.add(playQueueMoveDownToolButton);
        playQueueToolBar.add(playQueueCountLabel);
        // 加胶水让工具栏左对齐
        playQueueToolBar.add(Box.createHorizontalGlue());
        playQueueLeftBox.add(playQueueToolBar);
    }

    // 初始化播放队列列表
    private void playQueueInit() {
        ListDataListener countListener = new ListDataListener() {
            @Override
            public void intervalAdded(ListDataEvent e) {
                int size = playQueueModel.getSize();
                playQueueCountLabel.setText(String.format("共 %s 首", size));
                if (size == 1) {
                    playQueueLeftBox.remove(emptyHintPanel);
                    playQueueLeftBox.add(playQueueScrollPane);
                }
            }

            @Override
            public void intervalRemoved(ListDataEvent e) {
                int size = playQueueModel.getSize();
                playQueueCountLabel.setText(String.format("共 %s 首", size));
                if (size == 0) {
                    playQueueLeftBox.remove(playQueueScrollPane);
                    playQueueLeftBox.add(emptyHintPanel);
                }
            }

            @Override
            public void contentsChanged(ListDataEvent e) {

            }
        };
        playQueueModel.addListDataListener(countListener);
        playQueue.setModel(playQueueModel);

        playQueue.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int index = playQueue.locationToIndex(e.getPoint());
                Rectangle bounds = playQueue.getCellBounds(index, index);
                if (bounds == null) return;
                setHoverIndex(bounds.contains(e.getPoint()) ? index : -1);
            }

            private void setHoverIndex(int index) {
                TranslucentMusicListRenderer renderer = (TranslucentMusicListRenderer) playQueue.getCellRenderer();
                if (renderer == null) return;
                int hoverIndex = renderer.getHoverIndex();
                if (hoverIndex == index) return;
                renderer.setHoverIndex(index);
                playQueue.repaint();
            }
        });
        playQueue.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                TranslucentMusicListRenderer renderer = (TranslucentMusicListRenderer) playQueue.getCellRenderer();
                if (renderer == null) return;
                renderer.setHoverIndex(-1);
                playQueue.repaint();
            }
        });
        playQueue.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    playExecutor.submit(() -> playSelected(playQueue, false));
                }
            }
        });
        playQueue.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                // 鼠标左键双击播放
                if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    playExecutor.submit(() -> playSelected(playQueue, false));
//                    if (playQueue.getSelectedValue() instanceof File) playSelected(playQueue, false);
//                    else loadingAndRun(() -> playSelected(playQueue, false));
                }
                // 鼠标右键弹出菜单
                else if (e.getButton() == MouseEvent.BUTTON3) {
                    if (playQueue.getModel().getSize() != 0) {
                        // 得到鼠标光标所在的选项并选中
                        int index = playQueue.locationToIndex(e.getPoint());
                        if (index != -1 && !playQueue.isSelectedIndex(index)
                                || playQueue.isSelectedIndex(index) && playQueue.getSelectedIndices().length == 1) {
                            playQueue.setSelectedIndex(index);
                            Object o = playQueue.getSelectedValue();
                            boolean ins = o instanceof NetMusicInfo;
                            playQueueDownloadMenuItem.setEnabled(ins);
                            playQueueCommentMenuItem.setEnabled(ins);
                            playQueueSheetMenuItem.setEnabled(ins);
                            playQueueSimilarSongMenuItem.setEnabled(ins);
                            playQueueRelatedPlaylistMenuItem.setEnabled(ins);
                            playQueueAuthorMenuItem.setEnabled(ins);
                            playQueueAlbumMenuItem.setEnabled(ins);
                            playQueueRecRadioMenuItem.setEnabled(ins);
                            playQueueRelatedMvMenuItem.setEnabled(ins);
                            playQueuePlayMvMenuItem.setEnabled(ins && ((NetMusicInfo) o).hasMv());
                            if (hasBeenCollected(o)) {
                                playQueueCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                                playQueueCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);
                            } else {
                                playQueueCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, currUIStyle.getButtonColor()));
                                playQueueCollectMenuItem.setText(COLLECT_MENU_ITEM_TEXT);
                            }
                            playQueueLocateFileMenuItem.setEnabled(!ins);
                            playQueueEditInfoMenuItem.setEnabled(!ins);
                        } else {
                            List list = playQueue.getSelectedValuesList();
                            for (Object o : list) {
                                playQueueDownloadMenuItem.setEnabled(o instanceof NetMusicInfo);
                                if (playQueueDownloadMenuItem.isEnabled()) break;
                            }
                            Object first = list.get(0);
                            boolean ins = first instanceof NetMusicInfo;
                            playQueueCommentMenuItem.setEnabled(ins);
                            playQueueSheetMenuItem.setEnabled(ins);
                            playQueueSimilarSongMenuItem.setEnabled(ins);
                            playQueueRelatedPlaylistMenuItem.setEnabled(ins);
                            playQueueAuthorMenuItem.setEnabled(ins);
                            playQueueAlbumMenuItem.setEnabled(ins);
                            playQueueRecRadioMenuItem.setEnabled(ins);
                            playQueueRelatedMvMenuItem.setEnabled(ins);
                            playQueuePlayMvMenuItem.setEnabled(ins);
                            if (hasBeenCollected(first)) {
                                playQueueCollectMenuItem.setIcon(ImageUtils.dye(cancelCollectionMenuItemIcon, currUIStyle.getButtonColor()));
                                playQueueCollectMenuItem.setText(CANCEL_COLLECTION_MENU_ITEM_TEXT);
                            } else {
                                playQueueCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, currUIStyle.getButtonColor()));
                                playQueueCollectMenuItem.setText(COLLECT_MENU_ITEM_TEXT);
                            }
                            playQueueLocateFileMenuItem.setEnabled(!ins);
                            playQueueEditInfoMenuItem.setEnabled(!ins);
                        }

                        playQueuePopupMenu.show(playQueue, e.getX(), e.getY());
                    }
                }
            }
        });
        // 播放菜单项
        playQueuePlayMenuItem.addActionListener(e -> {
            playExecutor.submit(() -> playSelected(playQueue, false));
//            if (playQueue.getSelectedValue() instanceof File) playSelected(playQueue, false);
//            else loadingAndRun(() -> playSelected(playQueue, false));
        });
        // 下一首播放
        playQueueNextPlayMenuItem.addActionListener(e -> nextPlay(playQueue));
        // 播放 MV 菜单项
        playQueuePlayMvMenuItem.addActionListener(e -> {
            playMv(MvType.PLAY_QUEUE);
        });
        // 收藏/取消收藏菜单项
        playQueueCollectMenuItem.addActionListener(e -> {
            ListModel model = musicList.getModel();
            boolean needRefresh = model == collectionModel;
            if (playQueueCollectMenuItem.getText().equals(COLLECT_MENU_ITEM_TEXT)) {
                List values = playQueue.getSelectedValuesList();
                if (needRefresh) musicList.setModel(emptyListModel);
                for (int i = values.size() - 1; i >= 0; i--) {
                    Object o = values.get(i);
                    if (hasBeenCollected(o)) continue;
                    collectionModel.add(0, o);
                    if (player.isPlayingObject(o))
                        collectButton.setIcon(ImageUtils.dye(hasCollectedIcon, currUIStyle.getButtonColor()));
                }
                if (needRefresh) musicList.setModel(model);
                new TipDialog(THIS, COLLECT_SUCCESS_MSG).showDialog();
            } else {
                List values = playQueue.getSelectedValuesList();
                if (needRefresh) musicList.setModel(emptyListModel);
                values.forEach(o -> {
                    if (hasBeenCollected(o)) {
                        collectionModel.removeElement(o);
                        if (player.isPlayingObject(o))
                            collectButton.setIcon(ImageUtils.dye(collectIcon, currUIStyle.getButtonColor()));
                    }
                });
                if (needRefresh) musicList.setModel(model);
                new TipDialog(THIS, CANCEL_COLLECTION_SUCCESS_MSG).showDialog();
            }
        });
        // 下载菜单项
        playQueueDownloadMenuItem.addActionListener(e -> {
            List values = playQueue.getSelectedValuesList();
            multiDownload(values);
        });
        // 查看评论菜单项
        playQueueCommentMenuItem.addActionListener(e -> {
            Object o = playQueue.getSelectedValue();
            if (o instanceof NetMusicInfo) {
                getComments(o, true);
            }
        });
        // 查看乐谱菜单项
        playQueueSheetMenuItem.addActionListener(e -> {
            Object o = playQueue.getSelectedValue();
            if (o instanceof NetMusicInfo) {
                getSheets((NetMusicInfo) o, true);
            }
        });
        // 搜索这首歌曲菜单项
        playQueueSearchSongMenuItem.addActionListener(e -> {
            Object o = playQueue.getSelectedValue();
            tabbedPane.setSelectedIndex(TabIndex.NET_MUSIC);
            if (currMusicMusicInfo != null) netMusicBackwardButton.doClick();
            searchTextField.requestFocus();
            if (o instanceof NetMusicInfo) {
                searchTextField.setText(((NetMusicInfo) o).toAvailableString());
            } else searchTextField.setText(o.toString());
            netMusicClearInputButton.setVisible(true);
            searchButton.doClick();
        });
        // 查看相似歌曲菜单项
        playQueueSimilarSongMenuItem.addActionListener(e -> netMusicSimilarSongMenuItem.doClick());
        // 查看歌关歌单菜单项
        playQueueRelatedPlaylistMenuItem.addActionListener(e -> netMusicRelatedPlaylistMenuItem.doClick());
        // 查看歌手/作者
        playQueueAuthorMenuItem.addActionListener(e -> netMusicAuthorMenuItem.doClick());
        // 查看专辑/电台
        playQueueAlbumMenuItem.addActionListener(e -> netMusicAlbumMenuItem.doClick());
        // 查看推荐电台
        playQueueRecRadioMenuItem.addActionListener(e -> netMusicRecRadioMenuItem.doClick());
        // 查看相关 MV 菜单项
        playQueueRelatedMvMenuItem.addActionListener(e -> netMusicRelatedMvMenuItem.doClick());
        // 复制名称菜单项
        playQueueCopyNameMenuItem.addActionListener(e -> {
            Object o = playQueue.getSelectedValue();
            String s = null;
            if (o instanceof AudioFile) s = o.toString();
            else if (o instanceof NetMusicInfo) s = ((NetMusicInfo) o).toSimpleString();
            StringSelection stringSelection = new StringSelection(s);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });
        // 打开文件所在位置菜单项
        playQueueLocateFileMenuItem.addActionListener(e -> {
            Object o = playQueue.getSelectedValue();
            if (o instanceof AudioFile) {
                File file = ((AudioFile) o);
                TerminateUtils.explorer(file.exists() ? file.getAbsolutePath() : file.getParent());
            }
        });
        // 编辑歌曲信息菜单项
        playQueueEditInfoMenuItem.addActionListener(e -> {
            Object o = playQueue.getSelectedValue();
            if (o instanceof AudioFile) {
                AudioFile file = (AudioFile) o;
                if (file.exists()) editInfo((AudioFile) o);
                else new TipDialog(THIS, FILE_NOT_FOUND_MSG).showDialog();
            }
        });
        // 从播放队列删除菜单项
        playQueueRemoveMenuItem.addActionListener(e -> {
            playQueueRemoveToolButton.doClick();
        });
        // 标签间距
        playQueueCountLabel.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));

        playQueuePopupMenu.add(playQueuePlayMenuItem);
        playQueuePopupMenu.add(playQueueNextPlayMenuItem);
        playQueuePopupMenu.add(playQueuePlayMvMenuItem);
        playQueuePopupMenu.add(playQueueCollectMenuItem);
        playQueuePopupMenu.add(playQueueDownloadMenuItem);
        playQueuePopupMenu.add(playQueueCommentMenuItem);
        playQueuePopupMenu.add(playQueueSheetMenuItem);
        playQueuePopupMenu.add(playQueueSearchSongMenuItem);
        playQueuePopupMenu.add(playQueueSimilarSongMenuItem);
        playQueuePopupMenu.add(playQueueRelatedPlaylistMenuItem);
        playQueuePopupMenu.add(playQueueAuthorMenuItem);
        playQueuePopupMenu.add(playQueueAlbumMenuItem);
        playQueuePopupMenu.add(playQueueRecRadioMenuItem);
        playQueuePopupMenu.add(playQueueRelatedMvMenuItem);
        playQueuePopupMenu.add(playQueueCopyNameMenuItem);
        playQueuePopupMenu.add(playQueueLocateFileMenuItem);
        playQueuePopupMenu.add(playQueueEditInfoMenuItem);
        playQueuePopupMenu.add(playQueueRemoveMenuItem);

        playQueueScrollPane.setPreferredSize(new Dimension(600, 300));
        playQueueLeftBox.add(playQueueScrollPane);
    }

    // 初始化歌词列表
    private void lrcListInit() {
        // 复制歌词
        copyMenuItem.addActionListener(e -> {
            Statement stmt = lrcList.getSelectedValue();
            if (stmt == null) return;
            StringSelection stringSelection = new StringSelection(stmt.toString());
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        });
        // 定位歌词时间
        locateLrcMenuItem.addActionListener(e -> {
            Statement stmt = lrcList.getSelectedValue();
            if (stmt == null) return;
            double time = stmt.getTime() + lrcOffset;
            player.seek(time);
            seekLrc(time);
        });
        // 查看歌词文件
        browseLrcMenuItem.addActionListener(e -> {
            String lrcPath = "";
            // 在线音乐先将歌词存为临时文件再查看
            if (player.isPlayingNetMusic()) {
                NetMusicInfo netMusicInfo = player.getNetMusicInfo();
                lrcPath = new File(SimplePath.CACHE_PATH + netMusicInfo.toLrcFileName()).getAbsolutePath();
                FileUtils.writeStr(lrcStr, lrcPath, false);
            }
            // 本地音乐直接打开 lrc 文件
            else {
                File file = player.getMusicInfo().getFile();
                String filePath = file.getAbsolutePath();
                lrcPath = filePath.substring(0, filePath.lastIndexOf('.')) + ".lrc";
            }
            TerminateUtils.notepad(lrcPath);
        });
        // 查看歌词翻译文件
        browseLrcTransMenuItem.addActionListener(e -> {
            String lrcPath = "";
            // 在线音乐先将歌词翻译存为临时文件再查看
            if (player.isPlayingNetMusic()) {
                NetMusicInfo netMusicInfo = player.getNetMusicInfo();
                lrcPath = new File(SimplePath.CACHE_PATH + netMusicInfo.toLrcTransFileName()).getAbsolutePath();
                FileUtils.writeStr(transStr, lrcPath, false);
            }
            TerminateUtils.notepad(lrcPath);
        });
        // 下载歌词文件
        downloadLrcMenuItem.addActionListener(e -> {
            downloadLrc(player.getNetMusicInfo());
        });
        // 下载歌词翻译文件
        downloadLrcTransMenuItem.addActionListener(e -> {
            downloadLrcTrans(player.getNetMusicInfo());
        });
        currLrcOffsetMenuItem.setEnabled(false);

        lrcPopupMenu.add(locateLrcMenuItem);
        lrcPopupMenu.add(copyMenuItem);
        lrcPopupMenu.add(browseLrcMenuItem);
        lrcPopupMenu.add(downloadLrcMenuItem);
        lrcPopupMenu.add(browseLrcTransMenuItem);
        lrcPopupMenu.add(downloadLrcTransMenuItem);
        lrcPopupMenu.addSeparator();
        lrcPopupMenu.add(currLrcOffsetMenuItem);

        for (CustomMenuItem mi : calcLrcOffsetMenuItems) {
            mi.addActionListener(e -> {
                String text = mi.getText();
                if ("重置".equals(text)) lrcOffset = 0;
                else lrcOffset += Double.parseDouble(text.replaceFirst(" s", ""));
                if (lrcOffset > lrcOffsetRadius) lrcOffset = lrcOffsetRadius;
                else if (lrcOffset < -lrcOffsetRadius) lrcOffset = -lrcOffsetRadius;
                currLrcOffsetMenuItem.setText(String.format(LRC_OFFSET_MSG, lrcOffset));
                if (nextLrc >= 0) seekLrc(player.getCurrTimeSeconds());
            });
            lrcPopupMenu.add(mi);
        }

        // 焦点(不画焦点框)
        lrcList.setFocusable(false);
        // 右键弹出菜单
        lrcList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON3) {
                    if (lrcList.getModel().getSize() == 0) return;
                    int index = lrcList.locationToIndex(e.getPoint());
                    if (index == -1) return;
                    lrcList.setSelectedIndex(index);
                    String lyric = lrcListModel.get(index).getLyric();
                    if (lyric.trim().isEmpty()) return;
                    // 歌曲有歌词时才能查看
                    locateLrcMenuItem.setEnabled(nextLrc >= 0);
                    browseLrcMenuItem.setEnabled(nextLrc != NextLrc.NOT_EXISTS);
                    // 在线音乐歌词有翻译才能查看翻译
                    browseLrcTransMenuItem.setEnabled(player.isPlayingNetMusic() && player.getNetMusicInfo().hasTrans());
                    // 只允许下载在线音乐的歌词
                    downloadLrcMenuItem.setEnabled(player.isPlayingNetMusic() && nextLrc != NextLrc.NOT_EXISTS);
                    // 在线音乐歌词有翻译才能下载翻译
                    downloadLrcTransMenuItem.setEnabled(player.isPlayingNetMusic() && player.getNetMusicInfo().hasTrans());

                    lrcPopupMenu.show(lrcList, e.getX(), e.getY());
                }
                // 双击定位歌词时间
                else if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
                    String lyric = lrcList.getSelectedValue().getLyric();
                    if (lyric.trim().isEmpty()) return;
                    if (nextLrc >= 0) locateLrcMenuItem.doClick();
                }
            }
        });
        // 绑定数据 Model
        lrcList.setModel(lrcListModel);
        // 滚动条调整事件（鼠标滚轮滑动、滚动条拖动）
        JScrollBar vs = lrcScrollPane.getVerticalScrollBar();
        Runnable swAction = () -> {
            currScrollVal = vs.getValue();
            if (!lrcScrollWait)
                globalExecutor.submit(() -> {
                    lrcScrollWait = true;
                    ((ScrollBarUI) vs.getUI()).setActive(true);
                    try {
                        Thread.sleep(3000);
                    } catch (InterruptedException ex) {

                    }
                    if (nextLrc != NextLrc.BAD_FORMAT) lrcScrollAnimation = true;
                    ((ScrollBarUI) vs.getUI()).setActive(false);
                    lrcScrollWait = false;
                });
        };
        lrcScrollPane.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                currScrollVal = vs.getValue();
                lrcScrollAnimation = true;
            }
        });
        lrcScrollPane.addMouseWheelListener(e -> {
            swAction.run();
        });
        vs.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                swAction.run();
            }
        });
        vs.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                ((ScrollBarUI) vs.getUI()).setActive(true);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                ((ScrollBarUI) vs.getUI()).setActive(vs.getValueIsAdjusting());
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                ((ScrollBarUI) vs.getUI()).setActive(vs.getVisibleRect().contains(e.getPoint()));
                swAction.run();
            }
        });
        // 歌词面板最佳大小(CustomList 需要加到 CustomScrollPane 中才能调整大小！)
        Dimension d = new Dimension(1, SpectrumConstants.BAR_MAX_HEIGHT);
        spectrumPanel.setMinimumSize(d);
        // 初始不可见
        spectrumPanel.setVisible(false);
//        lrcScrollPane.setMinimumSize(dimension);
//        lrcScrollPane.setMaximumSize(new Dimension((int)(WINDOW_WIDTH * 0.6), (int)(WINDOW_HEIGHT * 1)));
        lrcAndSpecBox.add(lrcScrollPane);
        lrcAndSpecBox.add(spectrumPanel);
        infoAndLrcBox.add(lrcAndSpecBox);
//        globalPanel.add(infoAndLrcBox, BorderLayout.CENTER);
    }

    // 初始化动画 Timer
    private void timerInit() {
        spectrumTimer = new Timer(SpectrumConstants.TIMER_INTERVAL, e -> {
            spectrumExecutor.submit(() -> {
                double[] specs = player.getSpecs();
                double[] specsOrigin = player.getSpecsOrigin();
                double[] specsGap = player.getSpecsGap();
                int piece = (int) ((SpectrumConstants.PLAYER_INTERVAL - 0.01) * 1000 / SpectrumConstants.TIMER_INTERVAL);
                for (int i = 0, len = specsOrigin.length; i < len; i++) {
                    if (specs[i] < specsOrigin[i]) specs[i] += Math.min(specsGap[i] / piece, specsOrigin[i] - specs[i]);
                    else if (specs[i] > specsOrigin[i])
                        specs[i] -= Math.min(specsGap[i] / piece, specs[i] - specsOrigin[i]);
                }
                lrcAndSpecBox.repaint();
            });
        });
        final int LRC_TIMER_INTERVAL = 10, piece = 100 / LRC_TIMER_INTERVAL;
        lrcTimer = new Timer(LRC_TIMER_INTERVAL, e -> {
            lrcExecutor.submit(() -> {
                if (nextLrc >= 0) {
                    double currRatio = desktopLyricDialog.getRatio(), ratio = 0, or = originalRatio.get();
                    if (currRatio < or) ratio = (or - currRatio) / piece + currRatio;
                    ((TranslucentLrcListRenderer) lrcList.getCellRenderer()).setRatio(ratio);
                    desktopLyricDialog.setLyric(statements.get(nextLrc - 1 >= 0 ? nextLrc - 1 : nextLrc).getLyric(), ratio);
                } else {
                    ((TranslucentLrcListRenderer) lrcList.getCellRenderer()).setRatio(0);
                    desktopLyricDialog.setLyric(nextLrc == NextLrc.NOT_EXISTS ? NO_LRC_MSG : BAD_FORMAT_LRC_MSG, 0);
                }
                if (!spectrumTimer.isRunning()) lrcAndSpecBox.repaint();
            });
            if (lrcScrollAnimation) {
                // 避免线程池执行顺序不一致导致的动画过渡不流畅，不提交
//                lrcScrollExecutor.submit(() -> {
                JScrollBar vs = lrcScrollPane.getVerticalScrollBar();
                Rectangle bounds = lrcList.getCellBounds(row, row);
                if (bounds == null) return;
                Insets insets = lrcScrollPane.getInsets();
                int val = vs.getValue(), dVal = bounds.y - (lrcScrollPane.getHeight() - insets.top - insets.bottom) / 2
                        + bounds.height / 2, step = Math.max(1, Math.abs(dVal - currScrollVal) / 20);
                int nv = val < dVal ? Math.min(dVal, val + step) : Math.max(dVal, val - step);
                vs.setValue(nv);
                if (nv == dVal || vs.getValue() == val) lrcScrollAnimation = false;
//                });
            }
        });
//        lrcScrollTimer = new Timer(1, e -> {
//
//        });
        globalPanelTimer = new Timer(10, e -> {
            globalPanelExecutor.submit(() -> {
                globalPanel.setOpacity((float) Math.min(1, globalPanel.getOpacity() + 0.05));
                if (globalPanel.getOpacity() >= 1) globalPanelTimer.stop();
            });
        });
//        gcTimer = new Timer(60000, e -> globalExecutor.submit(() -> System.gc()));
//        gcTimer.start();
    }

    // 初始化进度条
    private void timeBarInit() {
        timeBar.setMinimum(TIME_BAR_MIN);
        timeBar.setMaximum(TIME_BAR_MAX);
        timeBar.setValue(TIME_BAR_MIN);
        // 拖动播放时间条
        timeBar.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                if (player.isEmpty()) return;
                double t = player.getMusicInfo().getDuration() * timeBar.getValue() / TIME_BAR_MAX;
                currTimeLabel.setText(TimeUtils.format(t));
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (player.isEmpty()) return;
                double t = player.getMusicInfo().getDuration() * timeBar.getValue() / TIME_BAR_MAX;
                player.seek(t);
                seekLrc(t);
            }
        });
        // 设置进度条最佳大小
        timeBar.setPreferredSize(new Dimension(1100, 20));

        progressPanel.add(currTimeLabel);
        progressPanel.add(timeBar);
        progressPanel.add(durationLabel);
        progressBox.add(progressPanel);
        bottomBox.add(progressBox);
    }

    // 初始化控制面板
    private void controlPanelInit() {
        // changePaneButton 图标遮罩 UI
        ChangePaneButtonUI changePaneButtonUI = new ChangePaneButtonUI();
        changePaneButton.setUI(changePaneButtonUI);
        changePaneButton.setToolTipText(CHANGE_TO_LYRIC_PANE_TIP);
        changePaneButton.setIconTextGap(10);
        changePaneButton.setPreferredSize(new Dimension(280, 66));
        changePaneButton.setText(NO_LRC_MSG);
        changePaneButton.addMouseListener(new ChangePaneButtonMouseListener(changePaneButton, changePaneButtonUI, THIS));
        changePaneButton.addActionListener(e -> {
            // 歌词页面切到歌单
            if (currPane == MusicPane.LYRIC || lastPane == MusicPane.LYRIC) {
                // 清空评论数据
                if (!netCommentListModel.isEmpty()) netCommentListModel.clear();
                if (!netSheetListModel.isEmpty()) netSheetListModel.clear();
                hideDetailButton.setVisible(false);
                globalPanel.remove(infoAndLrcBox);
                globalPanel.remove(netCommentBox);
                globalPanel.remove(netSheetBox);
                globalPanel.add(tabbedPane, BorderLayout.CENTER);
                changePaneButton.setToolTipText(CHANGE_TO_LYRIC_PANE_TIP);
                currPane = MusicPane.MUSIC;
                lastPane = -1;
            }
            // 歌单切到歌词页面
            else if (currPane == MusicPane.MUSIC || lastPane == MusicPane.MUSIC) {
                lrcScrollAnimation = true;
                // 清空评论数据
                if (!netCommentListModel.isEmpty()) netCommentListModel.clear();
                if (!netSheetListModel.isEmpty()) netSheetListModel.clear();
                hideDetailButton.setVisible(true);
                globalPanel.remove(tabbedPane);
                globalPanel.remove(netCommentBox);
                globalPanel.remove(netSheetBox);
                globalPanel.add(infoAndLrcBox, BorderLayout.CENTER);
                changePaneButton.setToolTipText(CHANGE_TO_MUSIC_PANE_TIP);
                currPane = MusicPane.LYRIC;
                lastPane = -1;
            }
            globalPanel.repaint();
        });
        // MV
        mvButton.setToolTipText(MV_TIP);
        mvButton.setEnabled(false);
        mvButton.addMouseListener(new ButtonMouseListener(mvButton, THIS));
        mvButton.setPreferredSize(new Dimension(mvIcon.getIconWidth(), mvIcon.getIconHeight()));
        mvButton.addActionListener(e -> playMv(MvType.PLAYING));
        // 收藏
        collectButton.setToolTipText(COLLECT_TIP);
        collectButton.setEnabled(false);
        collectButton.addMouseListener(new ButtonMouseListener(collectButton, THIS));
        collectButton.setPreferredSize(new Dimension(collectIcon.getIconWidth(), collectIcon.getIconHeight()));
        collectButton.addActionListener(e -> {
            Object o = player.getNetMusicInfo();
            if (o == null) o = player.getMusicInfo().getFile();
            if (!hasBeenCollected(o)) {
                collectionModel.add(0, o);
                collectButton.setIcon(ImageUtils.dye(hasCollectedIcon, currUIStyle.getButtonColor()));
                new TipDialog(THIS, COLLECT_SUCCESS_MSG).showDialog();
            } else {
                collectionModel.removeElement(o);
                collectButton.setIcon(ImageUtils.dye(collectIcon, currUIStyle.getButtonColor()));
                new TipDialog(THIS, CANCEL_COLLECTION_SUCCESS_MSG).showDialog();
            }
        });
        // 下载
        downloadButton.setToolTipText(DOWNLOAD_TIP);
        downloadButton.setEnabled(false);
        downloadButton.addMouseListener(new ButtonMouseListener(downloadButton, THIS));
        downloadButton.setPreferredSize(new Dimension(downloadIcon.getIconWidth(), downloadIcon.getIconHeight()));
        downloadButton.addActionListener(e -> singleDownload(player.getNetMusicInfo()));
        // 评论
        commentButton.setToolTipText(COMMENT_TIP);
        commentButton.setEnabled(false);
        commentButton.addMouseListener(new ButtonMouseListener(commentButton, THIS));
        commentButton.setPreferredSize(new Dimension(commentIcon.getIconWidth(), commentIcon.getIconHeight()));
        commentButton.addActionListener(e -> {
            NetMusicInfo netMusicInfo = player.getNetMusicInfo();
            if (currPane != MusicPane.COMMENT || currCommentObjectInfo != netMusicInfo)
                getComments(netMusicInfo, currPane != MusicPane.COMMENT);
        });
        // 乐谱
        sheetButton.setToolTipText(SHEET_TIP);
        sheetButton.setEnabled(false);
        sheetButton.addMouseListener(new ButtonMouseListener(sheetButton, THIS));
        sheetButton.setPreferredSize(new Dimension(sheetIcon.getIconWidth(), sheetIcon.getIconHeight()));
        sheetButton.addActionListener(e -> {
            NetMusicInfo netMusicInfo = player.getNetMusicInfo();
            if (currPane != MusicPane.SHEET || currSheetMusicInfo != netMusicInfo)
                getSheets(netMusicInfo, currPane != MusicPane.SHEET);
        });
        lastButton.setToolTipText(LAST_TIP);
        lastButton.addMouseListener(new ButtonMouseListener(lastButton, THIS));
        lastButton.setPreferredSize(new Dimension(lastIcon.getIconWidth(), lastIcon.getIconHeight()));
        lastButton.addActionListener(e -> playLast());
        playOrPauseButton.setToolTipText(PLAY_TIP);
        playOrPauseButton.setPreferredSize(new Dimension(playIcon.getIconWidth(), playIcon.getIconHeight()));
        playOrPauseButton.addMouseListener(new ButtonMouseListener(playOrPauseButton, THIS));
        playOrPauseButton.addActionListener(e -> playOrPause());
        nextButton.setToolTipText(NEXT_TIP);
        nextButton.addMouseListener(new ButtonMouseListener(nextButton, THIS));
        nextButton.setPreferredSize(new Dimension(nextIcon.getIconWidth(), nextIcon.getIconHeight()));
        nextButton.addActionListener(e -> {
            // 单曲循环和顺序播放，都播放下一首
            if (currPlayMode != PlayMode.SHUFFLE) {
                playNext();
            }
            // 随机播放
            else {
                // 播放下一个随机
                playNextShuffle();
            }
        });
        // 默认提示语为“列表循环”
        playModeButton.setToolTipText(LIST_CYCLE_TIP);
        playModeButton.addMouseListener(new ButtonMouseListener(playModeButton, THIS));
        playModeButton.setPreferredSize(new Dimension(listCycleIcon.getIconWidth(), listCycleIcon.getIconHeight()));
        // 播放模式切换事件
        playModeButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                int h = playModePopupMenu.getHeight();
                playModePopupMenu.show(playModeButton, e.getX(), e.getY() - (h == 0 ? 177 : h));
            }
        });
        // 播放模式弹出菜单
        singleMenuItem.addActionListener(e -> {
            if (currPlayMode != PlayMode.SINGLE) changeToSingle(true);
        });
        sequenceMenuItem.addActionListener(e -> {
            if (currPlayMode != PlayMode.SEQUENCE) changeToSequence(true);
        });
        listCycleMenuItem.addActionListener(e -> {
            if (currPlayMode != PlayMode.LIST_CYCLE) changeToListCycle(true);
        });
        shuffleMenuItem.addActionListener(e -> {
            if (currPlayMode != PlayMode.SHUFFLE) changeToShuffle(true);
        });

        playModePopupMenu.add(singleMenuItem);
        playModePopupMenu.add(sequenceMenuItem);
        playModePopupMenu.add(listCycleMenuItem);
        playModePopupMenu.add(shuffleMenuItem);

        backwardButton.setToolTipText(BACKW_TIP);
        backwardButton.addMouseListener(new ButtonMouseListener(backwardButton, THIS));
        backwardButton.setPreferredSize(new Dimension(backwIcon.getIconWidth(), backwIcon.getIconHeight()));
        forwardButton.setToolTipText(FORW_TIP);
        forwardButton.addMouseListener(new ButtonMouseListener(forwardButton, THIS));
        forwardButton.setPreferredSize(new Dimension(forwIcon.getIconWidth(), forwIcon.getIconHeight()));
        // 快进快退
        backwardButton.addActionListener(e -> {
            player.backward(forwardOrBackwardTime);
            seekLrc(player.getCurrTimeSeconds() - forwardOrBackwardTime);

        });
        forwardButton.addActionListener(e -> {
            player.forward(forwardOrBackwardTime);
            seekLrc(player.getCurrTimeSeconds() + forwardOrBackwardTime);
        });
        // 静音
        muteButton.setToolTipText(SOUND_TIP);
        muteButton.addMouseListener(new ButtonMouseListener(muteButton, THIS));
        muteButton.setPreferredSize(new Dimension(muteIcon.getIconWidth(), muteIcon.getIconHeight()));
        muteButton.addActionListener(e -> {
            if (isMute = !isMute) {
                muteButton.setToolTipText(MUTE_TIP);
                muteButton.setIcon(ImageUtils.dye(muteIcon, currUIStyle.getButtonColor()));
            } else {
                muteButton.setToolTipText(SOUND_TIP);
                muteButton.setIcon(ImageUtils.dye(soundIcon, currUIStyle.getButtonColor()));
            }
            player.setMute(isMute);
        });
        // 音量调节滑动条
        volumeSlider.setPreferredSize(new Dimension(100, 12));
        volumeSlider.setMaximum(MAX_VOLUME);
        volumeSlider.setValue(DEFAULT_VOLUME);
        volumeSlider.addChangeListener(e -> {
            player.setVolume((float) volumeSlider.getValue() / MAX_VOLUME);
            if (isMute) {
                muteButton.setToolTipText(SOUND_TIP);
                muteButton.setIcon(ImageUtils.dye(soundIcon, currUIStyle.getButtonColor()));
                player.setMute(isMute = false);
            }
        });
        // 倍速菜单和按钮
//        for (CustomRadioButtonMenuItem menuItem : rateMenuItems) {
//            menuItem.addActionListener(e -> {
//                getPlayer().setRate(currRate = Double.parseDouble(menuItem.getText().replace("x", "")));
//                updateMenuItemIcon(ratePopupMenu);
//            });
//            rateMenuItemsButtonGroup.add(menuItem);
//            ratePopupMenu.add(menuItem);
//        }
        rateButton.setToolTipText(RATE_TIP);
        rateButton.addMouseListener(new ButtonMouseListener(rateButton, THIS));
        rateButton.setPreferredSize(new Dimension(rateIcon.getIconWidth(), rateIcon.getIconHeight()));
//        rateButton.setComponentPopupMenu(ratePopupMenu);
//        rateButton.addMouseListener(new MouseAdapter() {
//            @Override
//            public void mouseReleased(MouseEvent e) {
//                ratePopupMenu.show(rateButton, e.getX(), e.getY());
//            }
//        });
        rateButton.addActionListener(e -> {
            RateDialog rd = new RateDialog(THIS, null, rateButton);
            rd.showDialog();
        });
        // 频谱开关按钮
        switchSpectrumButton.setToolTipText(SWITCH_SPECTRUM_TIP);
        switchSpectrumButton.addMouseListener(new ButtonMouseListener(switchSpectrumButton, THIS));
        switchSpectrumButton.setPreferredSize(new Dimension(spectrumOnIcon.getIconWidth(), spectrumOnIcon.getIconHeight()));
        switchSpectrumButton.addActionListener(e -> {
            if (showSpectrum = !showSpectrum) openSpectrum();
            else closeSpectrum();
            switchSpectrumButton.setIcon(ImageUtils.dye(showSpectrum ? spectrumOnIcon : spectrumOffIcon, currUIStyle.getButtonColor()));
        });
        // 模糊菜单
        blurPopupMenu.add(gsMenuItem);
        blurPopupMenu.add(darkerMenuItem);
        blurPopupMenu.addSeparator();
        blurPopupMenu.add(blurOffMenuItem);
        blurPopupMenu.add(cvBlurMenuItem);
        blurPopupMenu.add(mcBlurMenuItem);
        blurPopupMenu.add(lgBlurMenuItem);
        gsMenuItem.addActionListener(e -> {
            gsOn = !gsOn;
            gsMenuItem.setIcon(gsOn ? ImageUtils.dye(tickIcon, currUIStyle.getMenuItemColor()) : null);
            if (blurType == BlurType.OFF) doStyleBlur(currUIStyle);
            else doBlur();
        });
        darkerMenuItem.addActionListener(e -> {
            darkerOn = !darkerOn;
            darkerMenuItem.setIcon(darkerOn ? ImageUtils.dye(tickIcon, currUIStyle.getMenuItemColor()) : null);
            if (blurType == BlurType.OFF) doStyleBlur(currUIStyle);
            else doBlur();
        });
        blurOffMenuItem.addActionListener(e -> {
            blurType = BlurType.OFF;
            doStyleBlur(currUIStyle);
            blurButton.setIcon(ImageUtils.dye(blurOffIcon, currUIStyle.getButtonColor()));
        });
        cvBlurMenuItem.addActionListener(e -> {
            blurType = BlurType.CV;
            doBlur();
            blurButton.setIcon(ImageUtils.dye(cvBlurIcon, currUIStyle.getButtonColor()));
        });
        mcBlurMenuItem.addActionListener(e -> {
            blurType = BlurType.MC;
            doBlur();
            blurButton.setIcon(ImageUtils.dye(mcBlurIcon, currUIStyle.getButtonColor()));
        });
        lgBlurMenuItem.addActionListener(e -> {
            blurType = BlurType.LG;
            doBlur();
            blurButton.setIcon(ImageUtils.dye(lgBlurIcon, currUIStyle.getButtonColor()));
        });
        // 模糊按钮
        blurButton.setToolTipText(SWITCH_BLUR_TIP);
        blurButton.addMouseListener(new ButtonMouseListener(blurButton, THIS));
        blurButton.setPreferredSize(new Dimension(cvBlurIcon.getIconWidth(), cvBlurIcon.getIconHeight()));
        blurButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                int h = blurPopupMenu.getHeight();
                blurPopupMenu.show(blurButton, e.getX(), e.getY() - (h == 0 ? 239 : h));
            }
        });
        // 音效按钮
        soundEffectButton.setToolTipText(SOUND_EFFECT_TIP);
        soundEffectButton.addMouseListener(new ButtonMouseListener(soundEffectButton, THIS));
        soundEffectButton.setPreferredSize(new Dimension(soundEffectIcon.getIconWidth(), soundEffectIcon.getIconHeight()));
        soundEffectButton.addActionListener(e -> new SoundEffectDialog(THIS, true).showDialog());
        // 跳到播放队列按钮
        goToPlayQueueButton.setToolTipText(GO_TO_PLAY_QUEUE_TIP);
        goToPlayQueueButton.setPreferredSize(new Dimension(goToPlayQueueIcon.getIconWidth(), goToPlayQueueIcon.getIconHeight()));
        goToPlayQueueButton.addMouseListener(new ButtonMouseListener(goToPlayQueueButton, THIS));
        goToPlayQueueButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                tabbedPane.setSelectedIndex(TabIndex.PLAY_QUEUE);
                // 清空评论数据
                if (!netCommentListModel.isEmpty()) netCommentListModel.clear();
                hideDetailButton.setVisible(false);
                globalPanel.remove(infoAndLrcBox);
                globalPanel.remove(netCommentBox);
                globalPanel.add(tabbedPane, BorderLayout.CENTER);
                changePaneButton.setToolTipText(CHANGE_TO_LYRIC_PANE_TIP);
                globalPanel.repaint();
                currPane = MusicPane.MUSIC;
            }
        });
        // 桌面歌词开关
        desktopLyricButton.setToolTipText(DESKTOP_LRC_TIP);
        desktopLyricButton.addMouseListener(new ButtonMouseListener(desktopLyricButton, THIS));
        desktopLyricButton.setPreferredSize(new Dimension(desktopLyricOnIcon.getIconWidth(), desktopLyricOnIcon.getIconHeight()));
        desktopLyricButton.addActionListener(e -> {
            if (showDesktopLyric = !showDesktopLyric) {
                // 最大化时不显示桌面歌词
                desktopLyricDialog.setVisible(windowState != WindowState.MAXIMIZED);
                desktopLyricButton.setIcon(ImageUtils.dye(desktopLyricOnIcon, currUIStyle.getButtonColor()));
            } else {
                desktopLyricDialog.setVisible(false);
                desktopLyricButton.setIcon(ImageUtils.dye(desktopLyricOffIcon, currUIStyle.getButtonColor()));
            }
        });
        // 繁简切换按钮
        switchChineseButton.setToolTipText(SWITCH_CHINESE_TIP);
        switchChineseButton.addMouseListener(new ButtonMouseListener(switchChineseButton, THIS));
        switchChineseButton.setPreferredSize(new Dimension(tradChineseIcon.getIconWidth(), tradChineseIcon.getIconHeight()));
        switchChineseButton.addActionListener(e -> {
            // 切换到繁体
            if (currChineseType == ChineseType.SIMPLIFIED) {
                if (nextLrc >= 0)
                    for (Statement stmt : statements) stmt.setLyric(StringUtils.toTraditionalChinese(stmt.getLyric()));
                switchChineseButton.setIcon(ImageUtils.dye(tradChineseIcon, currUIStyle.getButtonColor()));
                currChineseType = ChineseType.TRADITIONAL;
            }
            // 切换到简体
            else if (currChineseType == ChineseType.TRADITIONAL) {
                currChineseType = ChineseType.SIMPLIFIED;
                if (nextLrc >= 0)
                    // 切换简体只是重新加载歌词！
                    loadLrc(player.getMusicInfo().getFile(), player.getNetMusicInfo(), true, currLrcType == LyricType.TRANSLATION);
                switchChineseButton.setIcon(ImageUtils.dye(simpChineseIcon, currUIStyle.getButtonColor()));
            }
            if (nextLrc >= 0) seekLrc(player.getCurrTimeSeconds());
        });
        // 日文罗马音切换按钮
        switchJapaneseButton.setToolTipText(SWITCH_JAPANESE_TIP);
        switchJapaneseButton.addMouseListener(new ButtonMouseListener(switchJapaneseButton, THIS));
        switchJapaneseButton.setPreferredSize(new Dimension(kanaIcon.getIconWidth(), kanaIcon.getIconHeight()));
        switchJapaneseButton.addActionListener(e -> {
            // 切换到罗马音
            if (currJapaneseType == JapaneseType.KANA) {
                currJapaneseType = JapaneseType.ROMAJI;
                if (nextLrc >= 0) {
                    // 使用已有的罗马音歌词
                    if (player.isPlayingNetMusic() && player.getNetMusicInfo().hasRoma()) {
                        loadLrc(player.getMusicInfo().getFile(), player.getNetMusicInfo(), true, false);
                    } else {
                        for (Statement stmt : statements) stmt.setLyric(StringUtils.toRomaji(stmt.getLyric()));
                    }
                }
                switchJapaneseButton.setIcon(ImageUtils.dye(romajiIcon, currUIStyle.getButtonColor()));
            }
            // 切换到日语
            else if (currJapaneseType == JapaneseType.ROMAJI) {
                currJapaneseType = JapaneseType.KANA;
                if (nextLrc >= 0)
                    // 切换简体只是重新加载歌词！
                    loadLrc(player.getMusicInfo().getFile(), player.getNetMusicInfo(), true, currLrcType == LyricType.TRANSLATION);
                switchJapaneseButton.setIcon(ImageUtils.dye(kanaIcon, currUIStyle.getButtonColor()));
            }
            if (nextLrc >= 0) seekLrc(player.getCurrTimeSeconds());
        });
        // 歌词原文/翻译切换按钮
        switchLrcTypeButton.setToolTipText(SWITCH_LRC_TYPE_TIP);
        switchLrcTypeButton.addMouseListener(new ButtonMouseListener(switchLrcTypeButton, THIS));
        switchLrcTypeButton.setPreferredSize(new Dimension(originalIcon.getIconWidth(), originalIcon.getIconHeight()));
        switchLrcTypeButton.addActionListener(e -> {
            // 切换到翻译
            if (currLrcType == LyricType.ORIGINAL) {
                currLrcType = LyricType.TRANSLATION;
                if (nextLrc >= 0)
                    // 重新加载歌词
                    loadLrc(player.getMusicInfo().getFile(), player.getNetMusicInfo(), true, true);
                switchLrcTypeButton.setIcon(ImageUtils.dye(translationIcon, currUIStyle.getButtonColor()));
            }
            // 切换到原歌词
            else if (currLrcType == LyricType.TRANSLATION) {
                currLrcType = LyricType.ORIGINAL;
                if (nextLrc >= 0)
                    // 重新加载歌词
                    loadLrc(player.getMusicInfo().getFile(), player.getNetMusicInfo(), true, false);
                switchLrcTypeButton.setIcon(ImageUtils.dye(originalIcon, currUIStyle.getButtonColor()));
            }
            if (nextLrc >= 0) seekLrc(player.getCurrTimeSeconds());
        });
        // 按钮水平隔开一段间距
        FlowLayout fl = new FlowLayout();
        fl.setHgap(10);
        controlPanel.setLayout(fl);
        controlPanel.setBorder(BorderFactory.createEmptyBorder(8, 0, 0, 12));
        controlPanel.add(backwardButton);
        controlPanel.add(lastButton);
        controlPanel.add(playOrPauseButton);
        controlPanel.add(nextButton);
        controlPanel.add(forwardButton);
        controlPanel.add(playModeButton);
        volumePanel.add(muteButton);
        volumePanel.add(volumeSlider);
        controlPanel.add(volumePanel);
        controlPanel.add(rateButton);
        controlPanel.add(switchSpectrumButton);
        controlPanel.add(blurButton);
        controlPanel.add(soundEffectButton);
        controlPanel.add(goToPlayQueueButton);

        fl = new FlowLayout();
        fl.setHgap(10);
        changePanePanel.setLayout(fl);
        changePanePanel.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 0));
        changePanePanel.add(changePaneButton);
        changePanePanel.add(mvButton);
        changePanePanel.add(collectButton);
        changePanePanel.add(downloadButton);
        changePanePanel.add(commentButton);
        changePanePanel.add(sheetButton);

        fl = new FlowLayout();
        fl.setHgap(6);
        controlLrcPanel.setLayout(fl);
        controlLrcPanel.setBorder(BorderFactory.createEmptyBorder(23, 0, 0, 0));
        controlLrcPanel.add(desktopLyricButton);
        controlLrcPanel.add(switchLrcTypeButton);
        controlLrcPanel.add(switchChineseButton);
        controlLrcPanel.add(switchJapaneseButton);

        controlBox.add(changePanePanel);
        controlBox.add(Box.createHorizontalGlue());
        controlBox.add(controlPanel);
        controlBox.add(Box.createHorizontalGlue());
        controlBox.add(controlLrcPanel);
        controlBox.add(Box.createHorizontalGlue());
        bottomBox.add(controlBox);
        globalPanel.add(bottomBox, BorderLayout.SOUTH);
    }

    // 准备播放，初始化播放器和 UI
    private void prepareToPlay(AudioFile file, NetMusicInfo netMusicInfo) throws IOException, UnsupportedAudioFileException, InterruptedException, EncoderException, InvalidDataException, UnsupportedTagException, URISyntaxException {
        player.load(file, netMusicInfo);
        clearLrc();
        loadLrc(file, netMusicInfo, false, currLrcType == LyricType.TRANSLATION);
        loadUI(file, netMusicInfo);
    }

    // 卸载当前文件
    private void unload() {
        player.unload();
        try {
            unloadUI();
        } catch (IOException e) {
            e.printStackTrace();
        }
        clearLrc();
    }

    // 界面加载新文件
    private void loadUI(AudioFile file, NetMusicInfo netMusicInfo) {
        // 重置标题
        String title = TITLE + "（正在播放：" + (netMusicInfo != null ? netMusicInfo.toSimpleString() : file) + "）";
        titleLabel.setText(StringUtils.textToHtml(title));
        setTitle(title);
        // 重置当前播放时间
        currTimeLabel.setText(player.getCurrTimeString());
        timeBar.setValue(TIME_BAR_MIN);
        // 重置总时间
        durationLabel.setText(player.getDurationString());
        // 设置当前播放时间标签的最佳大小，避免导致进度条长度发生变化！
        String t = durationLabel.getText().replaceAll("[1-9]", "0");
        FontMetrics m = durationLabel.getFontMetrics(globalFont);
        Dimension d = new Dimension(m.stringWidth(t) + 2, durationLabel.getHeight());
        currTimeLabel.setPreferredSize(d);
        durationLabel.setPreferredSize(d);
        // 重置为“播放”
        playOrPauseButton.setIcon(ImageUtils.dye(playIcon, currUIStyle.getButtonColor()));
        playOrPauseButton.setToolTipText(PLAY_TIP);
        if (miniDialog != null) {
            miniDialog.playOrPauseButton.setIcon(playOrPauseButton.getIcon());
            miniDialog.playOrPauseButton.setToolTipText(playOrPauseButton.getToolTipText());
        }
        // 重置桌面歌词
        desktopLyricDialog.setLyric(NO_LRC_MSG, 0);
        // 允许“关闭当前歌曲”
        closeSong.setEnabled(true);
        // 开启频谱动画
        if (showSpectrum) openSpectrum();
        // 开启歌词动画
        if (!lrcTimer.isRunning()) lrcTimer.start();

        // 设置切换面板文字
        final int maxLen = 34;
        if (netMusicInfo != null)
            changePaneButton.setText(StringUtils.textToHtml(StringUtils.shorten(netMusicInfo.toSimpleString(), maxLen)));
        else
            changePaneButton.setText(StringUtils.textToHtml(StringUtils.shorten(file.toString(), maxLen)));
        if (miniDialog != null) miniDialog.infoLabel.setText(changePaneButton.getText());
        // 设置 MV、收藏、下载、评论、乐谱按钮
        mvButton.setEnabled(netMusicInfo != null && netMusicInfo.hasMv());
        collectButton.setEnabled(true);
        downloadButton.setEnabled(netMusicInfo != null);
        commentButton.setEnabled(netMusicInfo != null);
        sheetButton.setEnabled(netMusicInfo != null);
        if (netMusicInfo != null && hasBeenCollected(netMusicInfo) || hasBeenCollected(file))
            collectButton.setIcon(ImageUtils.dye(hasCollectedIcon, currUIStyle.getButtonColor()));
        else
            collectButton.setIcon(ImageUtils.dye(collectIcon, currUIStyle.getButtonColor()));
        // 设置歌曲名称
        songNameLabel.setText(StringUtils.textToHtml(SONG_NAME_LABEL + player.getMusicInfo().getName()));
        songNameLabel.setVisible(false);
        songNameLabel.setVisible(true);
        // 设置艺术家
        artistLabel.setText(StringUtils.textToHtml(ARTIST_LABEL + player.getMusicInfo().getArtist()));
        artistLabel.setVisible(false);
        artistLabel.setVisible(true);
        // 设置专辑名称
        albumLabel.setText(StringUtils.textToHtml(ALBUM_NAME_LABEL + player.getMusicInfo().getAlbumName()));
        albumLabel.setVisible(false);
        albumLabel.setVisible(true);
    }

    // 界面关闭文件
    private void unloadUI() throws IOException {
        // 重置标题
        updateMotto();
        setTitle(TITLE);
        // 重置当前播放时间
        currTimeLabel.setText(DEFAULT_TIME);
        // 重置总时间
        durationLabel.setText(DEFAULT_TIME);
        // 重置为“播放”
        playOrPauseButton.setIcon(ImageUtils.dye(playIcon, currUIStyle.getButtonColor()));
        playOrPauseButton.setToolTipText(PLAY_TIP);
        // 重置播放进度条
        timeBar.setValue(TIME_BAR_MIN);
        // 重置桌面歌词
        desktopLyricDialog.setLyric(NO_LRC_MSG, 0);
        // 禁止“关闭当前歌曲”
        closeSong.setEnabled(false);
        // 关闭频谱动画
        closeSpectrum();
        // 关闭歌词动画
        lrcTimer.stop();

        // 卸载专辑图片
        albumImageLabel.setIcon(null);
        changePaneButton.setIcon(ImageUtils.dye(
                new ImageIcon(ImageUtils.setRadius(ImageUtils.width(defaultAlbumImage, changePaneImageWidth), TINY_ARC)),
                currUIStyle.getButtonColor()));
        changePaneButton.setText(NO_LRC_MSG);
        if (miniDialog != null) {
            miniDialog.infoLabel.setIcon(changePaneButton.getIcon());
            miniDialog.infoLabel.setText(changePaneButton.getText());
        }
        // 恢复背景
        if (blurType != BlurType.OFF) doStyleBlur(currUIStyle);
        // 禁止 MV、收藏、下载、评论、乐谱
        mvButton.setEnabled(false);
        collectButton.setEnabled(false);
        downloadButton.setEnabled(false);
        commentButton.setEnabled(false);
        sheetButton.setEnabled(false);
        // 设置歌曲名称
        songNameLabel.setText("");
        // 设置艺术家
        artistLabel.setText("");
        // 设置专辑名称
        albumLabel.setText("");
    }

    // 加载专辑图片
//    private void loadAlbumImage() {
//        // 设置为默认专辑图片
//        saveAlbumImageMenuItem.setEnabled(false);
//        BufferedImage img = ImageUtils.width(ImageUtils.cropCenter(defaultAlbumImage), albumImageWidth);
//        albumImageLabel.setIcon(
//                ImageUtils.dye(new ImageIcon(ImageUtils.borderShadow(ImageUtils.setRadius(img, LARGE_ARC))), currUIStyle.getLabelColor())
//        );
//        changePaneButton.setIcon(
//                ImageUtils.dye(new ImageIcon(ImageUtils.setRadius(ImageUtils.width(img, changePaneImageWidth), TINY_ARC)), currUIStyle.getLabelColor())
//        );
//        if (miniDialog != null) miniDialog.infoLabel.setIcon(changePaneButton.getIcon());
//
//        SimpleMusicInfo simpleMusicInfo = player.getMusicInfo();
//
//        if (!simpleMusicInfo.hasAlbumImage())
//            simpleMusicInfo.setInvokeLater(() -> showAlbumImage());
//        else showAlbumImage();
//    }

    // 显示专辑图片
    public void showAlbumImage() {
        SimpleMusicInfo simpleMusicInfo = player.getMusicInfo();
        BufferedImage albumImage = simpleMusicInfo.getAlbumImage();
        boolean isDefault = albumImage == defaultAlbumImage;
        saveAlbumImageMenuItem.setEnabled(!isDefault);
        // 专辑图片显示原本大小图片的一个缩小副本，并设置圆角
        BufferedImage image = ImageUtils.width(ImageUtils.cropCenter(albumImage), albumImageWidth);
        if (isDefault) image = ImageUtils.dye(image, currUIStyle.getLabelColor());
        albumImageLabel.setIcon(new ImageIcon(ImageUtils.borderShadow(ImageUtils.setRadius(image, LARGE_ARC))));
        // 切换面板专辑图片
        changePaneButton.setIcon(new ImageIcon(ImageUtils.setRadius(ImageUtils.width(image, changePaneImageWidth), TINY_ARC)));
        if (miniDialog != null) miniDialog.infoLabel.setIcon(changePaneButton.getIcon());
        // 背景模糊
        if (blurType != BlurType.OFF) doBlur();
    }

    // 清空歌词
    private void clearLrc() {
        // 解决 CustomList 选中第一行更新缓慢的 BUG
//        lrcList.setModel(emptyListModel);
        lrcListModel.clear();
        if (statements != null) statements.clear();
        nextLrc = NextLrc.NOT_EXISTS;
    }

    // 加载歌词(如果有)
    private void loadLrc(AudioFile file, NetMusicInfo netMusicInfo, boolean reload, boolean loadTrans) {
        LrcData lrcData, transData = null, romaData = null;
        String lrcPath = null, lrc = null;
        boolean isFile = netMusicInfo == null;
        try {
            if (isFile) {
                lrcPath = FileUtils.getPathWithoutSuffix(file) + ".lrc";
                lrcData = new LrcData(lrcPath, true);
                // 获取 lrc 文件内容
                lrcStr = null;
                transStr = null;
            } else {
                lrc = netMusicInfo.getLrc();
                if ("".equals(lrc.trim())) throw new NoLyricException("歌词是一个空串");
                lrcData = new LrcData(lrc, false);
                // 获取 lrc 文件内容
                lrcStr = lrcData.getLrcStr();
                // 将翻译内容也读出来
                if (netMusicInfo.hasTrans()) {
                    transData = new LrcData(netMusicInfo.getTrans(), false);
                    transStr = transData.getLrcStr();
                } else transStr = null;
                // 将罗马音也读出来
                if (netMusicInfo.hasRoma()) romaData = new LrcData(netMusicInfo.getRoma(), false);
            }
            if (!isFile)
                statements = loadTrans && transData != null ? transData.getStatements() : lrcData.getStatements();
            else statements = loadTrans && lrcData.hasTrans() ? lrcData.getTransStatements() : lrcData.getStatements();
            if (statements.isEmpty())
                throw new NoLyricException("歌词是一个空串");
            // 繁简切换，简体时不动
            if (currChineseType == ChineseType.TRADITIONAL) {
                for (Statement stmt : statements) stmt.setLyric(StringUtils.toTraditionalChinese(stmt.getLyric()));
            }
            // 日文/罗马音切换，日文时不动
            if (currJapaneseType == JapaneseType.ROMAJI && !loadTrans) {
                // 使用已有的罗马音歌词
                if (!isFile && netMusicInfo.hasRoma()) statements = romaData.getStatements();
                else
                    for (Statement stmt : statements) stmt.setLyric(StringUtils.toRomaji(stmt.getLyric()));
            }
            lrcList.setModel(emptyLrcListModel);
            if (reload) lrcListModel.clear();
            // 添加空白充数
            Statement empty = new Statement(0, " ");
            for (int i = 0; i < LRC_INDEX; i++) lrcListModel.addElement(empty);
            for (Statement stmt : statements) {
                lrcListModel.addElement(empty);
                lrcListModel.addElement(stmt);
            }
            for (int i = 0; i < LRC_INDEX + 5; i++) lrcListModel.addElement(empty);
            nextLrc = 0;
            row = LRC_INDEX - 1;
        }
        // 无歌词或歌词文件损坏/不支持滚动
        catch (IOException | NullPointerException | NoLyricException e) {
            boolean fileExists = false;
            File f;
            if (lrcPath != null) {
                f = new File(lrcPath);
                fileExists = f.exists();
            }
            boolean isBadFormat = fileExists || StringUtils.isNotEmpty(lrc);
            // 本地歌曲歌词不支持滚动时不需要写入 lrcStr
            lrcStr = isBadFormat && !fileExists ? lrc : null;
//            lrcStr = isBadFormat ? (fileExists ? FileUtils.readAsStr(f) : lrc) : null;

            statements = isBadFormat ? FileUtils.getBadFormatStatements(fileExists ? lrcPath : lrc, fileExists) : new Vector<>();
            if (!reload) {
                // 添加空白充数
                Statement empty = new Statement(0, " ");
                for (int i = 0; i < LRC_INDEX; i++) lrcListModel.addElement(empty);
                lrcListModel.addElement(new Statement(0, isBadFormat ? BAD_FORMAT_LRC_MSG : NO_LRC_MSG));
                for (Statement stmt : statements) {
                    lrcListModel.addElement(empty);
                    lrcListModel.addElement(stmt);
                }
                for (int i = 0; i < LRC_INDEX; i++) lrcListModel.addElement(empty);
            }
            // 标记为无歌词 / 不支持滚动
            nextLrc = isBadFormat ? NextLrc.BAD_FORMAT : NextLrc.NOT_EXISTS;
            row = LRC_INDEX;
        } finally {
            originalRatio.set(0);
            lrcScrollPane.getVerticalScrollBar().setValue(currScrollVal = 0);
            if (!reload) {
                // 更新歌词面板渲染
                TranslucentLrcListRenderer renderer = (TranslucentLrcListRenderer) lrcList.getCellRenderer();
                renderer.setRow(row);
            }
            lrcList.setModel(lrcListModel);
        }
    }

    // 开启监控播放器状态的事件，在载入音乐文件后调用
    public void loadMonitor(MediaPlayer mp) {
        mp.setOnError(() -> {
            MediaException.Type type = mp.getError().getType();
            NetMusicInfo netMusicInfo = player.getNetMusicInfo();
            // 耳机取下导致的播放异常 或者 转格式后的未知异常，重新播放
            if (type == MediaException.Type.PLAYBACK_HALTED || type == MediaException.Type.UNKNOWN && netMusicInfo.isFlac()) {
//                Duration ct = mp.getCurrentTime();
                player.initialMp(player.getMusicInfo().getFile(), netMusicInfo);
                playLoaded(false);
                seekLrc(0);
//                mp.seek(ct);
            }
            // 歌曲 url 过期后重新加载 url 再播放
            else if (type == MediaException.Type.MEDIA_INACCESSIBLE || type == MediaException.Type.UNKNOWN) {
                playExecutor.submit(() -> {
                    netMusicInfo.setUrl(MusicServerUtils.fetchMusicUrl(netMusicInfo.getId(), netMusicInfo.getSource()));
                    player.initialMp(null, netMusicInfo);
                    playLoaded(false);
                    seekLrc(0);
                });
            }
        });
        // 频谱监听器
        mp.setAudioSpectrumListener(new AudioSpectrumListener() {
            @Override
            public void spectrumDataUpdate(double timestamp, double duration, float[] magnitudes, float[] phases) {
                double[] specs = player.getSpecs();
                double[] specsOrigin = player.getSpecsOrigin();
                double[] specsGap = player.getSpecsGap();
                final int barNum = SpectrumConstants.BAR_NUM, nFactor = barNum - 30, numBands = SpectrumConstants.NUM_BANDS, maxHeight = SpectrumConstants.BAR_MAX_HEIGHT;
                double avg = 0;
                for (int i = 0; i < numBands; i++) {
                    int mult = i / barNum;
                    int n = mult % 2 == 0 ? (i - barNum * mult) : (barNum - (i - barNum * mult));
                    int spectrum = n > nFactor ? 0 : (int) SpectrumUtils.handleMagnitude(magnitudes[n + 20]);
                    avg += spectrum * 1.2;
                }
                avg = avg / numBands * 1.4 / barNum + 0.42;
                for (int i = 0; i < barNum; i++) {
                    double h = Math.min(maxHeight, SpectrumUtils.handleMagnitude(magnitudes[i]) * avg);
                    specsOrigin[i] = h;
                    specsGap[i] = Math.abs(specsOrigin[i] - specs[i]);
                }
//                for (int i = 0, num = specsOrigin.length; i < num; i++) {
//                    specsOrigin[i] = SpectrumUtils.handleMagnitude(magnitudes[i]);
//                    specsGap[i] = Math.abs(specsOrigin[i] - specs[i]);
//                }
            }
        });
        // 缓冲时间改变后刷新进度条
        mp.bufferProgressTimeProperty().addListener(l -> timeBar.repaint());
        mp.currentTimeProperty().addListener(l -> {
            // 随着播放，设置进度条和时间标签的值
            try {
                // 未被操作时频繁更新时间条
                if (!timeBar.getValueIsAdjusting()) timeBar.setValue((int) (player.getCurrScale() * TIME_BAR_MAX));
                currTimeLabel.setText(player.getCurrTimeString());
                // 监听并更新歌词(若有歌词)
                if (nextLrc >= 0) {
                    double currTimeSeconds = player.getCurrTimeSeconds();
                    // 判断是否该高亮下一行歌词
                    if (nextLrc < statements.size() && currTimeSeconds >= statements.get(nextLrc).getTime() + lrcOffset) {
                        // 删除第一行歌词，整体往上移
//                        lrcListModel.set(LRC_INDEX - 7, lrcListModel.get(LRC_INDEX - 5));
//                        lrcListModel.set(LRC_INDEX - 5, lrcListModel.get(LRC_INDEX - 3));
//                        lrcListModel.set(LRC_INDEX - 3, lrcListModel.get(LRC_INDEX - 1));
//                        lrcListModel.set(LRC_INDEX + 1, nextLrc + 1 < statements.size() ? statements.get(nextLrc + 1) : new Statement(0, " "));
//                        lrcListModel.set(LRC_INDEX + 3, nextLrc + 2 < statements.size() ? statements.get(nextLrc + 2) : new Statement(0, " "));
//                        lrcListModel.set(LRC_INDEX + 5, nextLrc + 3 < statements.size() ? statements.get(nextLrc + 3) : new Statement(0, " "));
//                        lrcListModel.set(LRC_INDEX - 1, statements.get(nextLrc++));
                        row = LRC_INDEX + 1 + nextLrc * 2;
                        if (!lrcScrollAnimation && !lrcScrollWait) {
                            currScrollVal = lrcScrollPane.getVerticalScrollBar().getValue();
                            lrcScrollAnimation = true;
                        }
                        TranslucentLrcListRenderer renderer = (TranslucentLrcListRenderer) lrcList.getCellRenderer();
                        renderer.setRow(row);
                        nextLrc++;
                        originalRatio.set(0);
                        return;
                    }
                    // 每一句歌词最后一个 originalRatio 设成 1 避免歌词滚动不完整！
                    if (nextLrc > 0 && nextLrc < statements.size() && currTimeSeconds + 0.15 > statements.get(nextLrc).getTime() + lrcOffset)
                        originalRatio.set(1);
                    else {
                        double tempRatio = nextLrc > 0 ? (currTimeSeconds - statements.get(nextLrc - 1).getTime() - lrcOffset) /
                                ((statements.get(nextLrc - 1).hasEndTime() ? statements.get(nextLrc - 1).getEndTime() + lrcOffset
                                        : (nextLrc < statements.size() ? statements.get(nextLrc).getTime() + lrcOffset
                                        : player.getDurationSeconds())) - statements.get(nextLrc - 1).getTime() - lrcOffset) : 0;
                        originalRatio.set(tempRatio > 1 ? (statements.get(nextLrc - 1).hasEndTime() ? 1 : 0) : tempRatio);
                    }
//                    ((TranslucentLrcListRenderer) lrcList.getCellRenderer()).setRatio(ratio);
//                    // 重绘歌词列表避免其不刷新！
//                    lrcList.repaint();
//                    // 桌面歌词随之更新
//                    if (nextLrc >= 0)
//                        desktopLyricDialog.setLyric(statements.get(nextLrc - 1 >= 0 ? nextLrc - 1 : nextLrc).getLyric(), ratio);
                }
            } catch (NullPointerException | ArrayIndexOutOfBoundsException e) {

            }
//            Color labelColor = currUIStyle.getLabelColor();
//            Color brighterColor = labelColor.brighter(), darkerColor = ColorUtils.darker(labelColor);
//            if(newColor!=null) {
//                newColor = new Color(Math.min(newColor.getRed()-step, 255),Math.min(newColor.getGreen()-step, 255),Math.min(newColor.getBlue()-step, 255));
//                if(newColor.getRed() < darkerColor.getRed() || newColor.getRed() >= brighterColor.getRed() && newColor.getGreen() >= brighterColor.getGreen()
//                && newColor.getBlue()>=brighterColor.getBlue()) step=-step;
//            }
//            else newColor = labelColor;
//            titleLabel.setIcon(ImageUtils.dye(titleIcon, newColor));
//            try {
//                BufferedImage titleBufferedImage = ImageUtils.castImageIconToBuffedImageTranslucent(titleIcon);
//                titleBufferedImage = Thumbnails.of(titleBufferedImage).scale(1).rotate(degree).asBufferedImage();
//                int w = titleBufferedImage.getWidth(), h = titleBufferedImage.getHeight();
//                titleBufferedImage = Thumbnails.of(titleBufferedImage).scale(1).sourceRegion(new Rectangle((w - 50) / 2, (h - 50) / 2, 50, 50)).asBufferedImage();
//                ImageIcon rotated = new ImageIcon(titleBufferedImage);
//                System.out.println(rotated.getIconWidth() + " " + rotated.getIconHeight());
//                titleLabel.setIcon(rotated);
//                degree = (degree + 2) % 360;
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
            // 播放时加载默认专辑图片旋转动画
//            ImageIcon icon = player.getMusicInfo().getAlbum();
//            if (icon == null) {
//                ImageIcon imgIcon = ImageUtils.dye(
//                        defaultAlbumIcon,
//                        currUIStyle.getButtonColor());
//                BufferedImage bImageTranslucent = ImageUtils.castImageIconToBuffedImageTranslucent(imgIcon);
//                BufferedImage rotated = null;
//                try {
//                    rotated = Thumbnails.of(bImageTranslucent)
//                            .rotate(degree)
//                            .size(ALBUM_IMAGE_WIDTH, ALBUM_IMAGE_HEIGHT)
//                            .asBufferedImage();
//                    degree = (degree + 1) % 360;
//                } catch (IOException e) {
//                    e.printStackTrace();
//                }
//                ImageIcon rotatedImageIcon
//                        = new ImageIcon(rotated.getSubimage(
//                        (rotated.getWidth() - ALBUM_IMAGE_WIDTH) / 2,
//                        (rotated.getHeight() - ALBUM_IMAGE_HEIGHT) / 2,
//                        ALBUM_IMAGE_WIDTH,
//                        ALBUM_IMAGE_HEIGHT)
//                );
//                albumImage.setIcon(rotatedImageIcon);
//                // 解决卸载文件后还在继续渲染默认专辑文件的问题
//                if (player.isEmpty()) albumImage.setIcon(null);
//            }
        });
        // 播放结束
        mp.setOnEndOfMedia(() -> {
            // 单曲循环
            if (currPlayMode == PlayMode.SINGLE) {
                playLoaded(true);
                seekLrc(0);
            }
            // 顺序播放
            else if (currPlayMode == PlayMode.SEQUENCE) {
                if (currSong < playQueueModel.size() - 1) playNext();
                    // 播放完后卸载文件
                else unload();
            }
            // 列表循环
            else if (currPlayMode == PlayMode.LIST_CYCLE) {
                playNext();
            }
            // 随机播放
            else if (currPlayMode == PlayMode.SHUFFLE) {
                // 播放下一个随机
                playNextShuffle();
            }
        });
    }

    // 播放载入的歌曲
    private void playLoaded(boolean isReplay) {
        if (isReplay) player.replay();
        else {
            playOrPauseButton.setIcon(ImageUtils.dye(pauseIcon, currUIStyle.getButtonColor()));
            playOrPauseButton.setToolTipText(PAUSE_TIP);
            if (miniDialog != null) {
                miniDialog.playOrPauseButton.setIcon(playOrPauseButton.getIcon());
                miniDialog.playOrPauseButton.setToolTipText(playOrPauseButton.getToolTipText());
            }
            player.setMute(isMute);
            player.setVolume((float) volumeSlider.getValue() / MAX_VOLUME);
            player.setRate(currRate);
            player.setBalance(currBalance);
            player.adjustEqualizerBands(ed);
            if (!player.isPlaying()) player.play();
            // 重绘歌单，刷新播放中的图标
            musicList.repaint();
            netMusicList.repaint();
        }
    }

    // 添加到下一首播放
    private void nextPlay(CustomList list) {
        DefaultListModel model = (DefaultListModel) list.getModel();

        Object obj = list.getSelectedValue();

        // 下载列表先创建实例
        if (model == downloadListModel) {
            Task task = downloadList.getSelectedValue();
            AudioFile audioFile = new AudioFile(task.getDest());
            if (!audioFile.exists()) {
                new TipDialog(THIS, FILE_NOT_FOUND_MSG).showDialog();
                return;
            }
            MusicUtils.fillAudioFileInfo(audioFile);
            obj = audioFile;
        }

        // 判断歌曲是否正在播放
        if (player.isPlayingObject(obj)) {
            new TipDialog(THIS, ALREADY_PLAYING_MSG).showDialog();
            return;
        }

        // 先判断歌曲在不在播放队列；若在，先删除
        for (int i = 0, size = playQueueModel.size(); i < size; i++) {
            if (playQueueModel.get(i).equals(obj)) {
                // 解决删除元素带来的性能问题
                playQueue.setModel(emptyListModel);
                playQueueModel.remove(i);
                if (i < currSong) currSong--;
                playQueue.setModel(playQueueModel);
                break;
            }
        }

        // 将单首歌曲加到当前播放歌曲之后(若不在播放队列)
        int in = Math.min(currSong + 1, playQueueModel.size());
        playQueueModel.add(in, obj);
        new TipDialog(THIS, NEXT_PLAY_SUCCESS_MSG).showDialog();
    }

    // 播放选中歌曲，返回是否播放成功
    private boolean playSelected(CustomList list, boolean allowRetry) {
        AudioFile file = null;
        NetMusicInfo musicInfo = null;

        // 将指定 list 中的歌曲加到播放队列
        DefaultListModel model = (DefaultListModel) list.getModel();

        // 先判断歌曲在不在播放队列，若在直接选中播放队列对应歌曲
        boolean exists = false, pre = false;
        Object obj = list.getSelectedValue();

        // 下载列表先创建实例
        if (model == downloadListModel) {
            Task task = downloadList.getSelectedValue();
            AudioFile audioFile = new AudioFile(task.getDest());
            if (!audioFile.exists()) {
                new TipDialog(THIS, FILE_NOT_FOUND_MSG).showDialog();
                return false;
            }
            MusicUtils.fillAudioFileInfo(audioFile);
            obj = audioFile;
        }

        // 下载/在线音乐列表播放歌曲时，将单首歌曲加到当前播放歌曲之后播放(若不在播放队列)
        if (model == downloadListModel || model == netMusicListModel) {
            for (int i = 0, size = playQueueModel.size(); i < size; i++) {
                if (playQueueModel.get(i).equals(obj)) {
                    exists = true;
                    playQueue.setSelectedIndex(i);
                    break;
                }
            }
            if (!exists) {
                int in = currSong + 1;
                playQueueModel.add(in, obj);
                playQueue.setSelectedIndex(in);
            }
        }

        // 其他列表播放歌曲时，先清空播放队列，将该列表作为播放队列
        else if (model != playQueueModel) {
            pre = true;
            // 此处会造成性能问题，交给线程池处理，先开始播放
            globalExecutor.submit(() -> {
                // 先判断两个列表元素是否完全一致
                boolean isSame = model.size() == playQueueModel.size();
                for (int i = 0, size = model.size(); isSame && i < size; i++) {
                    if (playQueueModel.get(i) != model.get(i)) {
                        isSame = false;
                        break;
                    }
                }
                if (!isSame) {
                    playQueue.setModel(emptyListModel);
                    playQueueModel.clear();
                    for (int i = 0, size = model.size(); i < size; i++) {
                        playQueueModel.addElement(model.get(i));
                    }
                    playQueue.setModel(playQueueModel);
                }
                playQueue.setSelectedIndex(list.getSelectedIndex());
            });
        }

        Object o = pre ? list.getSelectedValue() : playQueue.getSelectedValue();
        currSong = pre ? list.getSelectedIndex() : playQueue.getSelectedIndex();
        // 本地文件
        if (o instanceof AudioFile) {
            file = (AudioFile) o;
            // 根本没选歌曲，跳出
            if (file == null) return false;
            // 文件不存在，询问是否从列表中删除
            if (!file.exists()) {
                ConfirmDialog confirmDialog = new ConfirmDialog(THIS, ASK_REMOVE_FIFE_NOT_FOUND_MSG, "是", "否");
                confirmDialog.showDialog();
                int response = confirmDialog.getResponse();
                if (response == JOptionPane.YES_OPTION) {
                    model.removeElement(o);
                    // 解决删除元素带来的性能问题
                    playQueue.setModel(emptyListModel);
                    playQueueModel.removeElement(o);
                    playQueue.setModel(playQueueModel);
                    currSong--;
                    new TipDialog(THIS, REMOVE_SUCCESS_MSG).showDialog();
                }
                return false;
            }
            // 如果歌曲信息不完整，获取歌曲文件的头信息
            if (!file.isIntegrated()) MusicUtils.fillAudioFileInfo(file);
        }
        // 在线音乐
        else if (o instanceof NetMusicInfo) {
            try {
                musicInfo = (NetMusicInfo) o;
                // 如果歌曲信息不完整，获取歌曲额外的信息(除了曲名、艺术家、id)
                MusicServerUtils.fillNetMusicInfo(musicInfo);
                updateRenderer(netMusicList);
                String url = musicInfo.getUrl();
                // 歌曲无版权
                if (StringUtils.isEmpty(url)) throw new NoPrivilegeException("歌曲无版权");
                // 酷狗的链接给的 wav，实际上是 mp3 格式，这种情况以 mp3 格式下载到本地再播放
                // 另外 flac 格式文件先下载 flac 文件，转为 mp3 格式再播放
                if (url.endsWith(Format.WAV) || musicInfo.isFlac()) {
                    String fileName = musicInfo.toFileName();
                    file = new AudioFile(SimplePath.CACHE_PATH + fileName);
                    AudioFile tmpFile = new AudioFile(FileUtils.replaceSuffix(file, Format.MP3));
                    if (!tmpFile.exists()) {
                        // 下载歌曲
                        if (!file.exists() || FileUtils.startsWithLeftBrace(file)) {
                            loading.start();
                            loading.setText(LOADING_MSG);
                            MusicServerUtils.download(loading, musicInfo.getUrl(), file.getPath());
                        }
                        // Flac 文件需要转换格式，并删除原来的文件
                        if (musicInfo.isFlac()) {
                            loading.setText("转换音频文件格式......");
                            MusicUtils.convert(file, tmpFile);
                            file.delete();
                        }
                    }
                    file = tmpFile;
                    if (loading.isShowing()) loading.stop();
                }
            } catch (Exception e) {
                if (e instanceof IORuntimeException) {
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } else if (e instanceof HttpException) {
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } else if (e instanceof IllegalMediaException) {
                    new TipDialog(THIS, UNSUPPORTED_AUDIO_FILE_MSG).showDialog();
                } else {
                    new TipDialog(THIS, GET_RESOURCE_FAILED_MSG).showDialog();
                }
                // 异常后允许重试的情况下自动播放下一首，超出最大重试次数停止，防止死循环
                if (currPlayMode != PlayMode.SINGLE && allowRetry) {
                    if (++retry <= MAX_RETRY) {
                        // 顺序播放
                        if (currPlayMode == PlayMode.SEQUENCE) {
                            if (currSong < playQueueModel.size() - 1) playNext();
                                // 播放完后卸载文件
                            else unload();
                        }
                        // 列表循环
                        else if (currPlayMode == PlayMode.LIST_CYCLE) playNext();
                            // 随机播放
                        else if (currPlayMode == PlayMode.SHUFFLE) playNextShuffle();
                    } else retry = 0;
                }
                return false;
            }
        }
        try {
            if (file != null && musicInfo == null && !file.isIntegrated())
                throw new IllegalMediaException("音频文件损坏");
            prepareToPlay(file, musicInfo);
            playLoaded(false);
            // 添加到历史播放列表
            if (model != historyModel) {
                // 先删掉重复的音乐，再添加
                historyModel.removeElement(musicInfo == null ? file : musicInfo);
                historyModel.add(0, musicInfo == null ? file : musicInfo);
                // 超过最大记录条数，删除最后一条
                if (historyModel.getSize() > maxHistoryCount) historyModel.remove(historyModel.getSize() - 1);
            }
            retry = 0;
            return true;
        } catch (IOException e) {
            e.printStackTrace();
        } catch (UnsupportedAudioFileException e) {
            new TipDialog(THIS, UNSUPPORTED_AUDIO_FILE_MSG).showDialog();
        } catch (MediaException e) {
            new TipDialog(THIS, UNSUPPORTED_AUDIO_FILE_MSG).showDialog();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (EncoderException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException | InvalidDataException | IllegalMediaException e) {
            new TipDialog(THIS, INVALID_AUDIO_FILE_MSG).showDialog();
        } catch (UnsupportedTagException e) {
            e.printStackTrace();
        } catch (URISyntaxException e) {
            e.printStackTrace();
        } finally {
            System.gc();
        }
        return false;
    }

    // 播放上一曲
    private void playLast() {
        int size = playQueueModel.getSize();
        // 当前播放列表非空
        if (size != 0) {
            // 选中上一曲
            currSong = currSong - 1 < 0 ? size - 1 : currSong - 1;
            playQueue.setSelectedIndex(currSong);
            playExecutor.submit(() -> playSelected(playQueue, true));
        }
    }

    // 播放下一曲 / 顺序播放
    private void playNext() {
        int size = playQueueModel.getSize();
        // 当前播放列表非空
        if (size != 0) {
            // 选中下一曲
            currSong = (currSong + 1) % playQueue.getModel().getSize();
            playQueue.setSelectedIndex(currSong);
            playExecutor.submit(() -> playSelected(playQueue, true));
        }
    }

    // 生成随机播放序列
    private void generateShuffleList() {
        // 随机列表为空或者歌曲数量发生变化
        if (shuffleList.isEmpty() || shuffleList.size() != playQueueModel.getSize()) {
            shuffleList.clear();
            for (int i = 0, size = playQueueModel.getSize(); i < size; i++) shuffleList.add(i);
        }
        Collections.shuffle(shuffleList);
        shuffleIndex = 0;
    }

    // 播放随机列表的下一首
    private void playNextShuffle() {
        // 随机列表播放完了，或者播放队列发生变化，就生成一个
        if (shuffleIndex >= shuffleList.size() || shuffleList.size() != playQueueModel.size()) {
            generateShuffleList();
        }
        // 选择随机列表下一首
        playQueue.setSelectedIndex(shuffleList.get(shuffleIndex++));
        playExecutor.submit(() -> playSelected(playQueue, true));
//        // 在线音乐才需要加载界面
//        Object o = playQueue.getSelectedValue();
//        if (o instanceof File || loading.isShowing()) playSelected(playQueue, true);
//        else if (o instanceof NetMusicInfo) loadingAndRun(() -> playSelected(playQueue, true));
    }

    // 更新 currSong 的值，在播放队列歌曲发生变化后调用
    private void updateCurrSong() {
        currSong = -1;
        for (int i = 0, size = playQueueModel.size(); i < size; i++) {
            if (player.isPlayingObject(playQueueModel.get(i))) {
                currSong = i;
                return;
            }
        }
    }

    // 改变到单曲循环
    private void changeToSingle(boolean showDialog) {
        playModeButton.setIcon(ImageUtils.dye(singleIcon, currUIStyle.getButtonColor()));
        playModeButton.setToolTipText(SINGLE_TIP);
        currPlayMode = PlayMode.SINGLE;
        if (showDialog) new TipDialog(THIS, CHANGE_SINGLE_MSG).showDialog();
    }

    // 改变到顺序播放
    private void changeToSequence(boolean showDialog) {
        playModeButton.setIcon(ImageUtils.dye(sequenceIcon, currUIStyle.getButtonColor()));
        playModeButton.setToolTipText(SEQUENCE_TIP);
        currPlayMode = PlayMode.SEQUENCE;
        if (showDialog) new TipDialog(THIS, CHANGE_SEQUENCE_MSG).showDialog();
    }

    // 改变到列表循环
    private void changeToListCycle(boolean showDialog) {
        playModeButton.setIcon(ImageUtils.dye(listCycleIcon, currUIStyle.getButtonColor()));
        playModeButton.setToolTipText(LIST_CYCLE_TIP);
        currPlayMode = PlayMode.LIST_CYCLE;
        if (showDialog) new TipDialog(THIS, CHANGE_LIST_CYCLE_MSG).showDialog();
    }

    // 变为随机播放
    void changeToShuffle(boolean showDialog) {
        playModeButton.setIcon(ImageUtils.dye(shuffleIcon, currUIStyle.getButtonColor()));
        playModeButton.setToolTipText(SHUFFLE_TIP);
        currPlayMode = PlayMode.SHUFFLE;
        if (showDialog) new TipDialog(THIS, CHANGE_SHUFFLE_MSG).showDialog();
    }

    // 列表排序
    private void sortFiles(int method, int order) {
        DefaultListModel model = (DefaultListModel) musicList.getModel();
        List<Object> list = Collections.list(model.elements());
        if (method == SortMethod.BY_SONG_AND_FILE_NAME) {
            Collections.sort(list, (o1, o2) -> {
                try {
                    String s1 = null, s2 = null;
                    if (o1 instanceof AudioFile) {
                        AudioFile f1 = (AudioFile) o1;
                        s1 = f1.toString();
                    } else if (o1 instanceof NetMusicInfo) s1 = ((NetMusicInfo) o1).getName();
                    if (o2 instanceof AudioFile) {
                        AudioFile f2 = (AudioFile) o2;
                        s2 = f2.toString();
                    } else if (o2 instanceof NetMusicInfo) s2 = ((NetMusicInfo) o2).getName();
                    return order == SortMethod.ASCENDING ? StringUtils.compare(s1, s2) : StringUtils.compare(s2, s1);
                } catch (BadHanyuPinyinOutputFormatCombination e) {
                    e.printStackTrace();
                }
                return 0;
            });
        } else if (method == SortMethod.BY_SONG_NAME) {
            Collections.sort(list, (o1, o2) -> {
                try {
                    String s1 = null, s2 = null;
                    if (o1 instanceof AudioFile) s1 = ((AudioFile) o1).getSongName();
                    else if (o1 instanceof NetMusicInfo) s1 = ((NetMusicInfo) o1).getName();
                    if (o2 instanceof AudioFile) s2 = ((AudioFile) o2).getSongName();
                    else if (o2 instanceof NetMusicInfo) s2 = ((NetMusicInfo) o2).getName();
                    return order == SortMethod.ASCENDING ? StringUtils.compare(s1, s2) : StringUtils.compare(s2, s1);
                } catch (BadHanyuPinyinOutputFormatCombination e) {
                    e.printStackTrace();
                }
                return 0;
            });
        } else if (method == SortMethod.BY_ARTIST_NAME) {
            Collections.sort(list, (o1, o2) -> {
                try {
                    String s1 = null, s2 = null;
                    if (o1 instanceof AudioFile) s1 = ((AudioFile) o1).getArtist();
                    else if (o1 instanceof NetMusicInfo) s1 = ((NetMusicInfo) o1).getArtist();
                    if (o2 instanceof AudioFile) s2 = ((AudioFile) o2).getArtist();
                    else if (o2 instanceof NetMusicInfo) s2 = ((NetMusicInfo) o2).getArtist();
                    return order == SortMethod.ASCENDING ? StringUtils.compare(s1, s2) : StringUtils.compare(s2, s1);
                } catch (BadHanyuPinyinOutputFormatCombination e) {
                    e.printStackTrace();
                }
                return 0;
            });
        } else if (method == SortMethod.BY_ALBUM_NAME) {
            Collections.sort(list, (o1, o2) -> {
                try {
                    String s1 = null, s2 = null;
                    if (o1 instanceof AudioFile) s1 = ((AudioFile) o1).getAlbum();
                    else if (o1 instanceof NetMusicInfo) s1 = ((NetMusicInfo) o1).getAlbumName();
                    if (o2 instanceof AudioFile) s2 = ((AudioFile) o2).getAlbum();
                    else if (o2 instanceof NetMusicInfo) s2 = ((NetMusicInfo) o2).getAlbumName();
                    return order == SortMethod.ASCENDING ? StringUtils.compare(s1, s2) : StringUtils.compare(s2, s1);
                } catch (BadHanyuPinyinOutputFormatCombination e) {
                    e.printStackTrace();
                }
                return 0;
            });
        } else if (method == SortMethod.BY_FILE_NAME) {
            Collections.sort(list, (o1, o2) -> {
                String s1 = "", s2 = "";
                if (o1 instanceof AudioFile) s1 = ((AudioFile) o1).getName();
                else if (o1 instanceof NetMusicInfo) s1 = o1.toString();
                if (o2 instanceof AudioFile) s2 = ((AudioFile) o2).getName();
                else if (o2 instanceof NetMusicInfo) s2 = o2.toString();
                try {
                    return order == SortMethod.ASCENDING ? StringUtils.compare(s1, s2) : StringUtils.compare(s2, s1);
                } catch (BadHanyuPinyinOutputFormatCombination e) {
                    e.printStackTrace();
                    return 0;
                }
            });
        }
        // 按时长排序只支持离线音乐
        else if (method == SortMethod.BY_TIME && model == musicListModel) {
            Collections.sort(list, (o1, o2) -> {
                double d1;
                double d2;
                try {
                    d1 = ((AudioFile) o1).getDuration();
                    d2 = ((AudioFile) o2).getDuration();
                } catch (Exception e) {
                    e.printStackTrace();
                    return 0;
                }
                return order == SortMethod.ASCENDING ? Double.compare(d1, d2) : Double.compare(d2, d1);
            });
        }
        // 按修改时间排序只支持离线音乐
        else if (method == SortMethod.BY_LAST_MODIFIED_TIME && model == musicListModel) {
            Collections.sort(list, (o1, o2) -> {
                long t1 = ((File) o1).lastModified();
                long t2 = ((File) o2).lastModified();
                return order == SortMethod.ASCENDING ? Long.compare(t1, t2) : Long.compare(t2, t1);
            });
        }
        // 按创建时间排序只支持离线音乐
        else if (method == SortMethod.BY_CREATION_TIME && model == musicListModel) {
            Collections.sort(list, (o1, o2) -> {
                long t1 = FileUtils.getCreationTime((File) o1);
                long t2 = FileUtils.getCreationTime((File) o2);
                return order == SortMethod.ASCENDING ? Long.compare(t1, t2) : Long.compare(t2, t1);
            });
        }
        // 按访问时间排序只支持离线音乐
        else if (method == SortMethod.BY_LAST_ACCESS_TIME && model == musicListModel) {
            Collections.sort(list, (o1, o2) -> {
                long t1 = FileUtils.getAccessTime((File) o1);
                long t2 = FileUtils.getAccessTime((File) o2);
                return order == SortMethod.ASCENDING ? Long.compare(t1, t2) : Long.compare(t2, t1);
            });
        }
        // 文件大小排序只支持离线音乐
        else if (method == SortMethod.BY_SIZE && model == musicListModel) {
            Collections.sort(list, (o1, o2) -> {
                long l1 = ((File) o1).length();
                long l2 = ((File) o2).length();
                return order == SortMethod.ASCENDING ? Long.compare(l1, l2) : Long.compare(l2, l1);
            });
        }
        musicList.setModel(emptyListModel);
        model.clear();
        list.forEach(o -> model.addElement(o));
        musicList.setModel(model);
        countLabel.setText(String.format("共 %s 首", model.size()));
    }

    // 开启频谱
    public void openSpectrum() {
        if (!spectrumPanel.isDrawSpectrum()) spectrumPanel.setDrawSpectrum(true);
        // 开始动画之前先判断在不在运行，防止重复运行动画造成卡顿！
        if (!spectrumTimer.isRunning()) spectrumTimer.start();
        spectrumPanel.setVisible(true);
    }

    // 关闭频谱
    private void closeSpectrum() {
        spectrumTimer.stop();
        spectrumPanel.setDrawSpectrum(false);
        spectrumPanel.setVisible(false);
    }

    // 改变所有单选菜单项图标
    public void updateMenuItemIcon(CustomPopupMenu popupMenu) {
        Component[] components = popupMenu.getComponents();
        for (Component c : components) {
            if (c instanceof CustomRadioButtonMenuItem) {
                CustomRadioButtonMenuItem mi = (CustomRadioButtonMenuItem) c;
                if (mi.isSelected()) mi.setIcon(ImageUtils.dye(dotIcon, currUIStyle.getMenuItemColor()));
                else mi.setIcon(null);
            } else if (c instanceof CustomCheckMenuItem) {
                CustomCheckMenuItem mi = (CustomCheckMenuItem) c;
                if (mi.isSelected()) mi.setIcon(ImageUtils.dye(tickIcon, currUIStyle.getMenuItemColor()));
                else mi.setIcon(null);
            }
        }
    }

    // 改变所有作为标签按钮样式
    void updateTabButtonStyle() {
        Component[] components = personalMusicToolBar.getComponents();
        for (int i = 0, len = components.length; i < len; i++) {
            CustomButton b = (CustomButton) components[i];
            b.setDrawBg(currPersonalMusicTab == i);
        }
        components = recommendToolBar.getComponents();
        for (int i = 0, len = components.length; i < len; i++) {
            CustomButton b = (CustomButton) components[i];
            b.setDrawBg(currRecommendTab == i);
        }
    }

    // 更新菜单项样式
    private void updateMenuItemStyle(CustomPopupMenu popupMenu, Color menuItemColor) {
        Component[] components = popupMenu.getComponents();
        for (Component c : components) {
            c.setForeground(menuItemColor);
            if (c instanceof CustomMenuItem) {
                CustomMenuItem menuItem = (CustomMenuItem) c;
                menuItem.setUI(new MenuItemUI(menuItemColor));
            } else if (c instanceof CustomRadioButtonMenuItem) {
                CustomRadioButtonMenuItem menuItem = (CustomRadioButtonMenuItem) c;
                menuItem.setUI(new RadioButtonMenuItemUI(menuItemColor));
            } else if (c instanceof CustomCheckMenuItem) {
                CustomCheckMenuItem menuItem = (CustomCheckMenuItem) c;
                menuItem.setUI(new CheckMenuItemUI(menuItemColor));
            } else if (c instanceof CustomMenu) {
                CustomMenu menu = (CustomMenu) c;
                menu.setUI(new MenuUI(menuItemColor));
            }
        }
    }

    // 改变 UI 风格
    public void changeUIStyle(UIStyle style) throws IOException, ClassNotFoundException, UnsupportedLookAndFeelException, InstantiationException, IllegalAccessException, AWTException {
        currUIStyle = style;

        Color buttonColor = style.getButtonColor();
        Color labelColor = style.getLabelColor();
        Color selectedColor = style.getSelectedColor();
        Color foreColor = style.getForeColor();
        Color menuItemColor = style.getMenuItemColor();

        // 托盘
        trayIconImg.setImage(ImageUtils.dye(trayIcon, buttonColor).getImage());

        // 标题栏
        titleLabel.setForeground(style.getButtonColor());
        titleLabel.setIcon(ImageUtils.dye((ImageIcon) titleLabel.getIcon(), buttonColor));
        hideDetailButton.setIcon(ImageUtils.dye((ImageIcon) hideDetailButton.getIcon(), buttonColor));
        styleToolButton.setIcon(ImageUtils.dye((ImageIcon) styleToolButton.getIcon(), buttonColor));
        mainMenuButton.setIcon(ImageUtils.dye((ImageIcon) mainMenuButton.getIcon(), buttonColor));
        splitLabel.setIcon(ImageUtils.dye((ImageIcon) splitLabel.getIcon(), buttonColor));
        miniButton.setIcon(ImageUtils.dye((ImageIcon) miniButton.getIcon(), buttonColor));
        minimizeButton.setIcon(ImageUtils.dye((ImageIcon) minimizeButton.getIcon(), buttonColor));
        maximizeButton.setIcon(ImageUtils.dye((ImageIcon) maximizeButton.getIcon(), buttonColor));
        closeButton.setIcon(ImageUtils.dye((ImageIcon) closeButton.getIcon(), buttonColor));

        // 列表为空提示面板
        emptyHintLabel.setIcon(ImageUtils.dye(emptyHintIcon, labelColor));
        emptyHintLabel.setForeground(labelColor);

        // 按钮被禁用时颜色
        Color disabledColor = ColorUtils.darker(buttonColor, 0.3f);
        netMusicBackwardButton.setDisabledIcon(ImageUtils.dye((ImageIcon) netMusicBackwardButton.getIcon(), disabledColor));
        netPlaylistBackwardButton.setDisabledIcon(ImageUtils.dye((ImageIcon) netPlaylistBackwardButton.getIcon(), disabledColor));
        netAlbumBackwardButton.setDisabledIcon(ImageUtils.dye((ImageIcon) netAlbumBackwardButton.getIcon(), disabledColor));
        netArtistBackwardButton.setDisabledIcon(ImageUtils.dye((ImageIcon) netArtistBackwardButton.getIcon(), disabledColor));
        netRadioBackwardButton.setDisabledIcon(ImageUtils.dye((ImageIcon) netRadioBackwardButton.getIcon(), disabledColor));
        netMvBackwardButton.setDisabledIcon(ImageUtils.dye((ImageIcon) netMvBackwardButton.getIcon(), disabledColor));
        netRankingBackwardButton.setDisabledIcon(ImageUtils.dye((ImageIcon) netRankingBackwardButton.getIcon(), disabledColor));
        netUserBackwardButton.setDisabledIcon(ImageUtils.dye((ImageIcon) netUserBackwardButton.getIcon(), disabledColor));
        mvButton.setDisabledIcon(ImageUtils.dye((ImageIcon) mvButton.getIcon(), disabledColor));
        collectButton.setDisabledIcon(ImageUtils.dye((ImageIcon) collectButton.getIcon(), disabledColor));
        downloadButton.setDisabledIcon(ImageUtils.dye((ImageIcon) downloadButton.getIcon(), disabledColor));
        commentButton.setDisabledIcon(ImageUtils.dye((ImageIcon) commentButton.getIcon(), disabledColor));
        sheetButton.setDisabledIcon(ImageUtils.dye((ImageIcon) sheetButton.getIcon(), disabledColor));

        // 右键菜单项禁用时颜色
        // 全局设置菜单项禁用颜色
        UIManager.put("MenuItem.disabledForeground", ColorUtils.darker(menuItemColor));

        // 右键菜单项图标
        copyMottoMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));
        nextMottoMenuItem.setIcon(ImageUtils.dye(nextMottoIcon, menuItemColor));

        openMainFrameMenuItem.setIcon(ImageUtils.dye(openMainFrameIcon, menuItemColor));
        exitMenuItem.setIcon(ImageUtils.dye(exitIcon, menuItemColor));

        manageStyleMenuItem.setIcon(ImageUtils.dye(changeStyleIcon, menuItemColor));
        styleCustomMenuItem.setIcon(ImageUtils.dye(addCustomStyleIcon, menuItemColor));

        closeSong.setIcon(ImageUtils.dye(closeSongIcon, menuItemColor));
        closeSong.setDisabledIcon(ImageUtils.dye(closeSongIcon, disabledColor));
        clearCache.setIcon(ImageUtils.dye(clearCacheIcon, menuItemColor));
        settingMenuItem.setIcon(ImageUtils.dye(settingsIcon, menuItemColor));
        donateMenuItem.setIcon(ImageUtils.dye(donateIcon, menuItemColor));
        releaseMenuItem.setIcon(ImageUtils.dye(releaseIcon, menuItemColor));
        updateMenuItem.setIcon(ImageUtils.dye(updateIcon, menuItemColor));
        helpMenuItem.setIcon(ImageUtils.dye(helpIcon, menuItemColor));
        aboutMenuItem.setIcon(ImageUtils.dye(aboutIcon, menuItemColor));

        addFileMenuItem.setIcon(ImageUtils.dye(fileIcon, menuItemColor));
        addDirMenuItem.setIcon(ImageUtils.dye(folderIcon, menuItemColor));

        singleMenuItem.setIcon(ImageUtils.dye(singleIcon, menuItemColor));
        sequenceMenuItem.setIcon(ImageUtils.dye(sequenceIcon, menuItemColor));
        listCycleMenuItem.setIcon(ImageUtils.dye(listCycleIcon, menuItemColor));
        shuffleMenuItem.setIcon(ImageUtils.dye(shuffleIcon, menuItemColor));

        if (gsOn) gsMenuItem.setIcon(ImageUtils.dye(tickIcon, menuItemColor));
        if (darkerOn) darkerMenuItem.setIcon(ImageUtils.dye(tickIcon, menuItemColor));
        blurOffMenuItem.setIcon(ImageUtils.dye(blurOffIcon, menuItemColor));
        cvBlurMenuItem.setIcon(ImageUtils.dye(cvBlurIcon, menuItemColor));
        mcBlurMenuItem.setIcon(ImageUtils.dye(mcBlurIcon, menuItemColor));
        lgBlurMenuItem.setIcon(ImageUtils.dye(lgBlurIcon, menuItemColor));

        saveDescCoverImgMenuItem.setIcon(ImageUtils.dye(saveAlbumImgMenuItemIcon, menuItemColor));
        saveDescBgImgMenuItem.setIcon(ImageUtils.dye(saveAlbumImgMenuItemIcon, menuItemColor));
        copyDescNameMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));
        copyDescTagMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));
        copyDescMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));

        playMenuItem.setIcon(ImageUtils.dye(playMenuItemIcon, menuItemColor));
        nextPlayMenuItem.setIcon(ImageUtils.dye(nextPlayMenuItemIcon, menuItemColor));
        playMvMenuItem.setIcon(ImageUtils.dye(playMvMenuItemIcon, menuItemColor));
        playMvMenuItem.setDisabledIcon(ImageUtils.dye(playMvMenuItemIcon, disabledColor));
        collectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, menuItemColor));
        downloadMenuItem.setIcon(ImageUtils.dye(downloadMenuItemIcon, menuItemColor));
        downloadMenuItem.setDisabledIcon(ImageUtils.dye(downloadMenuItemIcon, disabledColor));
        commentMenuItem.setIcon(ImageUtils.dye(commentMenuItemIcon, menuItemColor));
        commentMenuItem.setDisabledIcon(ImageUtils.dye(commentMenuItemIcon, disabledColor));
        sheetMenuItem.setIcon(ImageUtils.dye(sheetMenuItemIcon, menuItemColor));
        sheetMenuItem.setDisabledIcon(ImageUtils.dye(sheetMenuItemIcon, disabledColor));
        searchSongMenuItem.setIcon(ImageUtils.dye(searchSongItemIcon, menuItemColor));
        similarSongMenuItem.setIcon(ImageUtils.dye(similarMenuItemIcon, menuItemColor));
        similarSongMenuItem.setDisabledIcon(ImageUtils.dye(similarMenuItemIcon, disabledColor));
        relatedPlaylistMenuItem.setIcon(ImageUtils.dye(relatedPlaylistMenuItemIcon, menuItemColor));
        relatedPlaylistMenuItem.setDisabledIcon(ImageUtils.dye(relatedPlaylistMenuItemIcon, disabledColor));
        authorMenuItem.setIcon(ImageUtils.dye(similarArtistMenuItemIcon, menuItemColor));
        authorMenuItem.setDisabledIcon(ImageUtils.dye(similarArtistMenuItemIcon, disabledColor));
        albumMenuItem.setIcon(ImageUtils.dye(browseAlbumMenuItemIcon, menuItemColor));
        albumMenuItem.setDisabledIcon(ImageUtils.dye(browseAlbumMenuItemIcon, disabledColor));
        recRadioMenuItem.setIcon(ImageUtils.dye(radioMenuItemIcon, menuItemColor));
        recRadioMenuItem.setDisabledIcon(ImageUtils.dye(radioMenuItemIcon, disabledColor));
        relatedMvMenuItem.setIcon(ImageUtils.dye(similarMvMenuItemIcon, menuItemColor));
        relatedMvMenuItem.setDisabledIcon(ImageUtils.dye(similarMvMenuItemIcon, disabledColor));
        copyNameMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));
        locateFileMenuItem.setIcon(ImageUtils.dye(locateFileMenuItemIcon, menuItemColor));
        locateFileMenuItem.setDisabledIcon(ImageUtils.dye(locateFileMenuItemIcon, disabledColor));
        editInfoMenuItem.setIcon(ImageUtils.dye(editInfoMenuItemIcon, menuItemColor));
        editInfoMenuItem.setDisabledIcon(ImageUtils.dye(editInfoMenuItemIcon, disabledColor));
        removeMenuItem.setIcon(ImageUtils.dye(removeMenuItemIcon, menuItemColor));

        netMusicPlayMenuItem.setIcon(ImageUtils.dye(playMenuItemIcon, menuItemColor));
        netMusicNextPlayMenuItem.setIcon(ImageUtils.dye(nextPlayMenuItemIcon, menuItemColor));
        netMusicPlayMvMenuItem.setIcon(ImageUtils.dye(playMvMenuItemIcon, menuItemColor));
        netMusicPlayMvMenuItem.setDisabledIcon(ImageUtils.dye(playMvMenuItemIcon, disabledColor));
        netMusicCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, menuItemColor));
        netMusicDownloadMenuItem.setIcon(ImageUtils.dye(downloadMenuItemIcon, menuItemColor));
        netMusicCommentMenuItem.setIcon(ImageUtils.dye(commentMenuItemIcon, menuItemColor));
        netMusicSheetMenuItem.setIcon(ImageUtils.dye(sheetMenuItemIcon, menuItemColor));
        netMusicSearchSongMenuItem.setIcon(ImageUtils.dye(searchSongItemIcon, menuItemColor));
        netMusicSimilarSongMenuItem.setIcon(ImageUtils.dye(similarMenuItemIcon, menuItemColor));
        netMusicRelatedPlaylistMenuItem.setIcon(ImageUtils.dye(relatedPlaylistMenuItemIcon, menuItemColor));
        netMusicAuthorMenuItem.setIcon(ImageUtils.dye(similarArtistMenuItemIcon, menuItemColor));
        netMusicAuthorMenuItem.setDisabledIcon(ImageUtils.dye(similarArtistMenuItemIcon, disabledColor));
        netMusicAlbumMenuItem.setIcon(ImageUtils.dye(browseAlbumMenuItemIcon, menuItemColor));
        netMusicAlbumMenuItem.setDisabledIcon(ImageUtils.dye(browseAlbumMenuItemIcon, disabledColor));
        netMusicRecRadioMenuItem.setIcon(ImageUtils.dye(radioMenuItemIcon, menuItemColor));
        netMusicRecRadioMenuItem.setDisabledIcon(ImageUtils.dye(radioMenuItemIcon, disabledColor));
        netMusicRelatedMvMenuItem.setIcon(ImageUtils.dye(similarMvMenuItemIcon, menuItemColor));
        netMusicCopyNameMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));

        netPlaylistOpenMenuItem.setIcon(ImageUtils.dye(openMenuItemIcon, menuItemColor));
        netPlaylistPlayAllMenuItem.setIcon(ImageUtils.dye(playMenuItemIcon, menuItemColor));
        netPlaylistCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, menuItemColor));
        netPlaylistCommentMenuItem.setIcon(ImageUtils.dye(commentMenuItemIcon, menuItemColor));
        netPlaylistSimilarPlaylistMenuItem.setIcon(ImageUtils.dye(relatedPlaylistMenuItemIcon, menuItemColor));
        netPlaylistCreatorMenuItem.setIcon(ImageUtils.dye(userMenuItemIcon, menuItemColor));
        netPlaylistSubscriberMenuItem.setIcon(ImageUtils.dye(userFollowedMenuItemIcon, menuItemColor));
        netPlaylistCopyNameMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));

        netAlbumOpenMenuItem.setIcon(ImageUtils.dye(openMenuItemIcon, menuItemColor));
        netAlbumPlayAllMenuItem.setIcon(ImageUtils.dye(playMenuItemIcon, menuItemColor));
        netAlbumCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, menuItemColor));
        netAlbumCommentMenuItem.setIcon(ImageUtils.dye(commentMenuItemIcon, menuItemColor));
        netAlbumArtistMenuItem.setIcon(ImageUtils.dye(similarArtistMenuItemIcon, menuItemColor));
        netAlbumSimilarMenuItem.setIcon(ImageUtils.dye(browseAlbumMenuItemIcon, menuItemColor));
        netAlbumPhotosMenuItem.setIcon(ImageUtils.dye(saveAlbumImgMenuItemIcon, menuItemColor));
        netAlbumCopyNameMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));

        netArtistOpenMenuItem.setIcon(ImageUtils.dye(openMenuItemIcon, menuItemColor));
        netArtistPlayAllMenuItem.setIcon(ImageUtils.dye(playMenuItemIcon, menuItemColor));
        netArtistCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, menuItemColor));
        netArtistBrowseAlbumMenuItem.setIcon(ImageUtils.dye(browseAlbumMenuItemIcon, menuItemColor));
        netArtistBrowseMvMenuItem.setIcon(ImageUtils.dye(similarMvMenuItemIcon, menuItemColor));
        netArtistSimilarArtistMenuItem.setIcon(ImageUtils.dye(similarArtistMenuItemIcon, menuItemColor));
        netArtistFansMenuItem.setIcon(ImageUtils.dye(userFollowedMenuItemIcon, menuItemColor));
        netArtistBuddyMenuItem.setIcon(ImageUtils.dye(buddyMenuItemIcon, menuItemColor));
        netArtistRadiosMenuItem.setIcon(ImageUtils.dye(radioMenuItemIcon, menuItemColor));
        netArtistPhotosMenuItem.setIcon(ImageUtils.dye(saveAlbumImgMenuItemIcon, menuItemColor));
        netArtistCopyNameMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));

        netRadioOpenMenuItem.setIcon(ImageUtils.dye(openMenuItemIcon, menuItemColor));
        netRadioPlayAllMenuItem.setIcon(ImageUtils.dye(playMenuItemIcon, menuItemColor));
        netRadioCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, menuItemColor));
        netRadioCommentMenuItem.setIcon(ImageUtils.dye(commentMenuItemIcon, menuItemColor));
        netRadioDjMenuItem.setIcon(ImageUtils.dye(userMenuItemIcon, menuItemColor));
        netRadioSubscriberMenuItem.setIcon(ImageUtils.dye(userFollowedMenuItemIcon, menuItemColor));
        netRadioSimilarMenuItem.setIcon(ImageUtils.dye(radioMenuItemIcon, menuItemColor));
        netRadioArtistsMenuItem.setIcon(ImageUtils.dye(similarArtistMenuItemIcon, menuItemColor));
        netRadioPhotosMenuItem.setIcon(ImageUtils.dye(saveAlbumImgMenuItemIcon, menuItemColor));
        netRadioPostersMenuItem.setIcon(ImageUtils.dye(posterMenuItemIcon, menuItemColor));
        netRadioCopyNameMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));

        netMvPlayMenuItem.setIcon(ImageUtils.dye(playMenuItemIcon, menuItemColor));
        netMvCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, menuItemColor));
        netMvDownloadMenuItem.setIcon(ImageUtils.dye(downloadMenuItemIcon, menuItemColor));
        netMvSimilarMvMenuItem.setIcon(ImageUtils.dye(similarMvMenuItemIcon, menuItemColor));
        netMvVideoEpisodeMenuItem.setIcon(ImageUtils.dye(videoEpisodeMenuItemIcon, menuItemColor));
        netMvCreatorMenuItem.setIcon(ImageUtils.dye(userMenuItemIcon, menuItemColor));
        netMvCommentMenuItem.setIcon(ImageUtils.dye(commentMenuItemIcon, menuItemColor));
        netMvCopyNameMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));

        netRankingOpenMenuItem.setIcon(ImageUtils.dye(openMenuItemIcon, menuItemColor));
        netRankingPlayAllMenuItem.setIcon(ImageUtils.dye(playMenuItemIcon, menuItemColor));
        netRankingCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, menuItemColor));
        netRankingCommentMenuItem.setIcon(ImageUtils.dye(commentMenuItemIcon, menuItemColor));
        netRankingCopyNameMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));

        netUserOpenMenuItem.setIcon(ImageUtils.dye(openMenuItemIcon, menuItemColor));
        netUserPlayAllMenuItem.setIcon(ImageUtils.dye(playMenuItemIcon, menuItemColor));
        netUserCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, menuItemColor));
        netUserPlaylistMenuItem.setIcon(ImageUtils.dye(relatedPlaylistMenuItemIcon, menuItemColor));
        netUserAlbumMenuItem.setIcon(ImageUtils.dye(browseAlbumMenuItemIcon, menuItemColor));
        netUserRadioMenuItem.setIcon(ImageUtils.dye(radioMenuItemIcon, menuItemColor));
        netUserVideoMenuItem.setIcon(ImageUtils.dye(similarMvMenuItemIcon, menuItemColor));
        netUserFollowMenuItem.setIcon(ImageUtils.dye(userFollowMenuItemIcon, menuItemColor));
        netUserFollowedMenuItem.setIcon(ImageUtils.dye(userFollowedMenuItemIcon, menuItemColor));
        netUserCopyNameMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));

        netCommentCopyMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));
        netCommentSaveProfileMenuItem.setIcon(ImageUtils.dye(saveAlbumImgMenuItemIcon, menuItemColor));
        netCommentSaveProfileMenuItem.setDisabledIcon(ImageUtils.dye(saveAlbumImgMenuItemIcon, disabledColor));
        netCommentUserMenuItem.setIcon(ImageUtils.dye(userMenuItemIcon, menuItemColor));
        netCommentPlaylistMenuItem.setIcon(ImageUtils.dye(relatedPlaylistMenuItemIcon, menuItemColor));
        netCommentAlbumMenuItem.setIcon(ImageUtils.dye(browseAlbumMenuItemIcon, menuItemColor));

        netSheetBrowseMenuItem.setIcon(ImageUtils.dye(browseSheetMenuItemIcon, menuItemColor));
        netSheetCopyNameMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));

        locateLrcMenuItem.setIcon(ImageUtils.dye(locateLrcMenuItemIcon, menuItemColor));
        locateLrcMenuItem.setDisabledIcon(ImageUtils.dye(locateLrcMenuItemIcon, disabledColor));
        copyMenuItem.setIcon(ImageUtils.dye(copyLrcMenuItemIcon, menuItemColor));
        browseLrcMenuItem.setIcon(ImageUtils.dye(browseLrcMenuItemIcon, menuItemColor));
        browseLrcMenuItem.setDisabledIcon(ImageUtils.dye(browseLrcMenuItemIcon, disabledColor));
        browseLrcTransMenuItem.setIcon(ImageUtils.dye(browseLrcMenuItemIcon, menuItemColor));
        browseLrcTransMenuItem.setDisabledIcon(ImageUtils.dye(browseLrcMenuItemIcon, disabledColor));
        downloadLrcMenuItem.setIcon(ImageUtils.dye(downloadIcon, menuItemColor));
        downloadLrcMenuItem.setDisabledIcon(ImageUtils.dye(downloadIcon, disabledColor));
        downloadLrcTransMenuItem.setIcon(ImageUtils.dye(downloadIcon, menuItemColor));
        downloadLrcTransMenuItem.setDisabledIcon(ImageUtils.dye(downloadIcon, disabledColor));
        currLrcOffsetMenuItem.setDisabledIcon(ImageUtils.dye(lrcOffsetMenuItemIcon, disabledColor));
        for (CustomMenuItem mi : calcLrcOffsetMenuItems) {
            mi.setIcon(ImageUtils.dye(lrcOffsetMenuItemIcon, menuItemColor));
        }

        saveAlbumImageMenuItem.setIcon(ImageUtils.dye(saveAlbumImgMenuItemIcon, menuItemColor));
        saveAlbumImageMenuItem.setDisabledIcon(ImageUtils.dye(saveAlbumImgMenuItemIcon, disabledColor));
        copySongNameMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));
        copyArtistMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));
        copyAlbumMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));

        downloadPlayMenuItem.setIcon(ImageUtils.dye(playMenuItemIcon, menuItemColor));
        downloadNextPlayMenuItem.setIcon(ImageUtils.dye(nextPlayMenuItemIcon, menuItemColor));
        downloadNextPlayMenuItem.setDisabledIcon(ImageUtils.dye(nextPlayMenuItemIcon, disabledColor));
        downloadLocateFileMenuItem.setIcon(ImageUtils.dye(locateFileMenuItemIcon, menuItemColor));
        downloadEditInfoMenuItem.setIcon(ImageUtils.dye(editInfoMenuItemIcon, menuItemColor));
        downloadEditInfoMenuItem.setDisabledIcon(ImageUtils.dye(editInfoMenuItemIcon, disabledColor));
        cancelTaskMenuItem.setIcon(ImageUtils.dye(cancelTaskMenuItemIcon, menuItemColor));
        cancelTaskMenuItem.setDisabledIcon(ImageUtils.dye(cancelTaskMenuItemIcon, disabledColor));
        restartTaskMenuItem.setIcon(ImageUtils.dye(restartTaskMenuItemIcon, menuItemColor));
        restartTaskMenuItem.setDisabledIcon(ImageUtils.dye(restartTaskMenuItemIcon, disabledColor));
        removeTaskMenuItem.setIcon(ImageUtils.dye(removeMenuItemIcon, menuItemColor));

        playQueuePlayMenuItem.setIcon(ImageUtils.dye(playMenuItemIcon, menuItemColor));
        playQueueNextPlayMenuItem.setIcon(ImageUtils.dye(nextPlayMenuItemIcon, menuItemColor));
        playQueuePlayMvMenuItem.setIcon(ImageUtils.dye(playMvMenuItemIcon, menuItemColor));
        playQueuePlayMvMenuItem.setDisabledIcon(ImageUtils.dye(playMvMenuItemIcon, disabledColor));
        playQueueCollectMenuItem.setIcon(ImageUtils.dye(collectMenuItemIcon, menuItemColor));
        playQueueDownloadMenuItem.setIcon(ImageUtils.dye(downloadMenuItemIcon, menuItemColor));
        playQueueDownloadMenuItem.setDisabledIcon(ImageUtils.dye(downloadMenuItemIcon, disabledColor));
        playQueueCommentMenuItem.setIcon(ImageUtils.dye(commentMenuItemIcon, menuItemColor));
        playQueueCommentMenuItem.setDisabledIcon(ImageUtils.dye(commentMenuItemIcon, disabledColor));
        playQueueSheetMenuItem.setIcon(ImageUtils.dye(sheetMenuItemIcon, menuItemColor));
        playQueueSheetMenuItem.setDisabledIcon(ImageUtils.dye(sheetMenuItemIcon, disabledColor));
        playQueueSearchSongMenuItem.setIcon(ImageUtils.dye(searchSongItemIcon, menuItemColor));
        playQueueSimilarSongMenuItem.setIcon(ImageUtils.dye(similarMenuItemIcon, menuItemColor));
        playQueueSimilarSongMenuItem.setDisabledIcon(ImageUtils.dye(similarMenuItemIcon, disabledColor));
        playQueueRelatedPlaylistMenuItem.setIcon(ImageUtils.dye(relatedPlaylistMenuItemIcon, menuItemColor));
        playQueueRelatedPlaylistMenuItem.setDisabledIcon(ImageUtils.dye(relatedPlaylistMenuItemIcon, disabledColor));
        playQueueAuthorMenuItem.setIcon(ImageUtils.dye(similarArtistMenuItemIcon, menuItemColor));
        playQueueAuthorMenuItem.setDisabledIcon(ImageUtils.dye(similarArtistMenuItemIcon, disabledColor));
        playQueueAlbumMenuItem.setIcon(ImageUtils.dye(browseAlbumMenuItemIcon, menuItemColor));
        playQueueAlbumMenuItem.setDisabledIcon(ImageUtils.dye(browseAlbumMenuItemIcon, disabledColor));
        playQueueRecRadioMenuItem.setIcon(ImageUtils.dye(radioMenuItemIcon, menuItemColor));
        playQueueRecRadioMenuItem.setDisabledIcon(ImageUtils.dye(radioMenuItemIcon, disabledColor));
        playQueueRelatedMvMenuItem.setIcon(ImageUtils.dye(similarMvMenuItemIcon, menuItemColor));
        playQueueRelatedMvMenuItem.setDisabledIcon(ImageUtils.dye(similarMvMenuItemIcon, disabledColor));
        playQueueCopyNameMenuItem.setIcon(ImageUtils.dye(copyNameMenuItemIcon, menuItemColor));
        playQueueLocateFileMenuItem.setIcon(ImageUtils.dye(locateFileMenuItemIcon, menuItemColor));
        playQueueLocateFileMenuItem.setDisabledIcon(ImageUtils.dye(locateFileMenuItemIcon, disabledColor));
        playQueueEditInfoMenuItem.setIcon(ImageUtils.dye(editInfoMenuItemIcon, menuItemColor));
        playQueueEditInfoMenuItem.setDisabledIcon(ImageUtils.dye(editInfoMenuItemIcon, disabledColor));
        playQueueRemoveMenuItem.setIcon(ImageUtils.dye(removeMenuItemIcon, menuItemColor));

        // 菜单项文字颜色
        updateMenuItemStyle(mottoPopupMenu, menuItemColor);
        updateMenuItemStyle(trayPopupMenu, menuItemColor);
        updateMenuItemStyle(stylePopupMenu, menuItemColor);
        updateMenuItemStyle(addPopupMenu, menuItemColor);
        updateMenuItemStyle(sortPopupMenu, menuItemColor);
        updateMenuItemStyle(albumImagePopupMenu, menuItemColor);
        updateMenuItemStyle(descriptionPanelPopupMenu, menuItemColor);
        updateMenuItemStyle(songNamePopupMenu, menuItemColor);
        updateMenuItemStyle(artistPopupMenu, menuItemColor);
        updateMenuItemStyle(albumPopupMenu, menuItemColor);
        updateMenuItemStyle(lrcPopupMenu, menuItemColor);
//        updateMenuItemStyle(ratePopupMenu, menuItemColor);
        updateMenuItemStyle(playModePopupMenu, menuItemColor);
        updateMenuItemStyle(blurPopupMenu, menuItemColor);
        updateMenuItemStyle(mainMenu, menuItemColor);
        updateMenuItemStyle(musicPopupMenu, menuItemColor);
        updateMenuItemStyle(netMusicPopupMenu, menuItemColor);
        updateMenuItemStyle(netPlaylistPopupMenu, menuItemColor);
        updateMenuItemStyle(netAlbumPopupMenu, menuItemColor);
        updateMenuItemStyle(netArtistPopupMenu, menuItemColor);
        updateMenuItemStyle(netRadioPopupMenu, menuItemColor);
        updateMenuItemStyle(netRankingPopupMenu, menuItemColor);
        updateMenuItemStyle(netUserPopupMenu, menuItemColor);
        updateMenuItemStyle(netCommentPopupMenu, menuItemColor);
        updateMenuItemStyle(netSheetPopupMenu, menuItemColor);
        updateMenuItemStyle(netMvPopupMenu, menuItemColor);
        updateMenuItemStyle(downloadPopupMenu, menuItemColor);
        updateMenuItemStyle(playQueuePopupMenu, menuItemColor);

        // 工具栏消除边框和透明、选项卡面板透明
        tabbedPane.setUI(new TabbedPaneUI());
        collectionTabbedPane.setUI(new TabbedPaneUI());

        // 关键词面板
        netMusicSearchSuggestionLabel.setForeground(style.getLabelColor());
        netMusicRefreshSearchSuggestionButton.setIcon(ImageUtils.dye((ImageIcon) netMusicRefreshSearchSuggestionButton.getIcon(), buttonColor));

        netMusicHotSearchLabel.setForeground(style.getLabelColor());
        netMusicRefreshHotSearchButton.setIcon(ImageUtils.dye((ImageIcon) netMusicRefreshHotSearchButton.getIcon(), buttonColor));

        netMusicHistorySearchLabel.setForeground(style.getLabelColor());
        netMusicClearHistorySearchButton.setIcon(ImageUtils.dye((ImageIcon) netMusicClearHistorySearchButton.getIcon(), buttonColor));

        netPlaylistHistorySearchLabel.setForeground(style.getLabelColor());
        netPlaylistClearHistorySearchButton.setIcon(ImageUtils.dye((ImageIcon) netPlaylistClearHistorySearchButton.getIcon(), buttonColor));

        netAlbumHistorySearchLabel.setForeground(style.getLabelColor());
        netAlbumClearHistorySearchButton.setIcon(ImageUtils.dye((ImageIcon) netAlbumClearHistorySearchButton.getIcon(), buttonColor));

        netArtistHistorySearchLabel.setForeground(style.getLabelColor());
        netArtistClearHistorySearchButton.setIcon(ImageUtils.dye((ImageIcon) netArtistClearHistorySearchButton.getIcon(), buttonColor));

        netRadioHistorySearchLabel.setForeground(style.getLabelColor());
        netRadioClearHistorySearchButton.setIcon(ImageUtils.dye((ImageIcon) netRadioClearHistorySearchButton.getIcon(), buttonColor));

        netMvHistorySearchLabel.setForeground(style.getLabelColor());
        netMvClearHistorySearchButton.setIcon(ImageUtils.dye((ImageIcon) netMvClearHistorySearchButton.getIcon(), buttonColor));

        netUserHistorySearchLabel.setForeground(style.getLabelColor());
        netUserClearHistorySearchButton.setIcon(ImageUtils.dye((ImageIcon) netUserClearHistorySearchButton.getIcon(), buttonColor));

        Component[] components = netMusicSearchSuggestionInnerPanel2.getComponents();
        for (Component c : components) {
            if (c instanceof DialogButton) {
                DialogButton b = (DialogButton) c;
                b.setForeColor(buttonColor);
            }
        }
        components = netMusicHotSearchInnerPanel2.getComponents();
        for (Component c : components) {
            if (c instanceof DialogButton) {
                DialogButton b = (DialogButton) c;
                b.setForeColor(buttonColor);
            }
        }
        components = netMusicHistorySearchInnerPanel2.getComponents();
        for (Component c : components) {
            if (c instanceof DialogButton) {
                DialogButton b = (DialogButton) c;
                b.setForeColor(buttonColor);
            }
        }
        components = netPlaylistHistorySearchInnerPanel2.getComponents();
        for (Component c : components) {
            if (c instanceof DialogButton) {
                DialogButton b = (DialogButton) c;
                b.setForeColor(buttonColor);
            }
        }
        components = netAlbumHistorySearchInnerPanel2.getComponents();
        for (Component c : components) {
            if (c instanceof DialogButton) {
                DialogButton b = (DialogButton) c;
                b.setForeColor(buttonColor);
            }
        }
        components = netArtistHistorySearchInnerPanel2.getComponents();
        for (Component c : components) {
            if (c instanceof DialogButton) {
                DialogButton b = (DialogButton) c;
                b.setForeColor(buttonColor);
            }
        }
        components = netRadioHistorySearchInnerPanel2.getComponents();
        for (Component c : components) {
            if (c instanceof DialogButton) {
                DialogButton b = (DialogButton) c;
                b.setForeColor(buttonColor);
            }
        }
        components = netMvHistorySearchInnerPanel2.getComponents();
        for (Component c : components) {
            if (c instanceof DialogButton) {
                DialogButton b = (DialogButton) c;
                b.setForeColor(buttonColor);
            }
        }
        components = netUserHistorySearchInnerPanel2.getComponents();
        for (Component c : components) {
            if (c instanceof DialogButton) {
                DialogButton b = (DialogButton) c;
                b.setForeColor(buttonColor);
            }
        }
        // 筛选框透明
        FocusListener[] focusListeners = filterTextField.getFocusListeners();
        for (FocusListener focusListener : focusListeners) {
            if (focusListener instanceof TextFieldHintListener) {
                ((TextFieldHintListener) focusListener).setInputColor(labelColor);
                ((TextFieldHintListener) focusListener).setPlaceholderColor(ColorUtils.darker(labelColor));
            }
        }
        filterTextField.setForeground(filterTextField.isOccupied() ? labelColor : ColorUtils.darker(labelColor));
        filterTextField.setCaretColor(labelColor);
        // 在线音乐搜索栏透明
        focusListeners = searchTextField.getFocusListeners();
        for (FocusListener focusListener : focusListeners) {
            if (focusListener instanceof TextFieldHintListener) {
                ((TextFieldHintListener) focusListener).setInputColor(labelColor);
                ((TextFieldHintListener) focusListener).setPlaceholderColor(ColorUtils.darker(labelColor));
            }
        }
        searchTextField.setForeground(searchTextField.isOccupied() ? labelColor : ColorUtils.darker(labelColor));
        searchTextField.setCaretColor(labelColor);
        netMusicSourceComboBox.setUI(new ComboBoxUI(netMusicSourceComboBox, THIS, buttonColor));
        netMusicSearchTypeComboBox.setUI(new ComboBoxUI(netMusicSearchTypeComboBox, THIS, buttonColor));
        netMusicSearchSubTypeComboBox.setUI(new ComboBoxUI(netMusicSearchSubTypeComboBox, THIS, buttonColor));
        netMusicPageTextField.setForeground(labelColor);
        netMusicPageTextField.setCaretColor(labelColor);
        // 歌单搜索栏透明
        focusListeners = netPlaylistSearchTextField.getFocusListeners();
        for (FocusListener focusListener : focusListeners) {
            if (focusListener instanceof TextFieldHintListener) {
                ((TextFieldHintListener) focusListener).setInputColor(labelColor);
                ((TextFieldHintListener) focusListener).setPlaceholderColor(ColorUtils.darker(labelColor));
            }
        }
        netPlaylistSearchTextField.setForeground(netPlaylistSearchTextField.isOccupied() ? labelColor : ColorUtils.darker(labelColor));
        netPlaylistSearchTextField.setCaretColor(labelColor);
        netPlaylistSourceComboBox.setUI(new ComboBoxUI(netPlaylistSourceComboBox, THIS, buttonColor));
        netPlaylistPageTextField.setForeground(labelColor);
        netPlaylistPageTextField.setCaretColor(labelColor);
        netPlaylistPlayAllButton.setForeground(buttonColor);
        // 专辑搜索栏透明
        focusListeners = netAlbumSearchTextField.getFocusListeners();
        for (FocusListener focusListener : focusListeners) {
            if (focusListener instanceof TextFieldHintListener) {
                ((TextFieldHintListener) focusListener).setInputColor(labelColor);
                ((TextFieldHintListener) focusListener).setPlaceholderColor(ColorUtils.darker(labelColor));
            }
        }
        netAlbumSearchTextField.setForeground(netAlbumSearchTextField.isOccupied() ? labelColor : ColorUtils.darker(labelColor));
        netAlbumSearchTextField.setCaretColor(labelColor);
        netAlbumSourceComboBox.setUI(new ComboBoxUI(netAlbumSourceComboBox, THIS, buttonColor));
        netAlbumPageTextField.setForeground(labelColor);
        netAlbumPageTextField.setCaretColor(labelColor);
        netAlbumPlayAllButton.setForeground(buttonColor);
        // 歌手搜索栏透明
        focusListeners = netArtistSearchTextField.getFocusListeners();
        for (FocusListener focusListener : focusListeners) {
            if (focusListener instanceof TextFieldHintListener) {
                ((TextFieldHintListener) focusListener).setInputColor(labelColor);
                ((TextFieldHintListener) focusListener).setPlaceholderColor(ColorUtils.darker(labelColor));
            }
        }
        netArtistSearchTextField.setForeground(netArtistSearchTextField.isOccupied() ? labelColor : ColorUtils.darker(labelColor));
        netArtistSearchTextField.setCaretColor(labelColor);
        netArtistSourceComboBox.setUI(new ComboBoxUI(netArtistSourceComboBox, THIS, buttonColor));
        netArtistPageTextField.setForeground(labelColor);
        netArtistPageTextField.setCaretColor(labelColor);
        netArtistPlayAllButton.setForeground(buttonColor);
        // 电台搜索栏透明
        focusListeners = netRadioSearchTextField.getFocusListeners();
        for (FocusListener focusListener : focusListeners) {
            if (focusListener instanceof TextFieldHintListener) {
                ((TextFieldHintListener) focusListener).setInputColor(labelColor);
                ((TextFieldHintListener) focusListener).setPlaceholderColor(ColorUtils.darker(labelColor));
            }
        }
        netRadioSearchTextField.setForeground(netRadioSearchTextField.isOccupied() ? labelColor : ColorUtils.darker(labelColor));
        netRadioSearchTextField.setCaretColor(labelColor);
        netRadioSourceComboBox.setUI(new ComboBoxUI(netRadioSourceComboBox, THIS, buttonColor));
        netRadioPageTextField.setForeground(labelColor);
        netRadioPageTextField.setCaretColor(labelColor);
        netRadioPlayAllButton.setForeground(buttonColor);
        // MV 搜索栏透明
        focusListeners = netMvSearchTextField.getFocusListeners();
        for (FocusListener focusListener : focusListeners) {
            if (focusListener instanceof TextFieldHintListener) {
                ((TextFieldHintListener) focusListener).setInputColor(labelColor);
                ((TextFieldHintListener) focusListener).setPlaceholderColor(ColorUtils.darker(labelColor));
            }
        }
        netMvSearchTextField.setForeground(netMvSearchTextField.isOccupied() ? labelColor : ColorUtils.darker(labelColor));
        netMvSearchTextField.setCaretColor(labelColor);
        netMvSourceComboBox.setUI(new ComboBoxUI(netMvSourceComboBox, THIS, buttonColor));
        netMvPageTextField.setForeground(labelColor);
        netMvPageTextField.setCaretColor(labelColor);
        // 榜单搜索栏透明
        netRankingPageTextField.setForeground(labelColor);
        netRankingPageTextField.setCaretColor(labelColor);
        netRankingPlayAllButton.setForeground(buttonColor);
        // 用户搜索栏透明
        focusListeners = netUserSearchTextField.getFocusListeners();
        for (FocusListener focusListener : focusListeners) {
            if (focusListener instanceof TextFieldHintListener) {
                ((TextFieldHintListener) focusListener).setInputColor(labelColor);
                ((TextFieldHintListener) focusListener).setPlaceholderColor(ColorUtils.darker(labelColor));
            }
        }
        netUserSearchTextField.setForeground(netUserSearchTextField.isOccupied() ? labelColor : ColorUtils.darker(labelColor));
        netUserSearchTextField.setCaretColor(labelColor);
        netUserSourceComboBox.setUI(new ComboBoxUI(netUserSourceComboBox, THIS, buttonColor));
        netUserRecordTypeComboBox.setUI(new ComboBoxUI(netUserRecordTypeComboBox, THIS, buttonColor));
        netUserPageTextField.setForeground(labelColor);
        netUserPageTextField.setCaretColor(labelColor);
        netUserPlayAllButton.setForeground(buttonColor);
        // 榜单栏
        netRankingSourceComboBox.setUI(new ComboBoxUI(netRankingSourceComboBox, THIS, buttonColor));
        // 评论栏透明
        netCommentTypeComboBox.setUI(new ComboBoxUI(netCommentTypeComboBox, THIS, buttonColor));
        netCommentPageTextField.setForeground(labelColor);
        netCommentPageTextField.setCaretColor(labelColor);
        // 乐谱栏透明
        netSheetPageTextField.setForeground(labelColor);
        netSheetPageTextField.setCaretColor(labelColor);
        // 推荐页码文本框
        netRecommendSourceComboBox.setUI(new ComboBoxUI(netRecommendSourceComboBox, THIS, buttonColor));
        netRecommendPageTextField.setForeground(labelColor);
        netRecommendPageTextField.setCaretColor(labelColor);
        netRecommendTagComboBox.setUI(new ComboBoxUI(netRecommendTagComboBox, THIS, buttonColor, 240));
        netRecommendPlayAllButton.setForeground(buttonColor);
        // 收藏页码文本框
        collectionRecordTypeComboBox.setUI(new ComboBoxUI(collectionRecordTypeComboBox, THIS, buttonColor));
        collectionPageTextField.setForeground(labelColor);
        collectionPageTextField.setCaretColor(labelColor);
        collectionPlayAllButton.setForeground(buttonColor);
        // 推荐工具栏按钮透明
        playlistRecommendButton.setForeground(buttonColor);
        highQualityPlaylistButton.setForeground(buttonColor);
        hotMusicButton.setForeground(buttonColor);
        netMusicRecommendButton.setForeground(buttonColor);
        newAlbumRecommendButton.setForeground(buttonColor);
        artistListRecommendButton.setForeground(buttonColor);
        newRadioRecommendButton.setForeground(buttonColor);
        hotRadioRecommendButton.setForeground(buttonColor);
        programRecommendButton.setForeground(buttonColor);
        mvRecommendButton.setForeground(buttonColor);
        // 个人音乐工具栏按钮透明
        localMusicButton.setForeground(buttonColor);
        historyButton.setForeground(buttonColor);
        collectionButton.setForeground(buttonColor);
        // 工具栏按钮颜色
        localMusicButton.setIcon(ImageUtils.dye((ImageIcon) localMusicButton.getIcon(), buttonColor));
        historyButton.setIcon(ImageUtils.dye((ImageIcon) historyButton.getIcon(), buttonColor));
        collectionButton.setIcon(ImageUtils.dye((ImageIcon) collectionButton.getIcon(), buttonColor));
        addToolButton.setIcon(ImageUtils.dye((ImageIcon) addToolButton.getIcon(), buttonColor));
        reimportToolButton.setIcon(ImageUtils.dye((ImageIcon) reimportToolButton.getIcon(), buttonColor));
        manageCatalogToolButton.setIcon(ImageUtils.dye((ImageIcon) manageCatalogToolButton.getIcon(), buttonColor));
        removeToolButton.setIcon(ImageUtils.dye((ImageIcon) removeToolButton.getIcon(), buttonColor));
        clearToolButton.setIcon(ImageUtils.dye((ImageIcon) clearToolButton.getIcon(), buttonColor));
        duplicateToolButton.setIcon(ImageUtils.dye((ImageIcon) duplicateToolButton.getIcon(), buttonColor));
        reverseToolButton.setIcon(ImageUtils.dye((ImageIcon) reverseToolButton.getIcon(), buttonColor));
        sortToolButton.setIcon(ImageUtils.dye((ImageIcon) sortToolButton.getIcon(), buttonColor));
        moveUpToolButton.setIcon(ImageUtils.dye((ImageIcon) moveUpToolButton.getIcon(), buttonColor));
        moveDownToolButton.setIcon(ImageUtils.dye((ImageIcon) moveDownToolButton.getIcon(), buttonColor));
        clearInputToolButton.setIcon(ImageUtils.dye((ImageIcon) clearInputToolButton.getIcon(), buttonColor));
        // 在线音乐搜索栏按钮颜色
        netMusicBackwardButton.setIcon(ImageUtils.dye((ImageIcon) netMusicBackwardButton.getIcon(), buttonColor));
        netMusicClearInputButton.setIcon(ImageUtils.dye((ImageIcon) netMusicClearInputButton.getIcon(), buttonColor));
        searchButton.setIcon(ImageUtils.dye((ImageIcon) searchButton.getIcon(), buttonColor));
        netMusicRefreshButton.setIcon(ImageUtils.dye((ImageIcon) netMusicRefreshButton.getIcon(), buttonColor));
        netMusicStartPageButton.setIcon(ImageUtils.dye((ImageIcon) netMusicStartPageButton.getIcon(), buttonColor));
        netMusicLastPageButton.setIcon(ImageUtils.dye((ImageIcon) netMusicLastPageButton.getIcon(), buttonColor));
        netMusicGoButton.setIcon(ImageUtils.dye((ImageIcon) netMusicGoButton.getIcon(), buttonColor));
        netMusicNextPageButton.setIcon(ImageUtils.dye((ImageIcon) netMusicNextPageButton.getIcon(), buttonColor));
        netMusicEndPageButton.setIcon(ImageUtils.dye((ImageIcon) netMusicEndPageButton.getIcon(), buttonColor));
        // 歌单搜索栏按钮颜色
        netPlaylistBackwardButton.setIcon(ImageUtils.dye((ImageIcon) netPlaylistBackwardButton.getIcon(), buttonColor));
        netPlaylistClearInputButton.setIcon(ImageUtils.dye((ImageIcon) netPlaylistClearInputButton.getIcon(), buttonColor));
        netPlaylistSearchButton.setIcon(ImageUtils.dye((ImageIcon) netPlaylistSearchButton.getIcon(), buttonColor));
        netPlaylistPlayAllButton.setIcon(ImageUtils.dye((ImageIcon) netPlaylistPlayAllButton.getIcon(), buttonColor));
        netPlaylistRefreshButton.setIcon(ImageUtils.dye((ImageIcon) netPlaylistRefreshButton.getIcon(), buttonColor));
        netPlaylistStartPageButton.setIcon(ImageUtils.dye((ImageIcon) netPlaylistStartPageButton.getIcon(), buttonColor));
        netPlaylistLastPageButton.setIcon(ImageUtils.dye((ImageIcon) netPlaylistLastPageButton.getIcon(), buttonColor));
        netPlaylistGoButton.setIcon(ImageUtils.dye((ImageIcon) netPlaylistGoButton.getIcon(), buttonColor));
        netPlaylistNextPageButton.setIcon(ImageUtils.dye((ImageIcon) netPlaylistNextPageButton.getIcon(), buttonColor));
        netPlaylistEndPageButton.setIcon(ImageUtils.dye((ImageIcon) netPlaylistEndPageButton.getIcon(), buttonColor));
        // 专辑搜索栏按钮颜色
        netAlbumBackwardButton.setIcon(ImageUtils.dye((ImageIcon) netAlbumBackwardButton.getIcon(), buttonColor));
        netAlbumClearInputButton.setIcon(ImageUtils.dye((ImageIcon) netAlbumClearInputButton.getIcon(), buttonColor));
        netAlbumSearchButton.setIcon(ImageUtils.dye((ImageIcon) netAlbumSearchButton.getIcon(), buttonColor));
        netAlbumPlayAllButton.setIcon(ImageUtils.dye((ImageIcon) netAlbumPlayAllButton.getIcon(), buttonColor));
        netAlbumRefreshButton.setIcon(ImageUtils.dye((ImageIcon) netAlbumRefreshButton.getIcon(), buttonColor));
        netAlbumStartPageButton.setIcon(ImageUtils.dye((ImageIcon) netAlbumStartPageButton.getIcon(), buttonColor));
        netAlbumLastPageButton.setIcon(ImageUtils.dye((ImageIcon) netAlbumLastPageButton.getIcon(), buttonColor));
        netAlbumGoButton.setIcon(ImageUtils.dye((ImageIcon) netAlbumGoButton.getIcon(), buttonColor));
        netAlbumNextPageButton.setIcon(ImageUtils.dye((ImageIcon) netAlbumNextPageButton.getIcon(), buttonColor));
        netAlbumEndPageButton.setIcon(ImageUtils.dye((ImageIcon) netAlbumEndPageButton.getIcon(), buttonColor));
        // 歌手搜索栏按钮颜色
        netArtistBackwardButton.setIcon(ImageUtils.dye((ImageIcon) netArtistBackwardButton.getIcon(), buttonColor));
        netArtistClearInputButton.setIcon(ImageUtils.dye((ImageIcon) netArtistClearInputButton.getIcon(), buttonColor));
        netArtistSearchButton.setIcon(ImageUtils.dye((ImageIcon) netArtistSearchButton.getIcon(), buttonColor));
        netArtistPlayAllButton.setIcon(ImageUtils.dye((ImageIcon) netArtistPlayAllButton.getIcon(), buttonColor));
        netArtistRefreshButton.setIcon(ImageUtils.dye((ImageIcon) netArtistRefreshButton.getIcon(), buttonColor));
        netArtistStartPageButton.setIcon(ImageUtils.dye((ImageIcon) netArtistStartPageButton.getIcon(), buttonColor));
        netArtistLastPageButton.setIcon(ImageUtils.dye((ImageIcon) netArtistLastPageButton.getIcon(), buttonColor));
        netArtistGoButton.setIcon(ImageUtils.dye((ImageIcon) netArtistGoButton.getIcon(), buttonColor));
        netArtistNextPageButton.setIcon(ImageUtils.dye((ImageIcon) netArtistNextPageButton.getIcon(), buttonColor));
        netArtistEndPageButton.setIcon(ImageUtils.dye((ImageIcon) netArtistEndPageButton.getIcon(), buttonColor));
        // 电台搜索栏按钮颜色
        netRadioBackwardButton.setIcon(ImageUtils.dye((ImageIcon) netRadioBackwardButton.getIcon(), buttonColor));
        netRadioClearInputButton.setIcon(ImageUtils.dye((ImageIcon) netRadioClearInputButton.getIcon(), buttonColor));
        netRadioSearchButton.setIcon(ImageUtils.dye((ImageIcon) netRadioSearchButton.getIcon(), buttonColor));
        netRadioPlayAllButton.setIcon(ImageUtils.dye((ImageIcon) netRadioPlayAllButton.getIcon(), buttonColor));
        netRadioRefreshButton.setIcon(ImageUtils.dye((ImageIcon) netRadioRefreshButton.getIcon(), buttonColor));
        netRadioStartPageButton.setIcon(ImageUtils.dye((ImageIcon) netRadioStartPageButton.getIcon(), buttonColor));
        netRadioLastPageButton.setIcon(ImageUtils.dye((ImageIcon) netRadioLastPageButton.getIcon(), buttonColor));
        netRadioGoButton.setIcon(ImageUtils.dye((ImageIcon) netRadioGoButton.getIcon(), buttonColor));
        netRadioNextPageButton.setIcon(ImageUtils.dye((ImageIcon) netRadioNextPageButton.getIcon(), buttonColor));
        netRadioEndPageButton.setIcon(ImageUtils.dye((ImageIcon) netRadioEndPageButton.getIcon(), buttonColor));
        // MV 搜索栏按钮颜色
        netMvSortTypeComboBox.setUI(new ComboBoxUI(netMvSortTypeComboBox, THIS, buttonColor));
        netMvBackwardButton.setIcon(ImageUtils.dye((ImageIcon) netMvBackwardButton.getIcon(), buttonColor));
        netMvClearInputButton.setIcon(ImageUtils.dye((ImageIcon) netMvClearInputButton.getIcon(), buttonColor));
        netMvSearchButton.setIcon(ImageUtils.dye((ImageIcon) netMvSearchButton.getIcon(), buttonColor));
        netMvRefreshButton.setIcon(ImageUtils.dye((ImageIcon) netMvRefreshButton.getIcon(), buttonColor));
        netMvStartPageButton.setIcon(ImageUtils.dye((ImageIcon) netMvStartPageButton.getIcon(), buttonColor));
        netMvLastPageButton.setIcon(ImageUtils.dye((ImageIcon) netMvLastPageButton.getIcon(), buttonColor));
        netMvGoButton.setIcon(ImageUtils.dye((ImageIcon) netMvGoButton.getIcon(), buttonColor));
        netMvNextPageButton.setIcon(ImageUtils.dye((ImageIcon) netMvNextPageButton.getIcon(), buttonColor));
        netMvEndPageButton.setIcon(ImageUtils.dye((ImageIcon) netMvEndPageButton.getIcon(), buttonColor));
        // 榜单搜索栏按钮颜色
        netRankingBackwardButton.setIcon(ImageUtils.dye((ImageIcon) netRankingBackwardButton.getIcon(), buttonColor));
        netRankingPlayAllButton.setIcon(ImageUtils.dye((ImageIcon) netRankingPlayAllButton.getIcon(), buttonColor));
        netRankingRefreshButton.setIcon(ImageUtils.dye((ImageIcon) netRankingRefreshButton.getIcon(), buttonColor));
        netRankingStartPageButton.setIcon(ImageUtils.dye((ImageIcon) netRankingStartPageButton.getIcon(), buttonColor));
        netRankingLastPageButton.setIcon(ImageUtils.dye((ImageIcon) netRankingLastPageButton.getIcon(), buttonColor));
        netRankingGoButton.setIcon(ImageUtils.dye((ImageIcon) netRankingGoButton.getIcon(), buttonColor));
        netRankingNextPageButton.setIcon(ImageUtils.dye((ImageIcon) netRankingNextPageButton.getIcon(), buttonColor));
        netRankingEndPageButton.setIcon(ImageUtils.dye((ImageIcon) netRankingEndPageButton.getIcon(), buttonColor));
        // 用户搜索栏按钮颜色
        netUserBackwardButton.setIcon(ImageUtils.dye((ImageIcon) netUserBackwardButton.getIcon(), buttonColor));
        netUserClearInputButton.setIcon(ImageUtils.dye((ImageIcon) netUserClearInputButton.getIcon(), buttonColor));
        netUserSearchButton.setIcon(ImageUtils.dye((ImageIcon) netUserSearchButton.getIcon(), buttonColor));
        netUserPlayAllButton.setIcon(ImageUtils.dye((ImageIcon) netUserPlayAllButton.getIcon(), buttonColor));
        netUserRefreshButton.setIcon(ImageUtils.dye((ImageIcon) netUserRefreshButton.getIcon(), buttonColor));
        netUserStartPageButton.setIcon(ImageUtils.dye((ImageIcon) netUserStartPageButton.getIcon(), buttonColor));
        netUserLastPageButton.setIcon(ImageUtils.dye((ImageIcon) netUserLastPageButton.getIcon(), buttonColor));
        netUserGoButton.setIcon(ImageUtils.dye((ImageIcon) netUserGoButton.getIcon(), buttonColor));
        netUserNextPageButton.setIcon(ImageUtils.dye((ImageIcon) netUserNextPageButton.getIcon(), buttonColor));
        netUserEndPageButton.setIcon(ImageUtils.dye((ImageIcon) netUserEndPageButton.getIcon(), buttonColor));
        // 评论栏按钮颜色
        netCommentBackwardButton.setIcon(ImageUtils.dye((ImageIcon) netCommentBackwardButton.getIcon(), buttonColor));
        netCommentRefreshButton.setIcon(ImageUtils.dye((ImageIcon) netCommentRefreshButton.getIcon(), buttonColor));
        netCommentStartPageButton.setIcon(ImageUtils.dye((ImageIcon) netCommentStartPageButton.getIcon(), buttonColor));
        netCommentLastPageButton.setIcon(ImageUtils.dye((ImageIcon) netCommentLastPageButton.getIcon(), buttonColor));
        netCommentGoButton.setIcon(ImageUtils.dye((ImageIcon) netCommentGoButton.getIcon(), buttonColor));
        netCommentNextPageButton.setIcon(ImageUtils.dye((ImageIcon) netCommentNextPageButton.getIcon(), buttonColor));
        netCommentEndPageButton.setIcon(ImageUtils.dye((ImageIcon) netCommentEndPageButton.getIcon(), buttonColor));
        // 乐谱栏按钮颜色
        netSheetBackwardButton.setIcon(ImageUtils.dye((ImageIcon) netSheetBackwardButton.getIcon(), buttonColor));
        netSheetRefreshButton.setIcon(ImageUtils.dye((ImageIcon) netSheetRefreshButton.getIcon(), buttonColor));
        netSheetStartPageButton.setIcon(ImageUtils.dye((ImageIcon) netSheetStartPageButton.getIcon(), buttonColor));
        netSheetLastPageButton.setIcon(ImageUtils.dye((ImageIcon) netSheetLastPageButton.getIcon(), buttonColor));
        netSheetGoButton.setIcon(ImageUtils.dye((ImageIcon) netSheetGoButton.getIcon(), buttonColor));
        netSheetNextPageButton.setIcon(ImageUtils.dye((ImageIcon) netSheetNextPageButton.getIcon(), buttonColor));
        netSheetEndPageButton.setIcon(ImageUtils.dye((ImageIcon) netSheetEndPageButton.getIcon(), buttonColor));
        // 推荐工具栏按钮颜色
        playlistRecommendButton.setIcon(ImageUtils.dye((ImageIcon) playlistRecommendButton.getIcon(), buttonColor));
        highQualityPlaylistButton.setIcon(ImageUtils.dye((ImageIcon) highQualityPlaylistButton.getIcon(), buttonColor));
        hotMusicButton.setIcon(ImageUtils.dye((ImageIcon) hotMusicButton.getIcon(), buttonColor));
        netMusicRecommendButton.setIcon(ImageUtils.dye((ImageIcon) netMusicRecommendButton.getIcon(), buttonColor));
        newAlbumRecommendButton.setIcon(ImageUtils.dye((ImageIcon) newAlbumRecommendButton.getIcon(), buttonColor));
        artistListRecommendButton.setIcon(ImageUtils.dye((ImageIcon) artistListRecommendButton.getIcon(), buttonColor));
        newRadioRecommendButton.setIcon(ImageUtils.dye((ImageIcon) newRadioRecommendButton.getIcon(), buttonColor));
        hotRadioRecommendButton.setIcon(ImageUtils.dye((ImageIcon) hotRadioRecommendButton.getIcon(), buttonColor));
        programRecommendButton.setIcon(ImageUtils.dye((ImageIcon) programRecommendButton.getIcon(), buttonColor));
        mvRecommendButton.setIcon(ImageUtils.dye((ImageIcon) mvRecommendButton.getIcon(), buttonColor));
        recommendBackwardButton.setIcon(ImageUtils.dye((ImageIcon) recommendBackwardButton.getIcon(), buttonColor));
        netRecommendPlayAllButton.setIcon(ImageUtils.dye((ImageIcon) netRecommendPlayAllButton.getIcon(), buttonColor));
        netRecommendRefreshButton.setIcon(ImageUtils.dye((ImageIcon) netRecommendRefreshButton.getIcon(), buttonColor));
        netRecommendStartPageButton.setIcon(ImageUtils.dye((ImageIcon) netRecommendStartPageButton.getIcon(), buttonColor));
        netRecommendLastPageButton.setIcon(ImageUtils.dye((ImageIcon) netRecommendLastPageButton.getIcon(), buttonColor));
        netRecommendGoButton.setIcon(ImageUtils.dye((ImageIcon) netRecommendGoButton.getIcon(), buttonColor));
        netRecommendNextPageButton.setIcon(ImageUtils.dye((ImageIcon) netRecommendNextPageButton.getIcon(), buttonColor));
        netRecommendEndPageButton.setIcon(ImageUtils.dye((ImageIcon) netRecommendEndPageButton.getIcon(), buttonColor));
        // 收藏工具栏按钮颜色
        collectionBackwardButton.setIcon(ImageUtils.dye((ImageIcon) collectionBackwardButton.getIcon(), buttonColor));
        collectionPlayAllButton.setIcon(ImageUtils.dye((ImageIcon) collectionPlayAllButton.getIcon(), buttonColor));
        collectionRefreshButton.setIcon(ImageUtils.dye((ImageIcon) collectionRefreshButton.getIcon(), buttonColor));
        collectionStartPageButton.setIcon(ImageUtils.dye((ImageIcon) collectionStartPageButton.getIcon(), buttonColor));
        collectionLastPageButton.setIcon(ImageUtils.dye((ImageIcon) collectionLastPageButton.getIcon(), buttonColor));
        collectionGoButton.setIcon(ImageUtils.dye((ImageIcon) collectionGoButton.getIcon(), buttonColor));
        collectionNextPageButton.setIcon(ImageUtils.dye((ImageIcon) collectionNextPageButton.getIcon(), buttonColor));
        collectionEndPageButton.setIcon(ImageUtils.dye((ImageIcon) collectionEndPageButton.getIcon(), buttonColor));
        // 下载工具栏按钮颜色
        restartSelectedTasksButton.setIcon(ImageUtils.dye((ImageIcon) restartSelectedTasksButton.getIcon(), buttonColor));
        cancelSelectedTasksButton.setIcon(ImageUtils.dye((ImageIcon) cancelSelectedTasksButton.getIcon(), buttonColor));
        removeSelectedTasksButton.setIcon(ImageUtils.dye((ImageIcon) removeSelectedTasksButton.getIcon(), buttonColor));
        restartAllTasksButton.setIcon(ImageUtils.dye((ImageIcon) restartAllTasksButton.getIcon(), buttonColor));
        cancelAllTasksButton.setIcon(ImageUtils.dye((ImageIcon) cancelAllTasksButton.getIcon(), buttonColor));
        removeAllTasksButton.setIcon(ImageUtils.dye((ImageIcon) removeAllTasksButton.getIcon(), buttonColor));
        // 播放队列工具栏按钮颜色
        playQueueRemoveToolButton.setIcon(ImageUtils.dye((ImageIcon) playQueueRemoveToolButton.getIcon(), buttonColor));
        playQueueClearToolButton.setIcon(ImageUtils.dye((ImageIcon) playQueueClearToolButton.getIcon(), buttonColor));
        playQueueDuplicateToolButton.setIcon(ImageUtils.dye((ImageIcon) playQueueDuplicateToolButton.getIcon(), buttonColor));
        playQueueReverseToolButton.setIcon(ImageUtils.dye((ImageIcon) playQueueReverseToolButton.getIcon(), buttonColor));
        playQueueMoveUpToolButton.setIcon(ImageUtils.dye((ImageIcon) playQueueMoveUpToolButton.getIcon(), buttonColor));
        playQueueMoveDownToolButton.setIcon(ImageUtils.dye((ImageIcon) playQueueMoveDownToolButton.getIcon(), buttonColor));

        // 工具栏下面的标签颜色
        countLabel.setForeground(labelColor);
        netMusicTitleLabel.setForeground(labelColor);
        netMusicCountLabel.setForeground(labelColor);
        netPlaylistTitleLabel.setForeground(labelColor);
        netPlaylistCountLabel.setForeground(labelColor);
        netAlbumTitleLabel.setForeground(labelColor);
        netAlbumCountLabel.setForeground(labelColor);
        netArtistTitleLabel.setForeground(labelColor);
        netArtistCountLabel.setForeground(labelColor);
        netRadioTitleLabel.setForeground(labelColor);
        netRadioCountLabel.setForeground(labelColor);
        netMvTitleLabel.setForeground(labelColor);
        netMvCountLabel.setForeground(labelColor);
        netRankingCountLabel.setForeground(labelColor);
        netUserTitleLabel.setForeground(labelColor);
        netUserCountLabel.setForeground(labelColor);
        netCommentTitleLabel.setForeground(labelColor);
        netCommentCountLabel.setForeground(labelColor);
        netSheetTitleLabel.setForeground(labelColor);
        netSheetCountLabel.setForeground(labelColor);
        recommendCountLabel.setForeground(labelColor);
        collectionCountLabel.setForeground(labelColor);
        taskCountLabel.setForeground(labelColor);
        playQueueCountLabel.setForeground(labelColor);

        // 播放列表透明
        TranslucentMusicListRenderer musicListRenderer = new TranslucentMusicListRenderer(player);
        musicListRenderer.setForeColor(foreColor);
        musicListRenderer.setSelectedColor(selectedColor);
        musicList.setCellRenderer(musicListRenderer);

        TranslucentNetMusicListRenderer netMusicListRenderer = new TranslucentNetMusicListRenderer(player);
        netMusicListRenderer.setForeColor(foreColor);
        netMusicListRenderer.setSelectedColor(selectedColor);
        netMusicList.setCellRenderer(netMusicListRenderer);

        TranslucentNetPlaylistListRenderer netPlaylistListRenderer = new TranslucentNetPlaylistListRenderer();
        netPlaylistListRenderer.setForeColor(foreColor);
        netPlaylistListRenderer.setSelectedColor(selectedColor);
        netPlaylistList.setCellRenderer(netPlaylistListRenderer);

        TranslucentNetAlbumListRenderer netAlbumListRenderer = new TranslucentNetAlbumListRenderer();
        netAlbumListRenderer.setForeColor(foreColor);
        netAlbumListRenderer.setSelectedColor(selectedColor);
        netAlbumList.setCellRenderer(netAlbumListRenderer);

        TranslucentNetArtistListRenderer netArtistListRenderer = new TranslucentNetArtistListRenderer();
        netArtistListRenderer.setForeColor(foreColor);
        netArtistListRenderer.setSelectedColor(selectedColor);
        netArtistList.setCellRenderer(netArtistListRenderer);

        TranslucentNetRadioListRenderer netRadioListRenderer = new TranslucentNetRadioListRenderer();
        netRadioListRenderer.setForeColor(foreColor);
        netRadioListRenderer.setSelectedColor(selectedColor);
        netRadioList.setCellRenderer(netRadioListRenderer);

        TranslucentNetMvListRenderer netMvListRenderer = new TranslucentNetMvListRenderer();
        netMvListRenderer.setForeColor(foreColor);
        netMvListRenderer.setSelectedColor(selectedColor);
        netMvList.setCellRenderer(netMvListRenderer);

        TranslucentNetRankingListRenderer netRankingListRenderer = new TranslucentNetRankingListRenderer();
        netRankingListRenderer.setForeColor(foreColor);
        netRankingListRenderer.setSelectedColor(selectedColor);
        netRankingList.setCellRenderer(netRankingListRenderer);

        TranslucentNetUserListRenderer netUserListRenderer = new TranslucentNetUserListRenderer();
        netUserListRenderer.setForeColor(foreColor);
        netUserListRenderer.setSelectedColor(selectedColor);
        netUserList.setCellRenderer(netUserListRenderer);

        TranslucentNetCommentListRenderer netCommentListRenderer = new TranslucentNetCommentListRenderer();
        netCommentListRenderer.setForeColor(foreColor);
        netCommentListRenderer.setSelectedColor(selectedColor);
        netCommentList.setCellRenderer(netCommentListRenderer);

        TranslucentNetSheetListRenderer netSheetListRenderer = new TranslucentNetSheetListRenderer();
        netSheetListRenderer.setForeColor(foreColor);
        netSheetListRenderer.setSelectedColor(selectedColor);
        netSheetList.setCellRenderer(netSheetListRenderer);

        TranslucentItemRecommendListRenderer itemRecommendListRenderer = new TranslucentItemRecommendListRenderer();
        itemRecommendListRenderer.setForeColor(foreColor);
        itemRecommendListRenderer.setSelectedColor(selectedColor);
        itemRecommendList.setCellRenderer(itemRecommendListRenderer);

        TranslucentItemRecommendListRenderer collectionListRenderer = new TranslucentItemRecommendListRenderer();
        collectionListRenderer.setForeColor(foreColor);
        collectionListRenderer.setSelectedColor(selectedColor);
        collectionList.setCellRenderer(collectionListRenderer);

        TranslucentDownloadListRenderer downloadListRenderer = new TranslucentDownloadListRenderer();
        downloadListRenderer.setForeColor(foreColor);
        downloadListRenderer.setSelectedColor(selectedColor);
        downloadList.setCellRenderer(downloadListRenderer);

        TranslucentMusicListRenderer playQueueRenderer = new TranslucentMusicListRenderer(player);
        playQueueRenderer.setForeColor(foreColor);
        playQueueRenderer.setSelectedColor(selectedColor);
        playQueue.setCellRenderer(tabbedPane.getSelectedIndex() == TabIndex.PLAY_QUEUE ? playQueueRenderer : null);
        this.playQueueRenderer = playQueueRenderer;

        // 歌单/专辑/歌手/电台/榜单描述
        playlistDescriptionScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));
        playlistDescriptionScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));

        albumDescriptionScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));
        albumDescriptionScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));

        artistDescriptionScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));
        artistDescriptionScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));

        radioDescriptionScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));
        radioDescriptionScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));

        rankingDescriptionScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));
        rankingDescriptionScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));

        userDescriptionScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));
        userDescriptionScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));

        recommendItemDescriptionScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));
        recommendItemDescriptionScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));

        collectionItemDescriptionScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));
        collectionItemDescriptionScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));

        playlistCoverAndNameLabel.setForeground(labelColor);
        albumCoverAndNameLabel.setForeground(labelColor);
        artistCoverAndNameLabel.setForeground(labelColor);
        radioCoverAndNameLabel.setForeground(labelColor);
        rankingCoverAndNameLabel.setForeground(labelColor);
        userCoverAndNameLabel.setForeground(labelColor);
        recommendItemCoverAndNameLabel.setForeground(labelColor);
        collectionItemCoverAndNameLabel.setForeground(labelColor);

        playlistTagLabel.setForeground(labelColor);
        playlistDescriptionLabel.setForeground(labelColor);
        albumDescriptionLabel.setForeground(labelColor);
        artistTagLabel.setForeground(labelColor);
        artistDescriptionLabel.setForeground(labelColor);
        radioTagLabel.setForeground(labelColor);
        radioDescriptionLabel.setForeground(labelColor);
        rankingDescriptionLabel.setForeground(labelColor);
        userTagLabel.setForeground(labelColor);
        userDescriptionLabel.setForeground(labelColor);
        recommendItemTagLabel.setForeground(labelColor);
        recommendItemDescriptionLabel.setForeground(labelColor);
        collectionItemTagLabel.setForeground(labelColor);
        collectionItemDescriptionLabel.setForeground(labelColor);

        // 滚动面板消除边框、自定义样式
        musicScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        musicScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 关键词面板列表滚动面板消除边框、自定义样式
        netMusicKeywordsPanelScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netMusicKeywordsPanelScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 在线音乐列表滚动面板消除边框、自定义样式
        netMusicScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netMusicScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 歌单关键词面板列表滚动面板消除边框、自定义样式
        netPlaylistKeywordsPanelScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netPlaylistKeywordsPanelScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 在线歌单滚动面板消除边框、自定义样式
        netPlaylistScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netPlaylistScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 专辑关键词面板列表滚动面板消除边框、自定义样式
        netAlbumKeywordsPanelScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netAlbumKeywordsPanelScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 在线专辑滚动面板消除边框、自定义样式
        netAlbumScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netAlbumScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 歌手关键词面板列表滚动面板消除边框、自定义样式
        netArtistKeywordsPanelScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netArtistKeywordsPanelScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 在线歌手滚动面板消除边框、自定义样式
        netArtistScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netArtistScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 电台关键词面板列表滚动面板消除边框、自定义样式
        netRadioKeywordsPanelScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netRadioKeywordsPanelScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 在线电台滚动面板消除边框、自定义样式
        netRadioScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netRadioScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // MV 关键词面板列表滚动面板消除边框、自定义样式
        netMvKeywordsPanelScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netMvKeywordsPanelScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 在线 MV 滚动面板消除边框、自定义样式
        netMvScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netMvScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 榜单滚动面板消除边框、自定义样式
        netRankingScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netRankingScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 用户关键词面板列表滚动面板消除边框、自定义样式
        netUserKeywordsPanelScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netUserKeywordsPanelScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 在线用户滚动面板消除边框、自定义样式
        netUserScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netUserScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 评论滚动面板消除边框、自定义样式
        netCommentScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netCommentScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 乐谱滚动面板消除边框、自定义样式
        netSheetScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        netSheetScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 推荐滚动面板消除边框、自定义样式
        itemRecommendScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        itemRecommendScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 收藏滚动面板消除边框、自定义样式
        collectionScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        collectionScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 下载滚动面板消除边框、自定义样式
        downloadListScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        downloadListScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        // 播放队列滚动面板消除边框、自定义样式
        playQueueScrollPane.getHorizontalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));
        playQueueScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor()));

        // 歌词高亮显示
        TranslucentLrcListRenderer lrcListRenderer = new TranslucentLrcListRenderer();
        lrcListRenderer.setRow(row);
        lrcListRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        lrcListRenderer.setBackgroundColor(style.getLrcColor());        // 歌词颜色
        lrcListRenderer.setForegroundColor(style.getHighlightColor());
        lrcList.setCellRenderer(lrcListRenderer);
        lrcList.setUI(new ListUI(LRC_INDEX - 1));  // 歌词禁用字体透明，需要用到自定义 List

        lrcScrollPane.getVerticalScrollBar().setUI(new ScrollBarUI(style.getScrollBarColor(), false));

        // 进度条和控制面板透明
        timeBar.setUI(new SliderUI(timeBar, style.getTimeBarColor(), style.getTimeBarColor(), THIS, player, true));      // 自定义进度条 UI
        // 桌面歌词更新颜色
        desktopLyricDialog.setThemeColor(style.getLrcColor());
        desktopLyricDialog.setForeColor(style.getHighlightColor());
        desktopLyricDialog.updateStyle();
        // 时间标签用进度条的颜色
        currTimeLabel.setForeground(style.getTimeBarColor());
        durationLabel.setForeground(style.getTimeBarColor());

        changePaneButton.setForeground(style.getButtonColor());

        mvButton.setIcon(ImageUtils.dye((ImageIcon) mvButton.getIcon(), buttonColor));
        collectButton.setIcon(ImageUtils.dye((ImageIcon) collectButton.getIcon(), buttonColor));
        downloadButton.setIcon(ImageUtils.dye((ImageIcon) downloadButton.getIcon(), buttonColor));
        commentButton.setIcon(ImageUtils.dye((ImageIcon) commentButton.getIcon(), buttonColor));
        sheetButton.setIcon(ImageUtils.dye((ImageIcon) sheetButton.getIcon(), buttonColor));
        lastButton.setIcon(ImageUtils.dye((ImageIcon) lastButton.getIcon(), buttonColor));
        playOrPauseButton.setIcon(ImageUtils.dye((ImageIcon) playOrPauseButton.getIcon(), buttonColor));
        nextButton.setIcon(ImageUtils.dye((ImageIcon) nextButton.getIcon(), buttonColor));
        // 迷你窗口样式改变
//        if (miniDialog != null) {
//            miniDialog.infoLabel.setForeground(labelColor);
//            miniDialog.playLastButton.setIcon(lastButton.getIcon());
//            miniDialog.playOrPauseButton.setIcon(playOrPauseButton.getIcon());
//            miniDialog.playNextButton.setIcon(nextButton.getIcon());
//            miniDialog.closeButton.setIcon(closeButton.getIcon());
//        }
        playModeButton.setIcon(ImageUtils.dye((ImageIcon) playModeButton.getIcon(), buttonColor));
        backwardButton.setIcon(ImageUtils.dye((ImageIcon) backwardButton.getIcon(), buttonColor));
        forwardButton.setIcon(ImageUtils.dye((ImageIcon) forwardButton.getIcon(), buttonColor));
        muteButton.setIcon(ImageUtils.dye((ImageIcon) muteButton.getIcon(), buttonColor));
        rateButton.setIcon(ImageUtils.dye((ImageIcon) rateButton.getIcon(), buttonColor));
        switchSpectrumButton.setIcon(ImageUtils.dye((ImageIcon) switchSpectrumButton.getIcon(), buttonColor));
        blurButton.setIcon(ImageUtils.dye((ImageIcon) blurButton.getIcon(), buttonColor));
        soundEffectButton.setIcon(ImageUtils.dye((ImageIcon) soundEffectButton.getIcon(), buttonColor));
        goToPlayQueueButton.setIcon(ImageUtils.dye((ImageIcon) goToPlayQueueButton.getIcon(), buttonColor));
        desktopLyricButton.setIcon(ImageUtils.dye((ImageIcon) desktopLyricButton.getIcon(), buttonColor));
        switchChineseButton.setIcon(ImageUtils.dye((ImageIcon) switchChineseButton.getIcon(), buttonColor));
        switchJapaneseButton.setIcon(ImageUtils.dye((ImageIcon) switchJapaneseButton.getIcon(), buttonColor));
        switchLrcTypeButton.setIcon(ImageUtils.dye((ImageIcon) switchLrcTypeButton.getIcon(), buttonColor));
        volumeSlider.setUI(new SliderUI(volumeSlider, style.getSliderColor(), style.getSliderColor(), THIS, player, false));

        // 按钮图标颜色
        if (!player.loadedMusic() || player.loadedMusic() && player.getMusicInfo().getAlbumImage() == defaultAlbumImage) {
            changePaneButton.setIcon(ImageUtils.dye(new ImageIcon(
                    ImageUtils.setRadius(
                            ImageUtils.width(defaultAlbumImage, changePaneImageWidth), TINY_ARC)), buttonColor));
        }
        // 默认专辑图颜色
        if (player.loadedMusic() && player.getMusicInfo().getAlbumImage() == defaultAlbumImage) {
            BufferedImage albumImage = ImageUtils.borderShadow(ImageUtils.dye(ImageUtils.setRadius(ImageUtils.width(defaultAlbumImage, albumImageWidth), LARGE_ARC), labelColor));
            albumImageLabel.setIcon(new ImageIcon(albumImage));
        }
        // 其他标签颜色
        songNameLabel.setForeground(labelColor);
        artistLabel.setForeground(labelColor);
        albumLabel.setForeground(labelColor);
        // 切换风格，包含背景图，模糊状态并载入了音乐就不换
        if (blurType == BlurType.OFF || !player.loadedMusic()) {
            doStyleBlur(style);
        }
        // 标题图标
        setIconImage(ImageUtils.dye(titleIcon, labelColor).getImage());

        // 更新单选菜单项和标签按钮样式
        updateMenuItemIcon(sortPopupMenu);
//        updateMenuItemIcon(stylePopupMenu);
//        updateMenuItemIcon(ratePopupMenu);
        updateTabButtonStyle();

        // 根据选项卡选择的情况设置选项卡文字 + 图标颜色
        updateTabUI(tabbedPane, style);
        updateTabUI(collectionTabbedPane, style);

        globalPanel.repaint();
        System.gc();
    }

    // 打开编辑歌曲信息弹窗
    private void editInfo(AudioFile file) {
        try {
            EditInfoDialog editInfoDialog = new EditInfoDialog(THIS, true, "保存", file);
            editInfoDialog.showDialog();
        } catch (ClassNotFoundException classNotFoundException) {
            classNotFoundException.printStackTrace();
        } catch (UnsupportedLookAndFeelException unsupportedLookAndFeelException) {
            unsupportedLookAndFeelException.printStackTrace();
        } catch (InstantiationException instantiationException) {
            instantiationException.printStackTrace();
        } catch (IllegalAccessException illegalAccessException) {
            illegalAccessException.printStackTrace();
        } catch (InvocationTargetException invocationTargetException) {
            invocationTargetException.printStackTrace();
        }
    }

    // 打开自定义风格弹窗
    private void customStyle() {
        CustomStyleDialog customStyleDialog = new CustomStyleDialog(THIS, true, "添加并应用", currUIStyle);
        try {
            customStyleDialog.showDialog();
            if (customStyleDialog.getConfirmed()) {
                // 创建自定义样式并更换
                Object[] results = customStyleDialog.getResults();
                UIStyle customStyle = new UIStyle(
                        UIStyleConstants.CUSTOM,
                        ((String) results[0]),
                        "", ((Color) results[2]), ((Color) results[3]),
                        ((Color) results[4]), ((Color) results[5]), ((Color) results[6]),
                        ((Color) results[7]), ((Color) results[8]), ((Color) results[9]),
                        ((Color) results[10]), ((Color) results[11]), ((Color) results[12])
                );
                if (results[1] instanceof Color) customStyle.setBgColor((Color) results[1]);
                else customStyle.setStyleImgPath((String) results[1]);
                // 添加风格菜单项、按钮组，并切换风格
                addStyle(customStyle, true);
                changeUIStyle(customStyle);
            }
        } catch (ClassNotFoundException classNotFoundException) {
            classNotFoundException.printStackTrace();
        } catch (UnsupportedLookAndFeelException unsupportedLookAndFeelException) {
            unsupportedLookAndFeelException.printStackTrace();
        } catch (InstantiationException instantiationException) {
            instantiationException.printStackTrace();
        } catch (IllegalAccessException illegalAccessException) {
            illegalAccessException.printStackTrace();
        } catch (IOException ioException) {
            ioException.printStackTrace();
        } catch (InvocationTargetException invocationTargetException) {
            invocationTargetException.printStackTrace();
        } catch (AWTException awtException) {
            awtException.printStackTrace();
        }
    }

    private void updateTabUI(CustomTabbedPane tabbedPane, UIStyle style) {
        updateTabUI(tabbedPane, style, null);
    }

    // 更新 Tab 的风格
    private void updateTabUI(CustomTabbedPane tabbedPane, UIStyle style, Point p) {
        Color selectedColor = style.getSelectedColor();
        Color foreColor = style.getForeColor();
        int index = tabbedPane.getSelectedIndex();
        for (int i = 0, size = tabbedPane.getTabCount(); i < size; i++) {
//            Box box = (Box) tabbedPane.getTabComponentAt(i);
            CustomPanel panel = (CustomPanel) (tabbedPane.getTabComponentAt(i));
            CustomLabel label = (CustomLabel) (panel.getComponent(0));
            Rectangle rect = panel.getVisibleRect();
            if (i == index) {
                label.setIcon(ImageUtils.dye((ImageIcon) label.getIcon(), selectedColor));
                label.setForeground(selectedColor);
                panel.setForeground(selectedColor);
                panel.setDrawBg(true);
            } else {
                label.setIcon(ImageUtils.dye((ImageIcon) label.getIcon(), foreColor));
                label.setForeground(foreColor);
                panel.setForeground(foreColor);
                panel.setDrawBg(p != null && rect.contains(SwingUtilities.convertPoint(tabbedPane, p, panel)));
            }
        }
    }

    // 获得风格菜单项
//    List<CustomRadioButtonMenuItem> fetchStyleMenuItems() {
//        List<CustomRadioButtonMenuItem> CustomRadioButtonMenuItems =
//                styles.stream()
//                        .map(style -> {
//                            CustomRadioButtonMenuItem menuItem = new CustomRadioButtonMenuItem(style.getStyleName() + "     ");
//                            return menuItem;
//                        })
//                        // 这一步很重要，转为指定类型的数组，不能直接转换！
//                        .collect(Collectors.toList());
//        return CustomRadioButtonMenuItems;
//    }

    // 添加新风格，加到 List 最前面，apply 表示添加后是否应用
    public void addStyle(UIStyle style, boolean apply) {
        styles.add(style);
//        CustomRadioButtonMenuItem newStylePopupMenuItem = new CustomRadioButtonMenuItem(style.getStyleName() + "     ");
//        newStylePopupMenuItem.setForeground(currUIStyle.getMenuItemColor());
//        newStylePopupMenuItem.setUI(new RadioButtonMenuItemUI(currUIStyle.getMenuItemColor()));
//        stylePopupMenuButtonGroup.add(newStylePopupMenuItem);
//        stylePopupMenuItems.add(newStylePopupMenuItem);
//        if (apply) {
//            newStylePopupMenuItem.setSelected(true);
//            updateMenuItemIcon(stylePopupMenu);
//        }
//        newStylePopupMenuItem.addActionListener(l -> {
//            try {
//                changeUIStyle(style);
//            } catch (IOException ioException) {
//                ioException.printStackTrace();
//            } catch (ClassNotFoundException classNotFoundException) {
//                classNotFoundException.printStackTrace();
//            } catch (UnsupportedLookAndFeelException unsupportedLookAndFeelException) {
//                unsupportedLookAndFeelException.printStackTrace();
//            } catch (InstantiationException instantiationException) {
//                instantiationException.printStackTrace();
//            } catch (IllegalAccessException illegalAccessException) {
//                illegalAccessException.printStackTrace();
//            } catch (AWTException e) {
//                e.printStackTrace();
//            }
//        });
//        stylePopupMenu.add(newStylePopupMenuItem, stylePopupMenu.getComponentCount() - 3);
    }

    // 播放/暂停按钮执行
    public void playOrPause() {
        NetMusicInfo netMusicInfo = player.getNetMusicInfo();
        switch (player.getStatus()) {
            // 空状态，载入选择的音乐并播放
            case PlayerStatus.EMPTY:
                // 播放队列没有选中并且有歌曲在队列时自动选中第一首播放
                if (playQueue.getSelectedIndex() == -1 && !playQueueModel.isEmpty()) playQueue.setSelectedIndex(0);
                playExecutor.submit(() -> playSelected(playQueue, false));
//                // 在线音乐才需要加载界面
//                Object o = playQueue.getSelectedValue();
//                if (o instanceof File) playSelected(playQueue, false);
//                else if (o instanceof NetMusicInfo) loadingAndRun(() -> playSelected(playQueue, false));
                break;
            // 就绪状态
            case PlayerStatus.LOADED:
                playLoaded(false);
                playOrPauseButton.setIcon(ImageUtils.dye(pauseIcon, currUIStyle.getButtonColor()));
                playOrPauseButton.setToolTipText(PAUSE_TIP);
                if (miniDialog != null) {
                    miniDialog.playOrPauseButton.setIcon(playOrPauseButton.getIcon());
                    miniDialog.playOrPauseButton.setToolTipText(playOrPauseButton.getToolTipText());
                }
                break;
            // 暂停状态
            case PlayerStatus.PAUSING:
//                if (currPane == MusicPane.LYRIC) openSpectrum();
                player.continuePlay();
                playOrPauseButton.setIcon(ImageUtils.dye(pauseIcon, currUIStyle.getButtonColor()));
                playOrPauseButton.setToolTipText(PAUSE_TIP);
                if (miniDialog != null) {
                    miniDialog.playOrPauseButton.setIcon(playOrPauseButton.getIcon());
                    miniDialog.playOrPauseButton.setToolTipText(playOrPauseButton.getToolTipText());
                }
                // 重置标题
                String title = netMusicInfo != null ? TITLE + "（正在播放：" + netMusicInfo.toSimpleString() + "）"
                        : TITLE + "（正在播放：" + player.getMusicInfo().getFile() + "）";
                titleLabel.setText(StringUtils.textToHtml(title));
                setTitle(title);
                break;
            // 播放状态
            case PlayerStatus.PLAYING:
                // 淡出式暂停
                Timeline timeline = new Timeline(new KeyFrame(Duration.seconds(0.25), new KeyValue(player.getMp().volumeProperty(), 0)));
                timeline.setOnFinished(event -> {
                    player.pause();
                    player.setVolume((float) volumeSlider.getValue() / MAX_VOLUME);
                });
                timeline.play();
                playOrPauseButton.setIcon(ImageUtils.dye(playIcon, currUIStyle.getButtonColor()));
                playOrPauseButton.setToolTipText(PLAY_TIP);
                if (miniDialog != null) {
                    miniDialog.playOrPauseButton.setIcon(playOrPauseButton.getIcon());
                    miniDialog.playOrPauseButton.setToolTipText(playOrPauseButton.getToolTipText());
                }
                // 重置标题
                title = TITLE + "（暂停中：" + (netMusicInfo != null ? netMusicInfo.toSimpleString()
                        : player.getMusicInfo().getFile()) + "）";
                titleLabel.setText(StringUtils.textToHtml(title));
                setTitle(title);
                break;
        }
    }

    // 导出图片
    void saveImg(BufferedImage albumImage) {
        if (albumImage == null) return;
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("保存图片");
        ObservableList<FileChooser.ExtensionFilter> filters = fileChooser.getExtensionFilters();
        // 添加可保存的图片格式
        for (String suffix : Format.WRITE_IMAGE_TYPE_SUPPORTED) {
            filters.add(new FileChooser.ExtensionFilter(suffix.toUpperCase(), "*." + suffix));
        }
        Platform.runLater(() -> {
            File outputFile = fileChooser.showSaveDialog(null);
            if (outputFile != null) {
                ImageUtils.toFile(albumImage, outputFile);
            }
        });
    }

    // 下载歌词
    void downloadLrc(NetMusicInfo musicInfo) {
        globalExecutor.submit(() -> {
            try {
                FileUtils.makeSureDir(SimplePath.DOWNLOAD_MUSIC_PATH);
                FileUtils.writeStr(lrcStr, SimplePath.DOWNLOAD_MUSIC_PATH + musicInfo.toSimpleLrcFileName(), false);
                new TipDialog(THIS, DOWNLOAD_COMPLETED_MSG).showDialog();
            } catch (Exception e) {
                if (e instanceof IORuntimeException) {
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } else if (e instanceof HttpException) {
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } else {
                    new TipDialog(THIS, GET_RESOURCE_FAILED_MSG).showDialog();
                }
            }
        });
    }

    // 下载歌词翻译
    void downloadLrcTrans(NetMusicInfo musicInfo) {
        globalExecutor.submit(() -> {
            FileUtils.makeSureDir(SimplePath.DOWNLOAD_MUSIC_PATH);
            FileUtils.writeStr(transStr, SimplePath.DOWNLOAD_MUSIC_PATH + musicInfo.toSimpleLrcTransFileName(), false);
            new TipDialog(THIS, DOWNLOAD_COMPLETED_MSG).showDialog();
        });
    }

    // 下载歌曲(单首)
    void singleDownload(NetMusicInfo musicInfo) {
        String destMusicPath = SimplePath.DOWNLOAD_MUSIC_PATH + musicInfo.toSimpleFileName();
        String destLrcPath = SimplePath.DOWNLOAD_MUSIC_PATH + musicInfo.toSimpleLrcFileName();

        // 创建下载任务，并加入队列
        Task task = new Task(downloadList, TaskType.MUSIC, musicInfo, null);
        task.setInvokeLater(() -> {
            // 写入歌曲信息
            try {
                if (musicInfo.isMp3()) MusicUtils.writeMP3Info(destMusicPath, musicInfo);
                // 自动下载歌词
                if (isAutoDownloadLrc && StringUtils.isNotEmpty(musicInfo.getLrc()))
                    FileUtils.writeStr(musicInfo.getLrc(), destLrcPath, false);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
        task.start();
        downloadListModel.add(0, task);
        new TipDialog(this, TASK_ADDED_MSG).showDialog();
    }

    // 下载歌曲(多首)
    private void multiDownload(List musicInfos) {
        List<Task> tasks = new LinkedList<>();
        // 避免造成性能问题
        downloadList.setModel(emptyListModel);
        for (int i = musicInfos.size() - 1; i >= 0; i--) {
            Object o = musicInfos.get(i);
            if (!(o instanceof NetMusicInfo)) continue;
            NetMusicInfo musicInfo = (NetMusicInfo) o;

            String destMusicPath = SimplePath.DOWNLOAD_MUSIC_PATH + musicInfo.toSimpleFileName();
            String destLrcPath = SimplePath.DOWNLOAD_MUSIC_PATH + musicInfo.toSimpleLrcFileName();

            // 创建下载任务，并加入队列
            Task task = new Task(downloadList, TaskType.MUSIC, musicInfo, null);
            task.setInvokeLater(() -> {
                // 写入歌曲信息
                try {
                    if (musicInfo.isMp3()) MusicUtils.writeMP3Info(destMusicPath, musicInfo);
                    // 自动下载歌词
                    if (isAutoDownloadLrc && StringUtils.isNotEmpty(musicInfo.getLrc()))
                        FileUtils.writeStr(musicInfo.getLrc(), destLrcPath, false);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });
            tasks.add(task);
            downloadListModel.add(0, task);
        }
        downloadList.setModel(downloadListModel);
        for (int i = tasks.size() - 1; i >= 0; i--) tasks.get(i).start();
        tasks.clear();
        new TipDialog(this, TASK_ADDED_MSG).showDialog();
    }

    // 下载多部 MV
    public void multiDownloadMv(List<NetMvInfo> mvList) {
        LinkedList<Task> tasks = new LinkedList<>();
        // 避免造成性能问题
        downloadList.setModel(emptyListModel);
        for (int i = mvList.size() - 1; i >= 0; i--) {
            NetMvInfo mvInfo = mvList.get(i);
            // 创建下载任务，并加入队列
            Task task = new Task(downloadList, TaskType.MV, null, mvInfo);
            tasks.add(task);
            downloadListModel.add(0, task);
        }
        downloadList.setModel(downloadListModel);
        for (int i = tasks.size() - 1; i >= 0; i--) tasks.get(i).start();
        tasks.clear();
        new TipDialog(this, TASK_ADDED_MSG).showDialog();
    }

    // 播放 MV
    void playMv(int mvType) {
        System.gc();
        // 播放下载列表的 MV
        if (mvType == MvType.DOWNLOAD_LIST) {
            Task task = downloadList.getSelectedValue();
            NetMvInfo mvInfo = task.getNetMvInfo();
//            String path = SimplePath.DOWNLOAD_MV_PATH + mvInfo.toSimpleFileName();
            String dest = task.getDest();
            if (!new File(dest).exists()) {
                new TipDialog(THIS, FILE_NOT_FOUND_MSG).showDialog();
            } else {
                if (player.isPlaying()) playOrPause();
                if (videoOnly) setVisible(false);
                videoDialog = new VideoDialog(mvInfo, dest, THIS);
                videoDialog.showDialog();
                videoDialog = null;
                setVisible(true);
            }
            return;
        }

        TipDialog dialog = new TipDialog(THIS, LOADING_MV_MSG, 0);
        dialog.showDialog();

        // 右键歌曲播放其 MV
        if (mvType != MvType.MV_LIST && mvType != MvType.MV_RECOMMEND_LIST && mvType != MvType.COLLECTION) {
            NetMusicInfo musicInfo = null;
            if (mvType == MvType.NET_MUSIC_LIST) {
                musicInfo = netMusicList.getSelectedValue();
            } else if (mvType == MvType.MUSIC_LIST) {
                musicInfo = (NetMusicInfo) musicList.getSelectedValue();
            } else if (mvType == MvType.PLAY_QUEUE) {
                musicInfo = (NetMusicInfo) playQueue.getSelectedValue();
            } else if (mvType == MvType.PLAYING) {
                musicInfo = player.getNetMusicInfo();
            }

            NetMvInfo netMvInfo = new NetMvInfo();
            netMvInfo.setSource(musicInfo.getSource());
            netMvInfo.setId(musicInfo.getMvId());
            netMvInfo.setName(musicInfo.getName());
            netMvInfo.setArtist(musicInfo.getArtist());

            // 加载 MV url
            try {
                MusicServerUtils.fillMvInfo(netMvInfo);
                String url = netMvInfo.getUrl();
                if (StringUtils.isEmpty(url)) {
                    new TipDialog(THIS, GET_RESOURCE_FAILED_MSG).showDialog();
                    return;
                }
                if (player.isPlaying()) playOrPause();
                dialog.close();
                if (videoOnly) setVisible(false);
                videoDialog = new VideoDialog(netMvInfo, null, THIS);
                videoDialog.showDialog();
                videoDialog = null;
                setVisible(true);
            } catch (Exception e) {
                if (e instanceof IORuntimeException) {
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } else if (e instanceof HttpException) {
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } else {
                    new TipDialog(THIS, GET_RESOURCE_FAILED_MSG).showDialog();
                }
            } finally {
                dialog.close();
            }
        }
        // 播放搜索/下载/收藏列表的 MV
        else {
            NetMvInfo mvInfo = null;
            File file = null;
            if (mvType == MvType.MV_LIST) mvInfo = netMvList.getSelectedValue();
            else if (mvType == MvType.MV_RECOMMEND_LIST) mvInfo = (NetMvInfo) itemRecommendList.getSelectedValue();
            else if (mvType == MvType.COLLECTION) mvInfo = (NetMvInfo) collectionList.getSelectedValue();
            try {
                MusicServerUtils.fillMvInfo(mvInfo);
                String url = mvInfo.getUrl();
                if (StringUtils.isEmpty(url)) {
                    new TipDialog(THIS, GET_RESOURCE_FAILED_MSG).showDialog();
                    return;
                }

                // 不支持的格式转为 mp4 格式再播放
                if (!mvInfo.isMp4()) {
                    String fileName = mvInfo.toFileName();
                    file = new File(SimplePath.CACHE_PATH + fileName);
                    // 转为 mp4 再播放
                    File tmpFile = FileUtils.replaceSuffix(file, Format.MP4);
                    if (!tmpFile.exists()) {
                        // 下载 MV
                        if (!file.exists() || FileUtils.startsWithLeftBrace(file)) {
                            dialog.setMessage("加载视频文件......");
                            dialog.updateSize();
                            dialog.setLocationRelativeTo(null);
                            Map<String, Object> headers = null;
                            if (mvInfo.getSource() == NetMusicSource.BI) {
                                headers = new HashMap<>();
                                headers.put("referer", "https://www.bilibili.com/");
                            }
                            MusicServerUtils.download(null, mvInfo.getUrl(), file.getPath(), headers);
                        }
                        dialog.setMessage("转换视频文件格式......");
                        dialog.updateSize();
                        dialog.setLocationRelativeTo(null);
                        VideoUtils.convert(file, tmpFile);
                        // 转换成功后删除原文件
                        file.delete();
                    }
                    file = tmpFile;
                }

                if (player.isPlaying()) playOrPause();
                dialog.close();
                if (videoOnly) setVisible(false);
                videoDialog = new VideoDialog(mvInfo, file == null ? null : file.getPath(), THIS);
                videoDialog.showDialog();
                videoDialog = null;
                setVisible(true);
            } catch (Exception e) {
                if (e instanceof IORuntimeException) {
                    new TipDialog(THIS, NO_NET_MSG).showDialog();
                } else if (e instanceof HttpException) {
                    new TipDialog(THIS, TIME_OUT_MSG).showDialog();
                } else {
                    new TipDialog(THIS, GET_RESOURCE_FAILED_MSG).showDialog();
                }
            } finally {
                dialog.close();
            }
        }
    }

    // 判断是否已经收藏
    public boolean hasBeenCollected(Object o) {
        if (o == null) return false;
        DefaultListModel model = null;
        if (o instanceof AudioFile || o instanceof NetMusicInfo) model = collectionModel;
        else if (o instanceof NetPlaylistInfo) model = playlistCollectionModel;
        else if (o instanceof NetAlbumInfo) model = albumCollectionModel;
        else if (o instanceof NetArtistInfo) model = artistCollectionModel;
        else if (o instanceof NetRadioInfo) model = radioCollectionModel;
        else if (o instanceof NetMvInfo) model = mvCollectionModel;
        else if (o instanceof NetRankingInfo) model = rankingCollectionModel;
        else if (o instanceof NetUserInfo) model = userCollectionModel;
        for (int i = 0, len = model.size(); i < len; i++) {
            if (model.get(i).equals(o)) return true;
        }
        return false;
    }

    // 更新收藏
    private void updateCollection(Object o) {
        if (o == null) return;
        DefaultListModel model = null;
        if (o instanceof AudioFile || o instanceof NetMusicInfo) model = collectionModel;
        else if (o instanceof NetPlaylistInfo) model = playlistCollectionModel;
        else if (o instanceof NetAlbumInfo) model = albumCollectionModel;
        else if (o instanceof NetArtistInfo) model = artistCollectionModel;
        else if (o instanceof NetRadioInfo) model = radioCollectionModel;
        else if (o instanceof NetMvInfo) model = mvCollectionModel;
        else if (o instanceof NetRankingInfo) model = rankingCollectionModel;
        else if (o instanceof NetUserInfo) model = userCollectionModel;
        for (int i = 0, len = model.size(); i < len; i++) {
            if (model.get(i).equals(o)) {
                model.set(i, o);
                return;
            }
        }
    }

    // 更新 renderer ，避免 CustomList 各个元素大小不变
    private void updateRenderer(CustomList list) {
        ListCellRenderer renderer = list.getCellRenderer();
        if (renderer == null) return;
        synchronized (renderer) {
            list.setCellRenderer(null);
            list.setCellRenderer(renderer);
        }
    }

    // 移动歌词
    private void seekLrc(double t) {
        if (nextLrc < 0) return;
        for (int i = 0, size = statements.size(); i < size; i++) {
            if (t < statements.get(i).getTime() + lrcOffset) {
                nextLrc = i;
            } else if (i == size - 1) {
                nextLrc = size;
            } else continue;
            row = LRC_INDEX + 1 + (nextLrc - 1) * 2;
            if (!lrcScrollAnimation) {
                currScrollVal = lrcScrollPane.getVerticalScrollBar().getValue();
                lrcScrollAnimation = true;
            }
            TranslucentLrcListRenderer renderer = (TranslucentLrcListRenderer) lrcList.getCellRenderer();
            renderer.setRow(row);
            double tempRatio = nextLrc > 0 ? (t - statements.get(nextLrc - 1).getTime() - lrcOffset) /
                    ((statements.get(nextLrc - 1).hasEndTime() ? statements.get(nextLrc - 1).getEndTime() + lrcOffset
                            : (nextLrc < statements.size() ? statements.get(nextLrc).getTime() + lrcOffset
                            : player.getDurationSeconds())) - statements.get(nextLrc - 1).getTime() - lrcOffset) : 0;
            originalRatio.set(tempRatio > 1 ? (statements.get(nextLrc - 1).hasEndTime() ? 1 : 0) : tempRatio);
            break;
        }
    }

    // 获取 t 时间处的歌词
    public String getTimeLrc(double t) {
        if (nextLrc < 0) return "";
        for (int i = 0, size = statements.size(); i < size; i++) {
            if (t < statements.get(i).getTime() + lrcOffset) {
                if (i == 0) return statements.get(i).getLyric();
                else return statements.get(i - 1).getLyric();
            } else if (i == size - 1) {
                return statements.get(i).getLyric();
            }
        }
        return "";
    }

    // 更新上层组件
    private void updateUpperComp() {
        // 更新弹出菜单
        if (currPopup != null) currPopup.repaint();
        // 更新对话框
        for (JDialog d : currDialogs) {
            if (d instanceof ConfirmDialog) ((ConfirmDialog) d).updateBlur();
            else if (d instanceof CustomStyleDialog) ((CustomStyleDialog) d).updateBlur();
            else if (d instanceof EditInfoDialog) ((EditInfoDialog) d).updateBlur();
            else if (d instanceof ManageCatalogDialog) ((ManageCatalogDialog) d).updateBlur();
            else if (d instanceof ManageCustomStyleDialog) ((ManageCustomStyleDialog) d).updateBlur();
            else if (d instanceof SettingDialog) ((SettingDialog) d).updateBlur();
            else if (d instanceof SoundEffectDialog) ((SoundEffectDialog) d).updateBlur();
            else if (d instanceof TipDialog) ((TipDialog) d).updateBlur();
            else if (d instanceof ImageViewDialog) ((ImageViewDialog) d).updateBlur();
            else if (d instanceof RateDialog) ((RateDialog) d).updateBlur();
            else if (d instanceof ColorChooserDialog) ((ColorChooserDialog) d).updateBlur();
            else if (d instanceof DonateDialog) ((DonateDialog) d).updateBlur();
            else if (d instanceof AboutDialog) ((AboutDialog) d).updateBlur();
        }
    }

    // 模糊碟片，图像宽度设为 窗口宽度 * 1.2，等比例，毛玻璃化，暗化
    private void doBlur() {
        blurExecutor.submit(() -> {
            // 未加载歌曲，转为主题模糊
            if (!player.loadedMusic()) {
                doStyleBlur(currUIStyle);
                return;
            }
            BufferedImage albumImage = player.getMusicInfo().getAlbumImage();
            if (albumImage == defaultAlbumImage) albumImage = ImageUtils.eraseTranslucency(defaultAlbumImage);
            if (blurType == BlurType.MC)
                albumImage = ImageUtils.dyeRect(1, 1, ImageUtils.getAvgRGB(albumImage));
            else if (blurType == BlurType.LG)
                albumImage = ImageUtils.toGradient(albumImage);
            int gw = globalPanel.getWidth(), gh = globalPanel.getHeight();
            if (gw == 0 || gh == 0) {
                gw = windowWidth;
                gh = windowHeight;
            }
            try {
                // 改变迷你窗口背景
                if (miniDialog != null) {
                    BufferedImage finalAlbumImage = albumImage;
                    miniDialog.globalExecutor.submit(() -> miniDialog.doBlur(finalAlbumImage));
                }
                BufferedImage bufferedImage = albumImage;
                // 截取中间的一部分(有的图片是长方形)
                bufferedImage = ImageUtils.cropCenter(bufferedImage);
                if (gsOn) {
                    // 处理成 100 * 100 大小
                    bufferedImage = ImageUtils.width(bufferedImage, 100);
                    // 高斯模糊
                    bufferedImage = ImageUtils.doBlur(bufferedImage);
                }
                if (darkerOn) bufferedImage = ImageUtils.darker(bufferedImage);
                // 放大至窗口大小
                bufferedImage = ImageUtils.width(bufferedImage, gw);
                // 裁剪中间的一部分
                if (blurType == BlurType.CV) {
                    int ih = bufferedImage.getHeight();
                    bufferedImage = Thumbnails.of(bufferedImage)
                            .scale(1f)
                            .sourceRegion(0, (ih - gh) / 2, gw, gh)
                            .outputQuality(0.1)
                            .asBufferedImage();
                }
                // 设置圆角
//                bufferedImage = ImageUtils.setRadius(bufferedImage, WIN_ARC);
                globalPanel.setBackgroundImage(bufferedImage);
                if (!globalPanelTimer.isRunning()) globalPanelTimer.start();
                updateUpperComp();
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }

    // 风格背景模糊
    private void doStyleBlur(UIStyle style) {
        globalExecutor.submit(() -> {
            BufferedImage styleImage = style.getImg();
            if (gsOn) {
                // 缩小
                styleImage = ImageUtils.width(styleImage, 100);
                // 高斯模糊
                styleImage = ImageUtils.doSlightBlur(styleImage);
            }
            // 放大至窗口大小
            styleImage = ImageUtils.width(styleImage, getWidth());
            if (darkerOn) {
                // 亮度
                styleImage = ImageUtils.darker(styleImage);
            }
            // 质量
            styleImage = ImageUtils.quality(styleImage, 0.1f);
            // 一定要让 Thumbnails 降低图像质量，不然因为图像太大频繁更新造成严重卡顿！
            globalPanel.setBackgroundImage(styleImage);
            updateUpperComp();
            // 改变迷你窗口背景
//                if (miniDialog != null) miniDialog.doBlur(styleImage);
            globalPanelTimer.start();
        });
    }

    // 筛选个人音乐
    private void filterPersonalMusic() {
        filterModel.clear();
        String keyword = filterTextField.getText().toLowerCase().trim();
        int selectedIndex = collectionTabbedPane.getSelectedIndex();
        boolean useMusicList = currPersonalMusicTab != PersonalMusicTabIndex.COLLECTION || selectedIndex == CollectionTabIndex.MUSIC;
        if (keyword.isEmpty()) {
            if (currPersonalMusicTab == PersonalMusicTabIndex.LOCAL_MUSIC) musicList.setModel(musicListModel);
            else if (currPersonalMusicTab == PersonalMusicTabIndex.HISTORY) musicList.setModel(historyModel);
            else if (currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION) {
                if (selectedIndex == CollectionTabIndex.MUSIC) musicList.setModel(collectionModel);
                else if (selectedIndex == CollectionTabIndex.PLAYLIST) collectionList.setModel(playlistCollectionModel);
                else if (selectedIndex == CollectionTabIndex.ALBUM) collectionList.setModel(albumCollectionModel);
                else if (selectedIndex == CollectionTabIndex.ARTIST) collectionList.setModel(artistCollectionModel);
                else if (selectedIndex == CollectionTabIndex.RADIO) collectionList.setModel(radioCollectionModel);
                else if (selectedIndex == CollectionTabIndex.MV) collectionList.setModel(mvCollectionModel);
                else if (selectedIndex == CollectionTabIndex.RANKING) collectionList.setModel(rankingCollectionModel);
                else if (selectedIndex == CollectionTabIndex.USER) collectionList.setModel(userCollectionModel);
            }
            if (useMusicList) {
                int size = musicList.getModel().getSize();
                countLabel.setText(String.format("共 %s 首", size));
                if (size != 0) {
                    if (currPersonalMusicTab != PersonalMusicTabIndex.COLLECTION) {
                        leftBox.remove(emptyHintPanel);
                        leftBox.add(musicScrollPane);
                    } else {
                        musicCollectionLeftBox.remove(emptyHintPanel);
                        musicCollectionLeftBox.add(musicScrollPane);
                    }
                }
            } else {
                int size = collectionList.getModel().getSize();
                countLabel.setText(String.format("共 %s 项", size));
                if (size != 0) {
                    Box box = null;
                    if (selectedIndex == CollectionTabIndex.PLAYLIST) box = playlistCollectionLeftBox;
                    else if (selectedIndex == CollectionTabIndex.ALBUM) box = albumCollectionLeftBox;
                    else if (selectedIndex == CollectionTabIndex.ARTIST) box = artistCollectionLeftBox;
                    else if (selectedIndex == CollectionTabIndex.RADIO) box = radioCollectionLeftBox;
                    else if (selectedIndex == CollectionTabIndex.MV) box = mvCollectionLeftBox;
                    else if (selectedIndex == CollectionTabIndex.RANKING) box = rankingCollectionLeftBox;
                    else if (selectedIndex == CollectionTabIndex.USER) box = userCollectionLeftBox;
                    box.remove(emptyHintPanel);
                    box.add(collectionScrollPane);
                }
            }
            return;
        }
        DefaultListModel listModel = null;
        if (currPersonalMusicTab == PersonalMusicTabIndex.LOCAL_MUSIC) listModel = musicListModel;
        else if (currPersonalMusicTab == PersonalMusicTabIndex.HISTORY) listModel = historyModel;
        else if (currPersonalMusicTab == PersonalMusicTabIndex.COLLECTION) {
            if (selectedIndex == CollectionTabIndex.MUSIC) listModel = collectionModel;
            else if (selectedIndex == CollectionTabIndex.PLAYLIST) listModel = playlistCollectionModel;
            else if (selectedIndex == CollectionTabIndex.ALBUM) listModel = albumCollectionModel;
            else if (selectedIndex == CollectionTabIndex.ARTIST) listModel = artistCollectionModel;
            else if (selectedIndex == CollectionTabIndex.RADIO) listModel = radioCollectionModel;
            else if (selectedIndex == CollectionTabIndex.MV) listModel = mvCollectionModel;
            else if (selectedIndex == CollectionTabIndex.RANKING) listModel = rankingCollectionModel;
            else if (selectedIndex == CollectionTabIndex.USER) listModel = userCollectionModel;
        }
        // 解决选中第一项重新筛选的性能问题
        if (useMusicList) musicList.setModel(emptyListModel);
        else collectionList.setModel(emptyListModel);
        for (int i = 0, size = listModel.size(); i < size; i++) {
            Object o = listModel.get(i);
            if (o.toString().toLowerCase().contains(keyword)) filterModel.addElement(o);
        }
        if (useMusicList) {
            musicList.setModel(filterModel);
            countLabel.setText(String.format("共 %s 首", musicList.getModel().getSize()));
        } else {
            collectionList.setModel(filterModel);
            countLabel.setText(String.format("共 %s 项", collectionList.getModel().getSize()));
        }
    }

    // 从搜索历史删除关键词
    private void removeKeywordInHistorySearch(String keyword, int type) {
        CustomPanel p = null;
        if (type == HistorySearchType.NET_MUSIC) p = netMusicHistorySearchInnerPanel2;
        else if (type == HistorySearchType.NET_PLAYLIST) p = netPlaylistHistorySearchInnerPanel2;
        else if (type == HistorySearchType.NET_ALBUM) p = netAlbumHistorySearchInnerPanel2;
        else if (type == HistorySearchType.NET_ARTIST) p = netArtistHistorySearchInnerPanel2;
        else if (type == HistorySearchType.NET_RADIO) p = netRadioHistorySearchInnerPanel2;
        else if (type == HistorySearchType.NET_MV) p = netMvHistorySearchInnerPanel2;
        else if (type == HistorySearchType.NET_USER) p = netUserHistorySearchInnerPanel2;
        Component[] components = p.getComponents();
        for (Component c : components) {
            DialogButton b = (DialogButton) c;
            if (b.getText().equals(keyword)) {
                p.remove(b);
                return;
            }
        }
    }

    // 加载搜索建议
    private void updateSearchSuggestion() {
        synchronized (netMusicSearchSuggestionInnerPanel2) {
            try {
                String part = searchTextField.getText();
                Set<String> suggestions = MusicServerUtils.getSearchSuggestion(part);
                if (!suggestions.isEmpty()) {
                    if (!netMusicSearchSuggestionPanel.isShowing()) {
                        SwingUtilities.updateComponentTreeUI(netMusicRefreshSearchSuggestionButton);
                        // 显示 “搜索建议” 面板
                        netMusicKeywordsPanel.add(netMusicSearchSuggestionPanel, 0);
                    }
                } else {
                    // 没有结果时隐藏 “搜索建议” 面板
                    netMusicKeywordsPanel.remove(netMusicSearchSuggestionPanel);
                }
                netMusicSearchSuggestionInnerPanel2.removeAll();
                DialogButton b = null;
                for (String keyword : suggestions) {
                    b = new DialogButton(keyword);
                    b.addActionListener(event -> {
                        searchTextField.requestFocus();
                        searchTextField.setText(keyword);
                        netMusicClearInputButton.setVisible(true);
                        searchButton.doClick();
                        netLeftBox.remove(netMusicKeywordsPanelScrollPane);
                        netLeftBox.add(netMusicScrollPane);
                    });
                    b.setForeColor(currUIStyle.getButtonColor());
                    netMusicSearchSuggestionInnerPanel2.add(b);
                }
                // 调整面板大小
                if (b != null) {
                    DialogButton fb = b;
                    b.addComponentListener(new ComponentAdapter() {
                        @Override
                        public void componentMoved(ComponentEvent e) {
                            Point p = SwingUtilities.convertPoint(fb, 0, 0, netMusicSearchSuggestionInnerPanel2);
                            Dimension d = new Dimension(netMusicSearchSuggestionInnerPanel2.getWidth(), p.y + 50);
                            netMusicSearchSuggestionInnerPanel2.setMinimumSize(d);
                            netMusicSearchSuggestionInnerPanel2.setPreferredSize(d);
                            netMusicSearchSuggestionInnerPanel2.setVisible(false);
                            netMusicSearchSuggestionInnerPanel2.setVisible(true);
                        }
                    });
                }
                netMusicSearchSuggestionPanel.repaint();
            } catch (IORuntimeException ioRuntimeException) {
                // 无网络连接
                new TipDialog(THIS, NO_NET_MSG).showDialog();
            } catch (HttpException httpException) {
                // 请求超时
                new TipDialog(THIS, TIME_OUT_MSG).showDialog();
            } catch (JSONException jsonException) {
                // 接口异常
                new TipDialog(THIS, API_ERROR_MSG).showDialog();
            }
        }
    }

    // 加载热搜词
    private void updateHotSearch() {
        synchronized (netMusicHotSearchInnerPanel2) {
            try {
                Set<String> hotSearch = MusicServerUtils.getHotSearch();
                // 显示 “热门搜索” 面板
                if (!hotSearch.isEmpty() && !netMusicHotSearchPanel.isShowing()) {
                    netMusicKeywordsPanel.add(netMusicHotSearchPanel, 0);
                }
                netMusicHotSearchInnerPanel2.removeAll();
                DialogButton b = null;
                for (String keyword : hotSearch) {
                    b = new DialogButton(keyword);
                    b.addActionListener(event -> {
                        searchTextField.requestFocus();
                        searchTextField.setText(keyword);
                        netMusicClearInputButton.setVisible(true);
                        searchButton.doClick();
                        netLeftBox.remove(netMusicKeywordsPanelScrollPane);
                        netLeftBox.add(netMusicScrollPane);
                    });
                    b.setForeColor(currUIStyle.getButtonColor());
                    netMusicHotSearchInnerPanel2.add(b);
                }
                // 调整面板大小
                if (b != null) {
                    DialogButton fb = b;
                    b.addComponentListener(new ComponentAdapter() {
                        @Override
                        public void componentMoved(ComponentEvent e) {
                            Point p = SwingUtilities.convertPoint(fb, 0, 0, netMusicHotSearchInnerPanel2);
                            Dimension d = new Dimension(netMusicHotSearchInnerPanel2.getWidth(), p.y + 50);
                            netMusicHotSearchInnerPanel2.setMinimumSize(d);
                            netMusicHotSearchInnerPanel2.setPreferredSize(d);
                            netMusicHotSearchInnerPanel2.setVisible(false);
                            netMusicHotSearchInnerPanel2.setVisible(true);
                        }
                    });
                }
                netLeftBox.repaint();
            } catch (IORuntimeException ioRuntimeException) {
                // 无网络连接
                new TipDialog(THIS, NO_NET_MSG).showDialog();
            } catch (HttpException httpException) {
                // 请求超时
                new TipDialog(THIS, TIME_OUT_MSG).showDialog();
            } catch (JSONException jsonException) {
                // 接口异常
                new TipDialog(THIS, API_ERROR_MSG).showDialog();
            }
        }
    }

    // 清除歌单请求实例
    private void clearRequestForPlaylist() {
        currPlaylistMusicInfo = null;
        currPlaylistPlaylistInfo = null;
        currPlaylistCommentInfo = null;
        currPlaylistUserInfo = null;
    }

    // 清除专辑请求实例
    private void clearRequestForAlbum() {
        currAlbumMusicInfo = null;
        currAlbumArtistInfo = null;
        currAlbumAlbumInfo = null;
        currAlbumUserInfo = null;
        currAlbumCommentInfo = null;
    }

    // 清除歌手请求实例
    private void clearRequestForArtist() {
        currArtistMusicInfo = null;
        currArtistAlbumInfo = null;
        currArtistArtistInfo = null;
        currBuddyArtistInfo = null;
        currArtistMvInfo = null;
        currArtistRadioInfo = null;
        currCVRadioInfo = null;
    }

    // 清除电台请求实例
    private void clearRequestForRadio() {
        currRadioMusicInfo = null;
        currRecRadioMusicInfo = null;
        currRadioUserInfo = null;
        currRadioArtistInfo = null;
        currRadioRadioInfo = null;
    }

    // 清除 MV 请求实例
    private void clearRequestForMv() {
        currMvArtistInfo = null;
        currMvMusicInfo = null;
        currMvMvInfo = null;
        currEpisodesMvInfo = null;
        currMvUserInfo = null;
    }

    // 清除用户请求实例
    private void clearRequestForUser() {
        currFollowUserUserInfo = null;
        currFollowedUserUserInfo = null;
        currAuthorMusicInfo = null;
        currAuthorAlbumInfo = null;
        currUserPlaylistInfo = null;
        currUserArtistInfo = null;
        currUserMvInfo = null;
        currUserRadioInfo = null;
        currUserCommentInfo = null;
        currSubscriberPlaylistInfo = null;
        currSubscriberRadioInfo = null;
    }

    // 退出播放器
    private void exit() {
        try {
            if (player.loadedMusic()) player.unload();        // 从播放器卸载当前文件，避免播放中的文件被占用
            // 缓存超出最大值时清理
            if (FileUtils.getDirOrFileSize(new File(SimplePath.CACHE_PATH)) > maxCacheSize * 1024 * 1024)
                clearCache();
            SystemTray.getSystemTray().remove(trayIconImg);
            saveConfig();
            System.exit(0);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // 清除缓存
    private void clearCache() {
        FileUtils.deepDeleteFiles(SimplePath.CACHE_PATH);
    }

    // 弹出加载面板并执行
    private void loadingAndRun(Runnable runnable) {
        globalExecutor.submit(() -> {
            try {
                loading.start();
                loading.setText(LOADING_MSG);
                runnable.run();
                Thread.sleep(15);
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                loading.stop();
            }
        });
    }

//    // 异步执行
//    void async(Runnable runnable) {
//        globalExecutor.submit(() -> runnable.run());
//    }

//    // 判断歌曲文件是否已在当前列表中
//    boolean isDuplicate(File file) {
//        Object[] files = musicListModel.toArray();
//        for (Object f : files) {
//            if (((File) f).getPath().equals(file.getPath())) {
//                return true;
//            }
//        }
//        return false;
//    }

    // 全局字体抗锯齿，必须在初始化 JFrame 之前调用！
    static void enableAntiAliasing() {
        System.setProperty("awt.useSystemAAFontSettings", "on");
        System.setProperty("swing.aatext", "true");
    }

    private static boolean validateHash() {
        File f1 = new File(SimplePath.ICON_PATH + "weixin.png");
        File f2 = new File(SimplePath.ICON_PATH + "alipay.png");
        if (!f1.exists() || !"254dd3cda4ac3b7f56505b097029afd6a9f2f450e91ee3a476b0c451391ab891".equals(FileUtils.getHash(f1)))
            return false;
        if (!f2.exists() || !"2646a9347bd43e2f5c9a15683de498e00f83ab74cd98f07522b23d58ed6e8cf7".equals(FileUtils.getHash(f2)))
            return false;
        return true;
    }

    public static void main(String[] args) throws ClassNotFoundException, UnsupportedLookAndFeelException, InstantiationException, IllegalAccessException, AWTException, IOException, InterruptedException {
        GlobalExecutors.requestExecutor.execute(() -> {
            if (!validateHash()) System.exit(-1);
        });
        enableAntiAliasing();
        new PlayerFrame().initUI();
    }

    // 传给自定义样式对话框的参数
    public UIStyle getCurrUIStyle() {
        return currUIStyle;
    }

    public List<UIStyle> getStyles() {
        return styles;
    }

    public List<File> getCatalogs() {
        return catalogs;
    }

//    public List<CustomRadioButtonMenuItem> getStylePopupMenuItems() {
//        return stylePopupMenuItems;
//    }

//    public CustomPopupMenu getStylePopupMenu() {
//        return stylePopupMenu;
//    }

    public CustomSlider getVolumeSlider() {
        return volumeSlider;
    }

    public BufferedImage getDefaultAlbumImage() {
        return defaultAlbumImage;
    }

    public MusicPlayer getPlayer() {
        return player;
    }

    public GlobalPanel getGlobalPanel() {
        return globalPanel;
    }

    public DesktopLyricDialog getDesktopLyricDialog() {
        return desktopLyricDialog;
    }

    public DefaultListModel getMvCollectionModel() {
        return mvCollectionModel;
    }

    public boolean isShowSpectrum() {
        return showSpectrum;
    }
}
